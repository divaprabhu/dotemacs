* Echo Area
- Max number of line in message buffer
  #+begin_src emacs-lisp
    (setq message-log-max 100000)
  #+end_src

* Exiting Emacs
|-----------------------------+------------+--------------------------------------------|
| *C-x C-c OR M-x kill-emacs* | *:q or ZZ* | exit emacs                                 |
| C-z                         |            | suspend-frame (suspend in terminal/iconify |
|                             |            | in GUI)                                    |
| *M-x recover-file*          | *:e!*      | recover from autosave file                 |
|-----------------------------+------------+--------------------------------------------|
#+begin_src emacs-lisp
  (setq inhibit-startup-screen t)
#+end_src

** Prompts
|-----+-------------------------|
| y   | save this file          |
| n   | don't save              |
| !   | save all files          |
| q   | quit without saving any |
| .   | save this file and quit |
| C-r | view this file          |
| C-h | display help            |
|-----+-------------------------|
* Editing
- POINT is before cursor position
- REGION is all chars between MARK and POINT
** Insert
|------------------+----------------------------------+--------------------------------|
| *C-q CHAR*       | *C-v CHAR*                       | quoted-insert (insert CHAR     |
|                  |                                  | literally)                     |
|                  |                                  | Followed by octal char, insert |
|                  |                                  | char with octal code           |
|                  |                                  | Followed by other char, insert |
|                  |                                  | it literally                   |
| *C-x 8 RET*      | *C-v u HHHH* or *C-v U HHHHHHHH* | insert-char (insert Unicode    |
|                  |                                  | char with name or code-point   |
| *C-x 8 e*        |                                  | insert emoji                   |
| *C-x z [z z...]* | *.*                              | repeat (last command)          |
|------------------+----------------------------------+--------------------------------|
 
** Movement
|---------+------+---------------------------------------------------------|
| *C-f*   | *l*  | forward-char                                            |
| *C-b*   | *h*  | backward-char                                           |
| *M-f*   | *w*  | forward-word                                            |
| *M-b*   | *b*  | backward-word                                           |
| *C-M-f* |      | forward-sexp (what constitutes sexp is defined by mode) |
| *C-M-b* |      | backward-sexp                                           |
| *C-n*   | *j*  | next-line                                               |
| *C-p*   | *k*  | previous line                                           |
|         | *gj* | set line-move-visual to nil for C-n and C-p to move     |
|         | *gk* | by logical lines instead of visual                      |
| *C-M-n* |      | forward-list (end of next bracketed list)               |
| *C-M-p* |      | backward-list (start of prev bracketed list)            |
| *C-a*   | *0*  | move-beginning-of-line                                  |
| *C-e*   | *$*  | move-end-of-line                                        |
| *M-a*   | *(*  | backward-sentence                                       |
| *M-e*   | *)*  | forward-sentence                                        |
| *C-M-a* | *[[* | beginning-of-defun                                      |
| *C-M-e* | *]]* | end-of-defun                                            |
|---------+------+---------------------------------------------------------|

#+begin_src emacs-lisp
  (setq line-move-visual t) ;; C-n C-p move by screenlines
  (setq track-eol nil) ;; don't track end of line when moving
  (setq next-line-add-newline nil) ;; C-n at the end of buffer won't add new lines
#+end_src

|------------------------+---------------+----------------------------------------------------------------------|
| *M-m*                  | *^*           | back-to-indentation (first non-whitespace on line)                   |
| M-}                    | *]]*          | forward-paragraph                                                    |
| M-{                    | *[[*          | backward-paragraph                                                   |
| *M->*                  | *G*           | end-of-buffer                                                        |
| *M-<*                  | *gg*          | beginning-of-buffer                                                  |
| C-x ]                  |               | forward-page                                                         |
| C-x [                  |               | backward-page                                                        |
| *C-M-d*                |               | down-list (move forward down one level of parantheses)               |
| *C-M-u*                |               | backward-up-list (move backward out of one level of parantheses)     |
| *C-v*                  | *C-f*         | scroll-up-command                                                    |
| *M-v*                  | *C-b*         | scroll-down-command                                                  |
| *C-M-v*                |               | scroll-other-window (up)                                             |
| *C-M-S-v OR C-u C-M-v* |               | scroll-other-window-down                                             |
| *C-l*                  | *C-l*         | recenter-top-bottom                                                  |
|                        |               | Move current line to center, top or bottom                           |
| *M-g g OR M-g M-g*     | *N G*         | goto-line                                                            |
| *M-g TAB*              |               | move-to-column                                                       |
| M-x subword-mode       |               | treat CamelCase as distinct words                                    |
| M-x superword-mode     |               | treat snake_case as one word                                         |
| *M-r*                  | *H or M or L* | move-to-window-line-top-bottom (move point to center, top or bottom) |
|------------------------+---------------+----------------------------------------------------------------------|

** Erase
|----------+-----------+---------------------------------------|
| *DEL*    | *DEL*     | delete-backward-char or active region |
| *Delete* | *dl*      | delete-forward-char or active region  |
| *C-d*    |           | delete-char (after point)             |
| *M-d*    | *dw*      | kill-word                             |
| *M-DEL*  | *db*      | backward-kill-word                    |
| *C-k*    | *d$ or D* | kill-line (to the end of line)        |
|----------+-----------+---------------------------------------|

** Undo
|-----------------------------------+-------+-----------|
| C-x u OR C-_ or *C-/*             | *u*   | undo      |
| *C-g C-/* OR C-g C-_ OR C-g C-x u | *C-r* | redo      |
| *C-?* (Emacs > 28)                |       | undo-redo |
|-----------------------------------+-------+-----------|

** Blank lines
|-----------+-----+-------------------------------------------------------------------------|
| *C-o*     | *o* | open-line (create new line after point)                                 |
| *C-x C-o* |     | delete-blank-line (delete all surrounding blank lines leaving just one) |
|-----------+-----+-------------------------------------------------------------------------|

** Position info
|--------------------------+------+-----------------------------------------------------------|
| M-x line-number-mode     |      | display line number in modeline                           |
| M-x column-number-mode   |      | display column number in modeline                         |
| *M-=*                    |      | count-word-region (display line, word and chars in region |
| *C-x =*                  | *ga* | what-cursor-position (display charater code after point)  |
|                          |      | with prefix, show details of character including name     |
| M-x hl-line-mode         |      | highlight current line                                    |
| M-x size-indication-mode |      | display buffer size (lines)                               |
| what-cursor-show-names   |      | show unicode charater name when C-x =                     |
|--------------------------+------+-----------------------------------------------------------|

#+begin_src emacs-lisp
  (line-number-mode 1)
  (column-number-mode 1)
  (global-hl-line-mode 1)
  (size-indication-mode 1)
  (setq what-cursor-show-names t)
#+end_src

** Repeating(universal-argument)
|------------------------+---------------------------------------+----------------------------------------------------------|
| *C-u N CMD OR M-N CMD* | most vim commands take numeric prefix | digit-argument (repeat command N times)                  |
| *M-- CMD OR M--N CMD*  |                                       | negative-argument                                        |
| M-5 0 C-n              |                                       | go down 50 line                                          |
| *M-5 C-u 0*            |                                       | insert 0 5 times (C-u separates argument from the count) |
| C-u CMD                |                                       | repeat CMD 4 times                                       |
| C-u C-u CMD            |                                       | repeat CMD 4 * 4 = 16 times and so on...                 |
| *C-x z [z z...]*       | *.*                                   | repeat previous command using same arguments             |
|------------------------+---------------------------------------+----------------------------------------------------------|

* Mini-buffer
- last but one line of emacs                          Modeline
- Bottom line of emacs                                ECHO area or MINIBUFFER
- ECHO area                                           only for output
- MINIFUFFER                                          for input

** Editing
|------------------+-------+----------------------------------------------------------------------------------|
| *C-g*            | *C-g* | keyboard-quit (exit minibuffer or cancel partially type command, running command |
|                  |       | or program started from within emacs                                             |
| *C-q C-j OR C-o* |       | enter new line in minibuffer                                                     |
|------------------+-------+----------------------------------------------------------------------------------|
#+begin_src emacs-lisp
  (setq minibuffer-follows-selected-frame nil) ;; minibuffer stays in same frame
  (file-name-shadow-mode 1) ;; shadow ignored file path in minibuffer
  (setq insert-default-directory t) ;; strat with default directory in minibuffer
  (setq max-mini-window-height 0.25) ;; default value, 25% of frame height
#+end_src
- Automaticall shrink or expand minibuffer based on number of lines of text
  #+begin_src emacs-lisp
    (setq resize-mini-windows t)
  #+end_src
- Allow recursive minibuffer and also display the recursion depth
  #+begin_src emacs-lisp
    (setq enable-recursive-minibuffer t)
    (setq minibuffer-depth-indicate-mode t)
  #+end_src
- Single escape to quit
  #+begin_src emacs-lisp
    ;; (global-set-key (kbd "<escape>") 'keyboard-escape-quit)
  #+end_src
  #+begin_src emacs-lisp
    (setq minibuffer-completion-auto-choose t) ;; insert current completion candidate in
    (setq confirm-nonexistent-file-or-buffer nil) ;; don't ask confirmation
  #+end_src
** Completion
|----------------------------------------+-------+----------------------------------------------------------------------------------|
| *TAB* or C-i                           | *TAB* | minibuffer-complete (complete text in mini buffer as much as possible)           |
| SPC                                    |       | minibuffer-complete-word (complete in minibuffer upto end of of word)            |
| RET                                    |       | minibuffer-complete-and-exit (like tab if many match else like execute command)  |
| ?                                      |       | minibuffer-completion-help (show list of possible completion in new window)      |
| *M-v*                                  |       | switch-to-completions (select window showing completion list)                    |
| RET                                    |       | choose-completion (in completion list buffer, select completion at point)        |
| TAB                                    |       | next-completion (cycle through completion in completion list buffer)             |
| s-TAB                                  |       | previous-completion (reverse cycle through completion in completion list buffer) |
| q                                      |       | quit-window (quit completion list buffer and switch to minibuffer)               |
| z                                      |       | kill-current-buffer (close completion list buffer and window)                    |
| 'read-filename-completion-ignore-case' |       | Ignore case while completing file names                                          |
| 'read-buffer-completion-ignore-case'   |       | Ignore case while completing buffer names                                        |
| 'completion-ignored-extensions'        |       | Ignore some extensions in completion like .o .elc etc                            |
| 'completion-auto-help'                 |       | nil - never display completion list buffer. Type ? explicitly to see it          |
|                                        |       | lazy - show completion list on second tab                                        |
| 'completion-cycle-threshold'           |       | t - cycle through completion alternatives by completing first alternative        |
|                                        |       | each invocation replaces it with next alternative                                |
|                                        |       | N - switch to this behavior only when number of alternatives is less than N      |
|----------------------------------------+-------+----------------------------------------------------------------------------------|
#+begin_src emacs-lisp
  (setq completion-styles '(initials partial-completion flex basic))
  (setq completion-auto-help t)
  (setq completion-auto-select nil) 
  (setq completion-cycle-threshold 5) ;; always cycle through completion candidates
  (setq completions-format 'one-column) ;; completion list buffer format
  (setq completions-sort nil) ;; sort candidatate alphabetically
  (setq completions-max-height nil) ;; no height limit for completion list buffer
  (setq completions-header-format nil) ;; no header in completion list buffer
  (define-key minibuffer-local-map (kbd "M-p") #'minibuffer-previous-completion)
  (define-key minibuffer-local-map (kbd "M-n") #'minibuffer-next-completion)

  ;; Up/down when competing in a normal buffer
  (define-key completion-in-region-mode-map (kbd "M-p") #'minibuffer-previous-completion)
  (define-key completion-in-region-mode-map (kbd "M-n") #'minibuffer-next-completion)
  ;; M-RET will select the completion. minibuffer-chose-completion
#+end_src

** History
|----------------+-------+----------------------------------------------------------------------------|
| *M-p*          | *M-p* | next-history-element                                                       |
| *M-n*          | *M-n* | previous-history-element (display previous command executed in minibuffer) |
| *DOWN*         |       | next-line-or-history-element                                               |
|                |       | In multiline minibuffer, go to next line otherwise go to next history)     |
| *UP*           |       | previous-line-or-history-element                                           |
| M-s REGEXP RET |       | next-matching-history-element                                              |
| M-r REGEXP RET |       | previous-matching-history-element                                          |
|----------------+-------+----------------------------------------------------------------------------|
- don't show the "default" text in minibuffer
  #+begin_src emacs-lisp
    (setq minibuffer-eldef-shorten-default t)
  #+end_src
- Max length of minibuffer history and remove duplicate entries from history
  #+begin_src emacs-lisp
    (setq history-length 100
	  history-delete-duplicates t
	  savehist-minibuffer-history-variables '(minibuffer-history
						  query-replace-history
						  file-name-history
						  buffer-name-history
						  regexp-history
						  extended-command-history
						  shell-command-history
						  read-expression-history
						  command-history))
  #+end_src
    
** Repeating
|--------------------------+---+----------------------------------------------------------------|
| *C-x ESC ESC*            |   | repeat-complete-command (re-execute recent minibuffer command) |
| M-x list-command-history |   | list-command-history (most recent first)                       |
|--------------------------+---+----------------------------------------------------------------|

- Show history of incremental search in addition to command for C-x <ESC> <ESC>
  #+begin_src emacs-lisp
    (setq isearch-resume-in-command-history t)
  #+end_src

** Yes or No prompt
#+begin_src emacs-lisp
  (setq use-short-answers t)
#+end_src

* Execute command
|-----+--------------------------|
| M-x | execute-extended-command |
|-----+--------------------------|

- Display keybinding suggestion for 5s instead of default 2s and show shorthands
  #+begin_src emacs-lisp
    (setq suggest-key-bindings 5)
    (setq extended-command-suggest-shorter t)
  #+end_src

* Help
|------------------+---+-------------------------------------------------------|
| C-h C-h OR C-h ? |   | help-for-help                                         |
| C-h q            |   | help-quit                                             |
| C-h a            |   | appropos-command (search only commands not functions) |
| C-h b            |   | describe-bindings                                     |
| C-h c            |   | describe-key-briefly                                  |
| *C-h d*          |   | apropos-documentation (search in docstring)           |
| *C-h f*          |   | describe-function                                     |
| *C-h F*          |   | Info-goto-emacs-command-node                          |
| C-h h            |   | view-hello-file (unicode chars in many language)      |
| *C-h i*          |   | info (manuals)                                        |
| *C-h 4 i*        |   | info-other-window                                     |
| *C-h k*          |   | describe-key                                          |
| *C-h m*          |   | describe-mode (describe keybindings in current mode)  |
| *C-h r*          |   | info-emacs-manual                                     |
| *C-h v*          |   | descibe-variable                                      |
| *C-h w*          |   | where-is (reverse of describe-key)                    |
| C-h p            |   | find-by-keyword (find a package matching keyword)     |
| C-h t            |   | help-with-tutorial                                    |
| C-h 4 i          |   | info-other-window                                     |
|------------------+---+-------------------------------------------------------|
#+begin_src emacs-lisp
  (setq help-window-select t) ;; switch to help window when created
  (setq help-window-keep-selected t) ;; reuse same Help buffer
#+end_src
** Info commands
|-----+---------------------------------------------------------------------------|
| ?   | display summary of info commands                                          |
| *h* | start the info tutorial                                                   |
| q   | quit info                                                                 |
| *]* | jump to next node (good for end to end reading)                           |
| *[* | jump to previous node                                                     |
| n   | jump to next node in sequence (won't jump from child node to next parent) |
| p   | jump to previous node in sequence                                         |
| *u* | jump up a node                                                            |
| *l* | jump to last visited node (backward)                                      |
| r   | jump to last visited node (forward)                                       |
| *m* | visit a specific node (tab to autocomplete)                               |
| *i* | lookup a topic in index                                                   |
| ,   | jump to next match from previous i command                                |
| SPC | go forward on screen                                                      |
| DEL | go back one screen                                                        |
| C-l | redisplay screen                                                          |
|-----+---------------------------------------------------------------------------|

* Mark and Region
- KILL commands delete more than a single character
- DEL commands delete a single char or whitespace
- Killed text can be reinserted(YANKed) whereas deleted text can't
- In emacs backspace is indicated with DEL
- Highlight region even for non selected window
  #+begin_src emacs-lisp
    (setq highlight-nonselected-windows t) ;; each window highlights its own region
    (setq use-empty-active-region nil) ;; region aware commands treat empty region as inactive
  #+end_src

  |--------------------+--------------+----------------------------------------------------|
  | *C-SPC* OR C-@     | *mm*         | set-mark-command                                   |
  | *C-x C-x*          | *o* (visual) | exchange-point-and-mark (use twince to find mark)  |
  | *M-@ [M-@ M-@...]* | *vw*         | mark-word                                          |
  |                    |              | (set mark after next word, don't move point)       |
  | *C-M-SPC*          |              | mark-sexp (most cases marks word)                  |
  | *M-h [M-h M-h...]* | *v]]*        | mark-paragraph                                     |
  |                    |              | (set point to beginning of para and mark to end)   |
  | *C-M-h*            |              | mark-defun                                         |
  |                    |              | (set point to beginning of defun and mark to end)  |
  | *C-x h*            | *ggVG*       | mark-whole-buffer                                  |
  |                    |              | (set point to beginning of buffer and mark to end) |
  |--------------------+--------------+----------------------------------------------------|

- if the region is not selected then don't run commands on inactive region
  #+begin_src emacs-lisp
    (setq delete-active-region 'kill) ;; kill region instead of delete
    (setq mark-even-if-inactive nil)
    (delete-selection-mode -1) ;; with active region typing character
    ;; inserts it without replacing region
  #+end_src

  |------------------------------+-------+----------------------------------------|
  | *C-u C-SPC [C-SPC C-SPC...]* | *`m*  | jump to last mark                      |
  | *C-x C-SPC*                  | *C-o* | pop-global-mark (works across buffers) |
  | C-SPC C-SPC                  |       | set and unset mark (good for jumping)  |
  |------------------------------+-------+----------------------------------------|

  #+begin_src emacs-lisp
    (setq set-mark-command-repeat-pop t
	  mark-ring-max 512
	  global-mark-ring-max 512)
  #+end_src

- Setting C-<SPC> to activate and highlight region is called transient mode
- Toggle transient mark mode                          M-x transient-mark-mode
- When transient mode is off
    + C-<SPC> or C-x C-x does not highlight region
    + Commands that depend on active region does not work and may behave differently
    + Activate transient mode temporarily               C-<SPC> C-<SPC> or C-u C-x C-x
* Killing and Moving text
** Delete and Kill
- Two or more kill commands in sequence append to kill ring and preserve text order
|-----------+------+---------------------------------------------------------------------|
| *C-d*     | *dl* | delete-char                                                         |
| Delete    |      | delete-forward-char                                                 |
| *M-d*     | *dw* | kill-word                                                           |
| DEL       |      | delete-backward-char                                                |
| *M-DEL*   | *db* | backward-kill-word                                                  |
| *C-k*     | *D*  | kill-line (from point till end of line)                             |
| *M-k*     |      | kill-sentence                                                       |
| *C-M-k*   |      | kill-sexp (kill next balanced expression)                           |
| M-- M-k   |      | backward-kill-sentence                                              |
| *M-- C-k* | *d0* | kill-line (from point till start of line)                           |
| *C-S-DEL* | *dd* | kill-whole-line                                                     |
| *C-x C-o* |      | delete-blank-lines (collapse to single blank line)                  |
| M-\       |      | delete-horizontal-space (delete whitespace on either side of point  |
| *M-SPC*   |      | just-one-space (same as M-\ but leaves on space)                    |
| *M-^*     | *J*  | delete-indentation (join this line with previous line)              |
|           |      | with prefix join with next line                                     |
| *C-w*     | *d*  | kill-region                                                         |
| *M-w*     | *y*  | kill-ring-save (copy region)                                        |
| *C-M-w*   |      | append-next-kill                                                    |
|           |      | kill is appended to previous killed text if command kills forward   |
|           |      | kill is prepended to previous killed text if command kills backward |
| *M-z*     |      | zap-to-char                                                         |
|           |      | (kill till next occurence of char including char)                   |
|-----------+------+---------------------------------------------------------------------|

- Remap C-w to kill region if active, else kill backword-word
  #+begin_src emacs-lisp
    (defun my/kill-region-or-backward-word ()
      (interactive)
      (if (region-active-p)
	  (kill-region (region-beginning) (region-end))
	(backward-kill-word 1)))
    (global-set-key (kbd "C-w") 'my/kill-region-or-backward-word)
  #+end_src

- Identical subsequent kills yields single killring entry
  #+begin_src emacs-lisp
    (setq kill-do-not-save-duplicates t)
  #+end_src

- C-k also kills space and newlines if triggered from start of line
  #+begin_src emacs-lisp
    (setq kill-whole-line t)
  #+end_src
- Avoid beep for kill in read only buffer. They act like copy
  #+begin_src emacs-lisp
    (setq kill-read-only-ok t)
  #+end_src
** Yanking
- Kill ring has 120 entries by default
  #+begin_src emacs-lisp
    (setq kill-ring-max 1000)
  #+end_src
  |-----------------+--------+-----------------------------------------------------------------|
  | *C-y*           | *p*    | yank (most recently killed text)                                |
  |                 |        | (mark at start and point at end of next text                    |
  |                 |        | Use C-u C-SPC to switch to beginning)                           |
  | C-u C-y         |        | same as C-y but point and mark will reverse                     |
  | C-u N C-y       |        | yank Nth recent kill                                            |
  | *M-y*           | *C-n*  | yank-pop                                                        |
  |                 |        | (if you don't remember which kill ring entry is needed,         |
  |                 |        | using M-y will cycle through possibilities.                     |
  |                 |        | Each kill moves last yank pointer to new entry.                 |
  |                 |        | M-y moves last yank pointer to previous entry.                  |
  |                 |        | M-y takes numeric argument telling how many entries to advance) |
  | *M-y*           |        | When invoked after command that is not yank,                    |
  |                 |        | allow selection of previous kills                               |
  | C-h v kill-ring | *:reg* | show values in kill ring                                        |
  |-----------------+--------+-----------------------------------------------------------------|
  
** Cut and Paste
- Kill command also puts content to system clipboard deleting what's in clipboard
- We can ask emacs to first save the clipboard before killing new text
  #+begin_src emacs-lisp
    (setq save-interprogram-paste-before-kill t)
  #+end_src
- If clipboard has more recent data than the last kill command in emacs, then
    commands like C-y yanks from clipboard

** Accumulation
|-----------------------+---+-----------------------------------------------------|
| M-x append-to-buffer  |   | append a copy of region to specified buffer         |
|                       |   | (create if buffer does not exist)                   |
| M-x prepend-to-buffer |   | prepend to buffer but keep point before copied text |
| M-x copy-to-buffer    |   | overwrite buffer with copy of region                |
| M-x insert-buffer     |   | insert content of another buffer to current buffer  |
| M-x append-to-file    |   | append text directly to file                        |
|-----------------------+---+-----------------------------------------------------|

** Rectangle
- Rectangle killed is not stored in kill ring
- It is stored in last killed rectangle

  |---------------------------------+------------+-------------------------------------------------------------|
  | *C-x SPC*                       | *C-v*      | rectangle-mark-mode (start rectangle mark mode)             |
  | *C-x C-x*                       | *o*        | rectangle-exchange-point-and-mark                           |
  | *C-x r k*                       | *d*        | kill-rectangle                                              |
  | *C-x r M-w*                     | *y*        | copy-rectangle-as-kill                                      |
  | C-x r d                         | *"_d*      | delete-rectangle                                            |
  | *C-x r y*                       | *p*        | yank-rectangle                                              |
  | *C-x r o*                       |            | open-rectangle                                              |
  |                                 |            | (fill rectangle with spaces. moves text in region to right) |
  | C-x r N                         |            | rectangle-number-lines (insert line numbers on left)        |
  | *C-x r c*                       | *r SPC*    | clear rectangle (replace rectangle with spaces)             |
  | M-x delete-whitespace-rectangle |            | delete whitespace at the start if exists                    |
  | *C-x r t STRING RET*            | *r STRING* | string-rectangle                                            |
  |                                 |            | (replace rectangle with STRING on each line)                |
  |---------------------------------+------------+-------------------------------------------------------------|

* Registers
- A register can store position, text, rectangle, number, window
  config or file name one at a time
- Bookmarks records file and position in it
- Register can be a letter or number. Case matters

** Position
|---------------------------+---+---------------------------------------------|
| *M-x view-register RET R* |   | display what is in register R               |
| *M-x list-register*       |   | display non empty registers                 |
| *C-x r SPC R*             |   | point-to-register                           |
|                           |   | (save position of point and current buffer) |
| *C-x r j R*               |   | jump-to-register                            |
|                           |   | (jump to position and buffer saved in reg)  |
|---------------------------+---+---------------------------------------------|
#+begin_src emacs-lisp
  (setq register-preview-delay 2) ;; seconds before displaying preview of register list
#+end_src
** Save text
|-------------------------------+-------+-------------------------------------------------------|
| *C-x r s R*                   | *"Ry* | copy-to-register (copy region to register)            |
| *C-u C-x r s R*               | *"Rd* | move region to register                               |
| *C-x r i R*                   | *"Rp* | insert-register (insert text from register)           |
| M-x append-to-register RET R  | *"Rp* | append to register (for evil use uppercase to append) |
| M-x prepend-to-register RET R |       | prepend to register                                   |
|-------------------------------+-------+-------------------------------------------------------|
** Rectangle
|-------------+-------+----------------------------|
| *C-x r r R* | *"Ry* | copy-rectangle-to-register |
| *C-x r i R* | *"Rp* | insert-register            |
|-------------+-------+----------------------------|

** Window configs
|-------------+---------------------------------------|
| *C-x r w R* | window-configuration-to-register      |
| C-x r f R   | frameset-to-register                  |
| *C-x r j R* | restore window or frame configuration |
|-------------+---------------------------------------|
** Numbers
|---------------------+--------------------------------------------|
| *C-u NUM C-x r n R* | number-to-register                         |
| *C-u NUM C-x r + R* | increment-register (add NUM to value in R) |
| *C-x r i R*         | insert number from register into buffer    |
|---------------------+--------------------------------------------|
** File Names
|---------------------------------+----------------------------------------------------|
| (set-register R '(file . NAME)) | put a file Name into register (NAME can be a path) |
| C-x r j R                       | visit file whose name/path is in register          |
|---------------------------------+----------------------------------------------------|

** Macros
|-------------+------------------------|
| C-x C-k x R | kmacro-to-register     |
| C-x r j R   | execute keyboard macro |
|-------------+------------------------|

** Bookmarks
- “Bookmarks” are somewhat like registers in that they record
  positions you can jump to.  Unlike registers, they have long
  names, and they persist automatically from one Emacs session to
  the next.
  |--------------------------+---------------------------------------------------------------------|
  | *C-x r m RET*            | bookmark-set                                                        |
  | *C-X r m BOOKMARK <RET>* | bookmarks can be named so that you visit them with C-x r b BOOKMARK |
  | *C-x r b BOOKMARK <RET>* | bookmark-jump                                                       |
  | *C-x r l*                | list-bookmarks                                                      |
  | *M-x bookmark-save*      | Save bookmarks in default file                                      |
  |--------------------------+---------------------------------------------------------------------|

- Save bookmark to file automatically
  #+begin_src emacs-lisp
    (setq bookmark-save-flag 1)
  #+end_src

* Display
** Scrolling
- In emacs scroll up means text moves up and scroll down meands text moves down
  So PageUp is scroll down and PageDown scrolls up

  |----------------------------+-------+---------------------|
  | *C-v OR PageDown*          | *C-f* | scroll-up-command   |
  | *M-v OR PageUp OR M-- C-v* | *C-b* | scroll-down-command |
  |----------------------------+-------+---------------------|
  #+begin_src emacs-lisp
    (setq next-screen-context-lines 3) ;; number lines that overlap during scroll command
  #+end_src
** Recentering
|-------+-------+-----------------------------------------------------------------|
| *C-l* | *C-l* | recenter-top-bottom (make current line to center, top or bottom |
| C-M-l |       | reposition-window (try to best fit content                      |
|       |       | (Ex: In lisp try to dispay entire current defun in window)      |
|-------+-------+-----------------------------------------------------------------|

** Automatic scrolling
- When point moves out of visible area, scroll just enough to bring point on screen
  #+begin_src emacs-lisp
    (setq scroll-conservatively 1000)
  #+end_src

** Horizontal scrolling
- Set 'auto-hscroll-mode' to 'current-line' to only scroll current-line and not entire screen
- When point moves out of visible area, scroll just enough to bring point on screen
  #+begin_src emacs-lisp
    (setq hscroll-margin 2)
    (setq hscroll-step 2)
    (put 'scroll-left 'disabled nil)
  #+end_src
  |---------+--------------|
  | *C-x <* | scroll-left  |
  | *C-x >* | scroll-right |
  |---------+--------------|

** Narrowing
- Narrowing means focusing on some portion of buffer making rest of it temporarily inaccessible
- Opposite of narrowing is widening
  |-----------+-------------------------------------------|
  | *C-x n n* | narrow-to-region (between point and mark) |
  | *C-x n w* | widen (make whole buffer accessible)      |
  | *C-x n p* | narrow-to-page                            |
  | *C-x n d* | narrow-to-defun (also org heading)        |
  |-----------+-------------------------------------------|

- enable disabled commands
  #+begin_src emacs-lisp
    (put 'narrow-to-region 'disabled nil)
    (put 'narrow-to-page 'disabled nil)
  #+end_src

** View mode
- view mode lets you read buffers sequentially one screen at a time
- can navigate easily but not modify the buffer
- SPC to scroll forward one window, DEL to scroll backward
- s for incremental search
- q to quit
- e exit view mode
- M-x view-buffer prompts for buffer
- M-x view-file prompts for a file
  
** Text Faces
- Face specifies, font, height, weight, slant, foreground and background color, underlining or over-lining
  |----------------------------+--------------------------------------------|
  | M-x list-faces-display     | list faces current defined                 |
  | C-u M-x list-faces-display | Accept REGEX and display faces matching it |
  | frame-background-mode      | brightness of frame                        |
  |----------------------------+--------------------------------------------|
** Colors for Faces
- A color name is predefined name.
  |-------------------------+---------------------------------------------------|
  | M-x list-colors-display | list available colors                             |
  | list-colors-sort        | list colors in sorted order                       |
  | M-x set-face-foreground | change foreground and background colors of a face |
  | M-x set-face-background | for the entire frame                              |
  |-------------------------+---------------------------------------------------|

** Text scale
|--------------------------+------------------------------------------------|
| *C-x C-+ OR C-x C-=*     | text-scale-adjust (increase face by 1.2 times) |
| *C-x C--*                | text-scale-adjust (decrease)                   |
| C-x C-0                  | text-scale-adjust (reset)                      |
| *C-x C-M-+ OR C-x C-M-=* | global-text-scale-adjust                       |
| *C-x C-M--*              | increase/decrease face for entire frame        |
| *C-x C-M-0*              |                                                |
| 'text-scale-mode-step'   | change the default from 1.2 to something else  |
| 'text-scale-set'         | scale height of default face in current buffer |
|--------------------------+------------------------------------------------|
#+begin_src emacs-lisp
  (set-face-attribute 'default nil :height 120)
#+end_src
** Font Lock mode
- Font lock mode assign faces to text in current buffer based on input from major mode
  |---------------------------+-------------------------------------------|
  | M-x font-lock-mode        | toggle font lock mode in current buffer   |
  | M-x global-font-lock-mode | toggle font lock mode in all buffers      |
  | 'global-font-lock-mode'   | enable/disable font lock mode at start up |
  |---------------------------+-------------------------------------------|

- It can be enabled/disabled per major mode using hooks
  (add-hook 'c-mode-hook 'font-lock-mode)
  |---------------------------------------------+---------------------------------------------------------|
  | M-x customize-group RET font-lock-faces RET | customize the appearance of different faces             |
  |                                             | like font-lock-string-face, font-lock-comment-face etc  |
  | 'font-lock-maximum-decorations'             | Amount of fontification applied by font lock mode for a |
  |                                             | given major mode                                        |
  |                                             | t - maximum fontification                               |
  |                                             | 1 - minimum fontification                               |
  |                                             | 2 - slightly more fontification etc                     |
  | font-lock-add-keywords                      | Modify font lock behavior based on keywords             |
  | font-lock-remove-keywords                   |                                                         |
  | treesit-font-lock-level                     | 1 - fontify on comments and function names              |
  |                                             | 2 - keywords, strings, data types                       |
  |                                             | 3 - default level                                       |
  |                                             | 4 - maximum                                             |
  |---------------------------------------------+---------------------------------------------------------|
** Interactive highlighting
- Hilight change mode - Minor mode that highlights part of buffer that were changed recently
- Hi Lock mode - minor mode that highlights text matching REGEXP specified
  |-------------------------------+-------------------------------------------------|
  | M-x highlight-changes-mode    | toggle highlight changes mode                   |
  | M-x hi-lock-mode              | toggle hi lock mode for buffer                  |
  | M-x global-hi-lock-mode       | toggle hi lock mode for all buffers             |
  | *M-s h r REGEXP RET FACE RET* | highlight-regexp                                |
  |                               | highlight text that matches REGEXP using FACE   |
  |                               | use M-n or M-p to cycle through available faces |
  | *M-s h u REGEXP RET*          | unhighlight-regexp                              |
  |                               | Use M-n or M-p to cycle over available regexp   |
  | M-s h .                       | highligh-symbol-at-point                        |
  |-------------------------------+-------------------------------------------------|

- Use next face from default list for hi lock command and don't prompt a face
  #+begin_src emacs-lisp
    (setq hi-lock-auto-select-face t)
  #+end_src

** Window Fringes
- Narrow line on left and right of a window used to display symbols like line continuation,
  debugging symbols etc
  |-----------------+---------------------------|
  | M-x fringe-mode | toggle display of fringes |
  |-----------------+---------------------------|

** Display boundaries
|-----------------------------------------------+----------------------------------------------------------|
| M-x display-fill-column-indicator-mode        | display a line at column 'fill-column' position          |
| M-x global-display-fill-column-indicator-mode | enable globally                                          |
| 'display-fill-column-indicator'               |                                                          |
| 'display-fill-column-indicator-character'     | Alternate way to show indicator column                   |
| 'indicate-buffer-boundaries'                  | Mark first and last line of buffer in fringe line        |
|                                               | Also display an arrow to indicate whether it is possible |
|                                               | to scroll the window                                     |
| 'fill-column'                                 | set the fill column                                      |
|-----------------------------------------------+----------------------------------------------------------|

** Whitespace
|--------------------------------+-------------------------------------------------------------|
| 'show-trailing-whitespace'     | show trailing space in buffer                               |
| 'trailing-whitespace'          | face used to dispaly traling whitespace                     |
| M-x delete-trailing-whitespace | delete all trailing whitespace in buffer and                |
|                                | all empty lines at the end of buffer                        |
|                                | if region is active, delete in region instead               |
| 'delete-trailing-lines'        | setting it nil causes empty lines not to be deleted         |
| 'indicate-empty-lines'         | show symbol on fringe for unused lines at the end of window |
|                                | these lines are not part of the buffer                      |
| M-x whitespace-toggle-options  | toggle the kinds of whitepsace visualized                   |
|--------------------------------+-------------------------------------------------------------|

#+begin_src emacs-lisp
  (setq show-trailing-whitespace t)
  (setq-default indicate-empty-lines t) ;; show blank lines at the end of buffer
#+end_src

** Selective display
|-------------+-----------------------------------------------------------|
| C-u N C-x $ | set-selective-display                                     |
|             | hide lines in buffer which are indented N columns or more |
| C-x $       | make all lines visible                                    |
|-------------+-----------------------------------------------------------|

** Modeline
- Modeline has text of the form:
  CS:CH-FR BUF POS LINE (MAJOR MINOR)
- CS indicates character set of text in buffer. U means utf-8, -
  means no special handling for character set and = means no
  conversion which is mainly used for binary files. CS can also be
  preceded by input methods
- : indicates Unix style LF, it can also be (DOS) and (Mac)
- CH - ** indicates buffer is writable and modified, %* indicates
  read only but modified, -- if buffer is writable but not
  modified, %% if buffer is read only and not modified.
- - means default directory is local and @ means remote
- FR gives frame name only on text terminals
- BUF is buffer name displayed on window
- POS position of visible text in buffer(All, Top, Bot or NN%)
- LINE can be customized to display line and column numbers
- MAJOR MINOR show major and minor modes active for buffer
  |-----------------------------+-----------------------------------------------------------------|
  | M-x size-indication-mode    | display buffer percentage position of the form POS of SIZE      |
  | M-x line-number-mode        | display line of point                                           |
  | M-x column-number-mode      | display column number of point                                  |
  | M-x display-time-mode       | display time, system load in modeline and mail indicator        |
  | 'display-time-day-and-date' | display date in addition to time                                |
  | 'display-time-24hr-format'  | display time in 24hr format                                     |
  | M-x display-battery-mode    | show battery charge on laptops                                  |
  | 'what-cursor-show-names'    | show unicode character names in what cursor position when C-x = |
  |-----------------------------+-----------------------------------------------------------------|

  #+begin_src emacs-lisp
    (line-number-mode 1)
    (column-number-mode 1)
    (size-indication-mode 1)
    (setq what-cursor-show-names t)
  #+end_src

- display line number even for large buffers
  #+begin_src emacs-lisp
    (setq line-number-display-limit nil)
  #+end_src

*** Modeline Format
- Formatting to the right and left
  [[https://emacs.stackexchange.com/questions/5529/how-to-right-align-some-items-in-the-modeline][StackExchange]]
  #+begin_src
     (setq battery-mode-line-format "[%L %p%%%% %t]"
	   display-time-format "[%Y-%b-%d %a, %R]"
	   display-time-default-load-average nil)

       (defun simple-mode-line-render (left right)
	 "Return a string of `window-width' length containing LEFT, and RIGHT
	aligned respectively."
	 (let* ((available-width (- (window-width) (length left) 1)))
	   (format (format " %%s %%%ds " available-width) left right)))

       (setq mode-line-right-format
	     '(" "
	       mode-line-misc-info))

       (setq mode-line-left-format
		  '("%e"
		    mode-line-front-space
		    (:propertize mode-name face mode-line-highlight)
		    " (%l, %c)["
		    (:eval (number-to-string (count-lines (point-min) (point-max))))
		    "] ["
		    (:eval (if (buffer-modified-p)
			       (format "%s" "MD")
			     (format "%s" "")))
		    ":"
		    (:eval (if (eql buffer-read-only t)
			       (format "%s" "RD")
			     (format "%s" "")))
		    "]"
		    " ["
		    (:eval (let ((sys (coding-system-plist buffer-file-coding-system)))
			     (cond ((memq (plist-get sys :category) '(coding-category-undecided coding-category-utf-8))
				    (format "%s" "UTF-8"))
				   (t (upcase (symbol-name (plist-get sys :name)))))))
		    ":"
		    (:eval (pcase (coding-system-eol-type buffer-file-coding-system)
			     (0 "LF")
			     (1 "CRLF")
			     (2 "CR")))
		    ":"
		    current-input-method-title
		    "] "
		    (:propertize mode-line-buffer-identification
			     face modus-themes-intense-red
			     help-echo (buffer-file-name))
		    (:propertize vc-mode face mode-line-highlight)
		    " "
		    minor-mode-alist
		    mode-line-client
		    mode-line-remote
		    mode-line-frame-identification
		    mode-line-end-spaces))

     (setq mode-line-format
		   '(:eval (simple-mode-line-render
			    ;; left
			    (format-mode-line mode-line-left-format)
			    ;; right
			    (format-mode-line mode-line-right-format))))

  #+end_src

  #+begin_src
    (setq-default mode-line-format
		  '("%e"
		    mode-line-front-space
		    (:propertize evil-mode-line-tag face modus-themes-intense-magenta)
		    (:propertize mode-name face mode-line-highlight)
		    " (%l, %c)["
		    (:eval (number-to-string (count-lines (point-min) (point-max))))
		    "] ["
		    (:eval (if (buffer-modified-p)
			       (format "%s" "MD")
			     (format "%s" "")))
		    ":"
		    (:eval (if (eql buffer-read-only t)
			       (format "%s" "RD")
			     (format "%s" "")))
		    "]"
		    " ["
		    (:eval (let ((sys (coding-system-plist buffer-file-coding-system)))
			     (cond ((memq (plist-get sys :category) '(coding-category-undecided coding-category-utf-8))
				    (format "%s" "UTF-8"))
				   (t (upcase (symbol-name (plist-get sys :name)))))))
		    ":"
		    (:eval (pcase (coding-system-eol-type buffer-file-coding-system)
			     (0 "LF")
			     (1 "CRLF")
			     (2 "CR")))
		    ":"
		    current-input-method-title
		    "] "
		    (:propertize mode-line-buffer-identification
			     face modus-themes-intense-red
			     help-echo (buffer-file-name))
		    (:propertize vc-mode face mode-line-highlight)
		    " "
		    minor-mode-alist
		    mode-line-client
		    mode-line-remote
		    mode-line-frame-identification
		    mode-line-end-spaces
		    mode-line-misc-info))
  #+end_src
*** Minibuffer-line
#+begin_src
     (unless (package-installed-p 'minibuffer-line)
       (package-refresh-contents)
       (package-install 'minibuffer-line))

     (setq battery-mode-line-format "[%L %p%%%% %t]"
	   display-time-format "[%Y-%b-%d %a, %R]"
	   display-time-default-load-average nil)

     (defun simple-mode-line-render (left right)
       "Return a string of `window-width' length containing LEFT, and RIGHT
		aligned respectively."
       (let* ((available-width (- (window-width) (length left) 1)))
	 (format (format " %%s %%%ds " available-width) left right)))

     (setq mode-line-right-format
	   '(" "
	     mode-line-misc-info))

     (setq mode-line-left-format
	   '("%e"
	     mode-line-front-space
	     (:propertize mode-name face mode-line-highlight)
	     " (%l, %c)["
	     (:eval (number-to-string (count-lines (point-min) (point-max))))
	     "] ["
	     (:eval (if (buffer-modified-p)
			(format "%s" "MD")
		      (format "%s" "")))
	     ":"
	     (:eval (if (eql buffer-read-only t)
			(format "%s" "RD")
		      (format "%s" "")))
	     "]"
	     " ["
	     (:eval (let ((sys (coding-system-plist buffer-file-coding-system)))
		      (cond ((memq (plist-get sys :category) '(coding-category-undecided coding-category-utf-8))
			     (format "%s" "UTF-8"))
			    (t (upcase (symbol-name (plist-get sys :name)))))))
	     ":"
	     (:eval (pcase (coding-system-eol-type buffer-file-coding-system)
		      (0 "LF")
		      (1 "CRLF")
		      (2 "CR")))
	     ":"
	     current-input-method-title
	     "] "
	     (:propertize mode-line-buffer-identification
			  face modus-themes-intense-red
			  help-echo (buffer-file-name))
	     (:propertize vc-mode face mode-line-highlight)
	     " "
	     minor-mode-alist
	     mode-line-client
	     mode-line-remote
	     mode-line-frame-identification
	     mode-line-end-spaces))

     (setq minibuffer-line 'mode-line)
     (setq minibuffer-line-refresh-interval 1)

     (setq minibuffer-line-format
	   '(:eval (simple-mode-line-render
		    ;; left
		    (format-mode-line mode-line-left-format)
		    ;; right
		    (format-mode-line mode-line-right-format))))

     (setq window-divider-default-right-width 2
	   window-divider-default-bottom-width 2)

     (window-divider-mode 1)
     (minibuffer-line-mode 1)
#+end_src
*** Telephone Line
[[https://github.com/dbordak/telephone-line][telephone-line]]
#+begin_src
      (unless (package-installed-p 'telephone-line)
	(package-refresh-contents)
	(package-install 'telephone-line))
      (require 'telephone-line)
      (setq telephone-line-primary-left-separator 'telephone-line-cubed-left
	    telephone-line-secondary-left-separator 'telephone-line-cubed-hollow-left
	    telephone-line-primary-right-separator 'telephone-line-cubed-right
	    telephone-line-secondary-right-separator 'telephone-line-cubed-hollow-right
	    telephone-line-height 20
	    telephone-line-evil-use-short-tag t)
      (telephone-line-mode t)
#+end_src
*** DOOM Modeline
#+begin_src
  (use-package doom-modeline
    :ensure t
    :config
    (setq doom-modeline-support-imenu t
	  doom-modeline-height 20
	  doom-modeline-bar-width 5
	  doom-modeline-hud t    ; small graphical indicator showing position in current buffer
	  doom-modeline-window-width-limit 0.25
	  doom-modeline-project-detection 'auto
	  doom-modeline-buffer-file-name-style 'truncate-with-project
	  doom-modeline-icon nil
	  doom-modeline-unicode-fallback nil
	  doom-modeline-buffer-name t
	  doom-modeline-highlight-modified-buffer-name t
	  doom-modeline-column-zero-based t
	  doom-modeline-minor-modes t
	  doom-modeline-enable-word-count t
	  doom-modeline-buffer-encoding t
	  doom-modeline-indent-info t
	  doom-modeline-total-line-number t
	  doom-modeline-vcs-max-length 8
	  doom-modeline-lsp t
	  doom-modeline-display-misc-in-all-mode-lines t
	  doom-modeline-env-version t)
    (doom-modeline-mode 1))
#+end_src
*** Nano Modeline
#+begin_src
  (use-package nano-modeline
    :ensure t
    :config
    (add-hook 'prog-mode-hook            #'nano-modeline-prog-mode)
    (add-hook 'text-mode-hook            #'nano-modeline-text-mode)
    (add-hook 'org-mode-hook             #'nano-modeline-org-mode)
    (add-hook 'pdf-view-mode-hook        #'nano-modeline-pdf-mode)
    (add-hook 'term-mode-hook            #'nano-modeline-term-mode)
    (add-hook 'messages-buffer-mode-hook #'nano-modeline-message-mode))

#+end_src
** Cursor
|-----------------------+-----------------------------------------------|
| 'cursor-type'         | change cursor shape                           |
| 'blink-cursor-blinks' | how many times to blink before stopping blink |
|                       | 0 or negative indicates blink indefinitely    |
| 'blink-cursor-mode'   | nil will disable blinking                     |
|-----------------------+-----------------------------------------------|

#+begin_src emacs-lisp
  (setq blink-cursor-blink -1)
#+end_src

** Visual line mode and line truncation
- Visual line mode displays multiple screen lines for each long
  logical line
- Line truncation only display till what fits on screen. An arrow is
  show in fringe to indiecate truncation
  |----------------------------------+---------------------------------------------------------|
  | M-x toggle-truncate-lines        | toggle line truncation                                  |
  | 'truncate-partial-width-windows' | controls line truncation behavior in split windows      |
  | M-x visual-line-mode             | toggle visual line mode                                 |
  | M-x next-logical-line            | move by logical line instead of screen line used by C-n |
  | M-x previous-logical-line        | move by logical line instead of screen line used by C-p |
  | 'visual-line-fringe-indicators'  | display fringe indicator for wrapped lines              |
  |----------------------------------+---------------------------------------------------------|

** Customization
|-------------------------------------------+------------------------------------------------------------|
| 'display-line-numbers'                    | display line numbers in buffer                             |
|                                           | t - display absolute line number                           |
|                                           | relative - line numbers are relative to line showing point |
|                                           | visual - like relative, use screen lines                   |
| M-x display-line-numbers-mode             |                                                            |
| M-x global-display-line-line-numbers-mode | turn on or off line numbers                                |
| 'display-line-numbers-current-absolute'   | if nil, then in relative mode,                             |
|                                           | display line with point as line zero                       |
| 'visible-bell'                            | blink screen instead of bell                               |
| ''display-raw-bytes-as-hex'               | display raw bytes in hex instead of octal                  |
|-------------------------------------------+------------------------------------------------------------|

#+begin_src emacs-lisp
  (setq display-line-numbers-type t)
  (setq display-line-numbers-width t)
  (global-display-line-numbers-mode 1)
  (setq display-raw-bytes-as-hex t)
  (setq visible-bell t)
#+end_src

* Search and Replacement
** Basic Isearch
|----------------+-------+--------------------------------------------------|
| *C-s*          | */*   | isearch-forward                                  |
| *C-r*          | *?*   | isearch-backward                                 |
| *C-s* RET      |       | non incremental forward search                   |
| *C-r* RET      |       | non incremental backward search                  |
| *C-u C-SPC*    | *``*  | return to where point was before starting search |
| *C-s [C-s ..]* | *n*   | isearch-repeat-forward                           |
| *C-r [C-r...]* | *N*   | isearch-repeat-backward                          |
| *M-e*          |       | isearch-edit-string                              |
| C-f            | *C-w* | add search string characters following point     |
|----------------+-------+--------------------------------------------------|
#+begin_src emacs-lisp
  (setq search-ring-max 1000)
#+end_src
** Isearch Yanking
|-----------+-----------------------------------------------------------------|
| *C-w*     | isearch-yank-word-or-char                                       |
|           | append next character or word at point to search string         |
| C-M-w     | isearch-yank-symbol-or-char                                     |
|           | append next character or symbol at point to search string       |
|           | (check below for what is symbol)                                |
| M-s C-e   | isearch-yank-line                                               |
|           | append rest of the current line to search string                |
| C-y       | isearch-yank-kill (append current kill to search string)        |
| M-y       | isearch-yank-pop                                                |
|           | if called after C-y, replace appended text with an earlier kill |
| *M-s M-.* | isearch-forward-thing-at-point                                  |
|           | yank text at point as search string                             |
| *C-M-d*   | isearch-del-char                                                |
|           | delete last char from search string                             |
| *C-M-y*   | isearch-yank-char                                               |
|           | append char after point to search string                        |
|-----------+-----------------------------------------------------------------|

** Special input in Isearch prompt
|-----------+-------------------------------------------------------------------------|
| M-s SPC   | toggle lax space matching (see below)                                   |
| *M-s c*   | toggle case sensitivity                                                 |
| M-s '     | consider similar and equivalent characters as match                     |
|           | (like accented chars)                                                   |
| M-s i     | isearch-toggle-invisible (search invisible text (like in outline mode)) |
| *M-s r*   | isearch-toggle-regexp (toggle between regexp and non regexp)            |
| Use C-j   | to search newline in search string, enter it as C-j                     |
| *M-s o*   | isearch-occur (toggle occur mode)                                       |
| *M-%*     | isearch-query-replace                                                   |
| M-TAB     | isearch-complete (from search ring)                                     |
| *M-s h r* | isearch-highlight-regexp                                                |
|           | exit search while leaving matches highlighted                           |
| M-s h l   | isearch-highlight-lines-matching-regexp                                 |
| *M-s h u* | unhighlight-regexp                                                      |
| C-h C-h   | isearch-help-map                                                        |
| *M-e*     | isearch-edit-string (edit search string)                                |
|-----------+-------------------------------------------------------------------------|

** Not Exiting Incremental Search
|------------------------+------------------------------------------------|
| 'search-exit-option'   | append - charater not interpreted by isearch   |
|                        | are appended to search string. Helps to search |
|                        | control characters                             |
|                        | t - terminate isearch and interpret keys       |
| 'isearch-allow-scroll' | C-v, M-v, C-l etc does not exit isearch        |
|------------------------+------------------------------------------------|
#+begin_src emacs-lisp
  (setq search-exit-option t
	isearch-allow-scroll t)
#+end_src
** Word search
|---------+---------------------------------------------------------------------------|
| M-s w   | isearch-toggle-word                                                       |
|         | In word search mode, search term includes two words separated by space,   |
|         | search matches any sequence of those words with space or newline or other |
|         | punctuation chars in between                                              |
| M-s M-w | search web for text in region                                             |
|---------+---------------------------------------------------------------------------|

- Incremental and nonincremental word searches differ slightly in
  the way they find a match.  In a nonincremental word search, each
  word in the search string must exactly match a whole word.  In an
  incremental word search, the matching is more lax: while you are
  typing the search string, its first and last words need not match
  whole words.

** Symbol search
- In symbol search boundaries of search must match the boundaries of symbol
- Meaning of symbol depends on the major mode
- In Lisp Mode, symbol 'forward-word' does not match 'isearch-forward-word'
- Good for source code search
  |---------+--------------------------------------------------------------|
  | M-s _   | isearch-toggle-symbol (toggle symbol search mode in isearch) |
  | *M-s .* | start symbol search with symbol near                         |
  |---------+--------------------------------------------------------------|

** Regexp search
- regexp and noregexp searches have separate search rings
- regexp does not use lax matching by default
  |---------+-------------------------|
  | *C-M-s* | isearch-forward-regexp  |
  | *C-M-r* | isearch-backward-regexp |
  |---------+-------------------------|
  #+begin_src emacs-lisp
    ;;  (global-set-key (kbd "C-s") 'isearch-forward-regexp)
    ;;  (global-set-key (kbd "C-r") 'isearch-backward-regexp)
    ;;  (global-set-key (kbd "M-%") 'query-replace-regexp)
    (setq regexp-search-ring-max 1000
	  search-default-mode t) ;; default regex search
  #+end_src

** Regexp syntax
[[info:emacs#Regexps][info:emacs#Regexps]]

** Lax matching
- in lax space match, space or sequence of space in search match one
  or more whitespace in text
- by default case is ignored if search string is in lower case
- presence of upper case in search string makes it case sensitive
- we can also configure 'char-fold-symmetric' to treat accented chars
  match its base char

** Replacement
- replacement commands operate on text from point till end of buffer
- if region is active, operate on region
- they don't default for lax match like in search
  |-------------------------------------------------+-------------------------+------------------------------------------------------------------|
  | M-x replace-string RET STRING RET NEWSTRING RET | *:s/STRING/NEWSRING/gc* | replace every instance of STRING with NEWSTRING after point      |
  |                                                 |                         | goto beginnging if you want to replace in entire buffer          |
  |                                                 |                         | leaves point at last replacement and mark at position prior      |
  |                                                 |                         | to starting replacement. Use C-u C-SPC to move back              |
  | M-x replace-regexp RET STRING RET NEWSTRING RET |                         | NEWSTRING can refer to all or part of what is matched by regexp  |
  |                                                 |                         | \& stands for entire match                                       |
  |                                                 |                         | \D where D is a digit, matches Dth paranthesized group           |
  | *M-% STRING RET NEWSTRING RET*                  |                         | query-replace                                                    |
  |                                                 |                         | only replace some occurence and not all                          |
  |                                                 |                         | prompt before each replacement                                   |
  | *C-M-% REGEXP RET NEWSTRING RET*                |                         | query-replace-regexp                                             |
  | y                                               |                         | replace with newstring                                           |
  | n                                               |                         | skip to next, don't replace current one                          |
  | q                                               |                         | quit - no more replacement                                       |
  | '!'                                             |                         | replace all remaining occurence without asking                   |
  | u                                               |                         | undo last replacement and move point to that position            |
  | U                                               |                         | undo all replacements and go to where first replacement was done |
  | Y                                               |                         | replace all remaining occurence in all remaining buffer          |
  | N                                               |                         | skip to newxt buffer with no other replacement in current buffer |
  | ? or C-h                                        |                         | display help                                                     |
  |-------------------------------------------------+-------------------------+------------------------------------------------------------------|

** Other search and loop commands
|---------------------------------------------+----------------------------------------------------------------------------------------|
| *M-x occur OR M-s o*                        | occur mode                                                                             |
|                                             | prompt for a regexp and display a list showing each matching line in a separate buffer |
|                                             | In *Occur* buffer an entry can be clicked or type RET to visit corresponding           |
|                                             | position in buffer.                                                                    |
|                                             | C-c C-f enables next-error-follow mode where cursor motion causes                      |
|                                             | automatic display to corresponding source location                                     |
|                                             | o or C-o to navigate to corresponding line in original buffer                          |
|                                             | typing e allows to edit in occur buffer which also applied to text in original buffer  |
|                                             | C-c C-c to return to occur mode                                                        |
| *M-x multi-occur*                           | same as occur but able to search in multiple buffers                                   |
| *M-x multi-occur-in-matching-buffers*       | same as multi-occur but buffer are specified using regexp                              |
| M-x how-many                                | display the number of matches                                                          |
| *M-x flush-lines*                           | delete each line matching regexp which is prompted                                     |
| *M-x keep-lines*                            | delete each line not matching regexp which is prompted                                 |
| *M-x kill-matching-lines*                   | like flush-lines but adds to kill ring as a single entry                               |
| *M-x copy-matching-lines*                   | like kill-matching-lines but not removed from buffer                                   |
| *M-x multi-isearch-buffers-regexp*          | prompt for buffer names and begin multi buffer search                                  |
| *M-x multi-isearch-files-regexp*            | prompt for file names and begin multi file search                                      |
| 'list-matching-lines-default-context-lines' | default number of context lines to show                                                |
|---------------------------------------------+----------------------------------------------------------------------------------------|

** Customizing
|--------------------+-------------------------------------------------------|
| isearch-lazy-count | show current match number and total number of matches |
|--------------------+-------------------------------------------------------|
#+begin_src emacs-lisp
  (setq isearch-lazy-count t)
#+end_src

* Typos
** Undo
|-----------------------+-------+--------------------------------------------------------------------|
| *C-/ OR C-x u OR C-_* | *u*   | undo                                                               |
|                       |       | separate undo records for each buffer                              |
|                       |       | consecutive char insertion are grouped in a single undo record     |
|                       |       | the stars in modeline indicate changes since last save.            |
|                       |       | when stars disappear, it means buffer contents are same as in file |
|                       |       | with active region, undo changes in that region                    |
| *C-g C-/*             | *C-r* | redo                                                               |
| *M-x revert-buffer*   | *e!*  | discard all changes since buffer was last visited or saved         |
|-----------------------+-------+--------------------------------------------------------------------|

** Transpose
|----------------------------+-------+-----------------------------------------------------------|
| *C-t*                      |       | transpose-chars (transpose chars on either side of point) |
| *M-t*                      |       | transpose-words (transpose words before and after point)  |
| *C-M-t*                    |       | transpose-sexps                                           |
| *C-x C-t*                  | *ddp* | transpose-lines                                           |
| *M-x transpose-sentences*  |       |                                                           |
| *M-x transpose-paragraphs* |       |                                                           |
|----------------------------+-------+-----------------------------------------------------------|

** Case conversion
|---------+-------+-------------------------------|
| *M-l*   | *guw* | downcase-word                 |
| *m-u*   | *gUw* | upcase-word                   |
| *M-c*   |       | capitalize-word               |
| M-- M-l | *gub* | downcase-word previous word   |
| M-- M-u | *gUb* | upcase-word previous word     |
| M-- M-c |       | capitalize-word previous word |
|---------+-------+-------------------------------|
#+begin_src emacs-lisp
  (global-set-key (kbd "M-l") 'downcase-dwim)
  (global-set-key (kbd "M-u") 'upcase-dwim)
  (global-set-key (kbd "M-c") 'capitalize-dwim)
#+end_src

** Spelling

|------------------------+------+--------------------------------------------------------|
| *M-$*                  | *z=* | ispell-word(spell check word at point or before point) |
|                        |      | if region is active, check all word in region          |
| M-x ispell-buffer      |      | spell check in buffer                                  |
| M-x ispell-region      |      | spell check in region                                  |
| M-x ispell             |      | spell check buffer or region                           |
| *C-M-i*                |      | ipell-complete-word                                    |
| M-x ispell-message     |      | check and correct spelling in draft mail message       |
| M-x flyspell-mode      |      | highlight spelling mistakes                            |
| M-x flyspell-prog-mode |      | spelling mistakes for comment and string in programs   |
| *C-;*                  |      | flyspell-auto-correct-previous-word                    |
| *C-.*                  |      | flyspell-auto-correct-word                             |
| *C-c $*                |      | flyspell-correct-word-before-point                     |
|                        |      | display a popup of possible corrections                |
| *C-,*                  |      | flyspell-goto-next-error                               |
|                        |      | goto previous error with prefix                        |
|------------------------+------+--------------------------------------------------------|

- enable automatic spell check in text mode
- enable automatic spell check for comments and string constants in prog mode
  #+begin_src emacs-lisp
    (add-hook 'text-mode-hook 'flyspell-mode)
    (add-hook 'prog-mode-hook 'flyspell-prog-mode)
    (setq ispell-personal-dictionary (expand-file-name "dictionary" user-emacs-directory))
  #+end_src

- When incorrect word is encountered during above commands, a Choices
  buffer pops up at top with numbered words. Valid responses are as
  below:
  |-------------+------+----------------------------------------------------------------------------------------|
  | *DIGIT*     |      | replace word with one in Choices buffer which is listed against given number           |
  | *SPC*       |      | skip current word and leave it incorrect                                               |
  | *r NEW RET* |      | replace word with NEW                                                                  |
  | *R NEW RET* |      | replace word with NEW and do query-replace in other places in buffer                   |
  | a           |      | accept incorrect word for current session                                              |
  | A           |      | accept incorrect word for current buffer in current session                            |
  | *i*         | *zg* | insert the word in personal dictionary, so that it is treated as correct going forward |
  | *u*         |      | insert lower case version of word in dictionary                                        |
  | *C-g*       |      | quit spell check and leave point at word being checked                                 |
  | *x*         |      | quit spell check and leave point where it was before starting spell check              |
  | *q*         |      | quit interactive spell checked and kill spell checker sub-process                      |
  |-------------+------+----------------------------------------------------------------------------------------|

* Keyboard Macros
** Basic use
- Macro can help repeat same keystrokes by recording and repeating it
  |-----------------------------+------+--------------------------------------------------------------------|
  | *F3* or *C-x (*             | *qq* | kmacro-start-macro-or-insert-counter                               |
  | *F4* or *C-x )*             | *q*  | kmacro-end-or-call-macro                                           |
  | *F4* or *C-x e*             | *@q* | if macro is being defined, end it else execute it                  |
  |                             |      | pass a prefix to execute that many times                           |
  |                             |      | prefix of zero executes indefinitely and has to be broken with C-g |
  | C-u F3 or C-u C-x (         | *@@* | re-execute last keyboard macro then append the same keys to macro  |
  | C-u C-u F3 or C-u C-u C-x ( | *qQ* | append keys to last macro without re executing it                  |
  | *C-x C-k r*                 | *qq* | apply-macro-to-region-lines                                        |
  |                             |      | run last keyboard macro on each line in region                     |
  |                             |      | moves point to beginning of each line                              |
  |-----------------------------+------+--------------------------------------------------------------------|

** Keyboard macro ring
- all buffers share same keyboard macro ring
- Below commands use C-x C-k as prefix and can be executed and repeated without prefix
  Ex: C-x C-k C-k C-p C-k
  |---------------+--------+------------------------------------------------------|
  | C-x C-k C-k   | *:reg* | kmacro-end-or-call-macro-repeat (like F4)            |
  |               |        | execute macro at the head of the ring (latest macro) |
  | *C-x C-k C-n* |        | kmacro-cycle-ring-next                               |
  | *C-x C-k C-p* |        | kmacro-cycle-ring-previous                           |
  |               |        | bring next or previous macro to the head of the ring |
  |               |        | echo area will display the definition of new head    |
  |---------------+--------+------------------------------------------------------|
  #+begin_src emacs-lisp
    (setq kmacro-ring-max 1000)
  #+end_src

** Keyboard macro counter
- each keyboard macro has a counter which is set to zero when defined
- this counter itself can be used to insert in the buffer (say insert
  0 to 100 using a macro)
  |---------------+-------------------------------------------------------------|
  | *F3*          | kmacro-start-macro-or-insert-counter                        |
  |               | in a macro definition, insert value of counter in buffer    |
  | *C-x C-k C-i* | kmacro-insert-counter                                       |
  |               | insert current value of counter for last macro in buffer    |
  | *C-x C-k C-c* | kmacro-set-counter (set keyboard macro counter)             |
  | *C-x C-k C-a* | kmacro-add-counter (add the prefix arg to the macro counter |
  | *C-x C-k C-f* | kmacro-set-format (default %d)                              |
  |---------------+-------------------------------------------------------------|

  For ex: "F3 C-x C-k C-i RET F4" will insert next
  sequence of numbers on each line like 1, 2, 3 etc

** Variations
|----------+-----------------------------------------------------------------------|
| C-x q    | kbd-macro-query (this key binding is entered during macro definition) |
|          | stop macro execution at this point and ask for confirmation           |
| SPC or y | continue executing macro                                              |
| DEL or n | skip current iteration and start with next iteration                  |
| RET or q | skip current iteration and cancel further iteration                   |
| C-r      | enter recursive editing. Use C-M-c to return to macro execution       |
|----------+-----------------------------------------------------------------------|

** Naming and saving
|----------------------+---------------------------------------------------------------|
| C-x C-k n            | kmacro-name-last-macro (for current session)                  |
|                      | this will create a lisp command that can be executed with M-x |
| C-x C-k b            | kmacro-bind-to-key (prompts for key to bind to)               |
|                      | C-x C-k 0 to 9 and C-x C-k A to Z are reserved for users      |
| M-x insert-kbd-macro | insert macro definition in current buffer as lisp code        |
|----------------------+---------------------------------------------------------------|
[[https://tuhdo.github.io/emacs-tutor.html#orgheadline70][Emacs Mini Manual]]
#+begin_src emacs-lisp
  (if (file-exists-p (expand-file-name "macros" user-emacs-directory))
      (load-file (expand-file-name "macros" user-emacs-directory)))
#+end_src

** Editing Macro
|--------------------+-------------------------------------------------------------|
| C-x C-k C-e        | kmacro-edit-macro                                           |
| C-x C-k e NAME RET | edit-kbd-macro (edit a named macro)                         |
| C-x C-k l          | kmacro-edit-lossage (edit last 300 keystrokes as macro)     |
|                    | interactively execute and edit macro                        |
| C-x C-k SPC        | kmacro-step-edit-macro                                      |
| SPC or y           | execute highlighted command                                 |
| DEL or n           | skip and delete highlighted command                         |
| f                  | skip command for this execution but don't delete from macro |
| TAB                | execute current command and all similar commands like       |
|                    | self insert                                                 |
| c                  | continue execution without further editing                  |
|                    | replaces original macro with edited one                     |
| q or C-g           | cancel step editing and discard all changes                 |
| i KEY...           | read and execute a sequence of keys and                     |
|                    | insert before current commands. terminate by C-j            |
| r KEY...           | same as i KEY... but replaces current command               |
| a KEY...           | same as i KEY... but inserts after current command          |
| C-c C-c            | save and exit editing                                       |
|--------------------+-------------------------------------------------------------|

* File handling
** File Names
- When a file is visited, emacs sets 'default-directory' to the directory of the file
- Any file name entered  will use the default-directory of active buffer
  |-----------+--------+----------------------------|
  | *M-x pwd* | *:pwd* | show 'default-directory'   |
  | *M-x cd*  | *:cd*  | change 'default-directory' |
  |-----------+--------+----------------------------|

  - A double slash in minibuffer ignores everything before second slash
  - Similarly any path text before ~ is ignored  
  - $ in path expands corresponding environment variable
  - Literal $ can be inserted by doubling it like $$ or by quoting it

** Visiting file
- shell wild-card is allowed for file name
- visiting directory invokes Dired
  |-------------------------+------------------------------------------------------------------------------|
  | *C-x C-f*               | find-file (visit file)                                                       |
  | *C-x C-r*               | find-file-read-only                                                          |
  | C-x C-q                 | make buffer writable                                                         |
  | *C-x C-v*               | find-alternate-file                                                          |
  |                         | same as C-x C-f but kills current buffer                                     |
  | *C-x 4 f*               | find-file-other-windows (open in another window)                             |
  | C-x 5 f                 | fine-file-other-frame (open in another frame)                                |
  | M-x find-file-literally | turn off automatic scanning of character encoding and end of line convention |
  |-------------------------+------------------------------------------------------------------------------|

** Saving file
|---------------------------+---------------------------------------------------------------------|
| *C-x C-s*                 | save-buffer                                                         |
| *C-x s*                   | save-some-buffers (prompt for each buffer)                          |
| *C-x C-w*                 | write-file (save as)                                                |
| *M-~*                     | not-modified (mark not modified so that emacs won't prompt to save) |
| M-x set-visited-file-name | marks buffer as visiting new file name and changes buffer name      |
|                           | does not save buffer in new file name                               |
|                           | C-x C-w is better option if you want to rename and save             |
| M-x write-region          | to save buffer to new file but not visit the file                   |
| 'require-final-newline'   | t        - put newline at the end if it is not there                |
|                           | visit    - put newline at the end of file when you visit it         |
|                           | visit-save - put newline both on visiting and saving                |
|                           | nil      - don't change end of file                                 |
|---------------------------+---------------------------------------------------------------------|

** Backup file
- Emacs makes a backup for a file first time it is saved
- If a buffer is killed and visit file again, saving will create a backup again

  |-----------------------------------+-------------------------------------------------------------------------------|
  | 'make-backup-files'               | determines if emacs should backup file                                        |
  | 'vc-make-backup-files'            | if file is managed by version control, determines if emacs should backup file |
  | 'backup-enable-predicate'         | exclude files in some temporary directories from being backed up              |
  | 'temporary-file-directory'        |                                                                               |
  | 'small-temporary-file-directory'  | don't backup from directories in this variable                                |
  | 'backup-directory-alist'          | location of backup files based on file name regexp                            |
  | 'version-control'                 | nil - if already has numbered backup, then continue                           |
  |                                   | t   - make numbered backup                                                    |
  |                                   | never- always make single backup                                              |
  | 'kept-old-versions'               |                                                                               |
  | 'kept-new-versions'               | number of oldest and newest backups to keep                                   |
  |                                   | anything in between are deleted every time a backup is made                   |
  | 'delete-old-version'              | delete excess backup files silently instead of prompting                      |
  | 'backup-by-copying'               | use copying instead of renaming while making backup                           |
  | 'backup-by-copying-when-linked'   | use copying if there are links                                                |
  | 'backup-by-copying-when-mismatch' | use copying if renaming will change file owner and group                      |
  |-----------------------------------+-------------------------------------------------------------------------------|

- backup file names have ~ appended to it
- numbered backup will be named like .~NUMBER~

  #+begin_src emacs-lisp
    (setq make-backup-files nil)
    (setq backup-directory-alist `(("." . ,(expand-file-name "backups/" user-emacs-directory))))
  #+end_src

** Interlocking
- When a first modification is made in emacs buffer that is visiting a
  file, a link is created in same directory to prevent another person
  editing it. This is deleted when file is saved.
- By default link name will be file name prepended with .#
- If file has multiple names via hard-links, Emacs cannot prevent
  simultaneous editing
  |----------------------------------+------------------------------------------|
  | 'create-lockfiles'               | setting to nil stops creating lock files |
  |                                  | when there is collision                  |
  | s                                | steal the lock                           |
  | p                                | proceed - go ahead and edit the file     |
  | q                                | quit                                     |
  | M-x diff-buffer-with-file        | compare buffer to its file               |
  | 'remote-file-name-inhibit-locks' | don't create lock files for remote files |
  |----------------------------------+------------------------------------------|

** Shadowing
- identical shadow copies of file can be kept in multiple places
- A shadow file group is a set of identically named files in different location
- When exiting emacs, the file will be copied to other files in its group (shadow-copy-files)
- shadow cluster is at a host level
  
** Time stamp
- emacs can put time stamp in a file if following line is present in
  first 8 lines of file Time-stamp: <> OR Time-stamp: ""
- Then add function time-stamp to hook 'before-save-hook. You can also
  call it manually M-x time-stamp

** Reverting buffer
|---------------------------------------+----------------------------------------------------------------------------------------|
| *M-x revert-buffer*                   | revert all changes in buffer and go back to the saved version of file                  |
|                                       | reverting creates single entry in undo history which can be used to bring changes back |
| *C-x x g*                             | revert-buffer-quick                                                                    |
|                                       | like revert-buffer but asks less confirmation                                          |
| M-x auto-revert-mode                  | keep buffer updated with file (useful for log files that keep appending)               |
| M-x global-auto-revert-mode           | enable globally                                                                        |
|                                       | if buffer has been modified, it will not revert                                        |
|                                       | moving a point to end of buffer keeps point there (like tail)                          |
| *M-x auto-revert-tail-mode*           | like tail command (also works for remote files)                                        |
| 'auto-revert-verbose'                 | disable message when buffer is auto reverted                                           |
| 'auto-revert-remote-files'            | enable auto revert mode for remote files as well                                       |
| 'global-auto-revert-non-file-buffers' | auto revert non-file buffers also                                                      |
|---------------------------------------+---------------------------------------------------------------------------------------- |

#+begin_src emacs-lisp
  (setq auto-revert-verbose nil ;; don't flash echo area message
	global-auto-revert-non-file-buffers nil ;; disable auto revert for dired buffers etc
	auto-revert-remote-files nil)
  (global-auto-revert-mode nil)
#+end_src

** Auto save
- emacs automatically saves each visited file in a separate file to
  avoid losing change during crash
- auto save file name is made by appending # to front and rare of
  actual file name
- non-files are not automatically saved. if manually saved, then file
  name is made using buffer name
- remote auto save files will be put in temp directory in local
- auto save file is deleted when file is saved
- Emacs auto saves during fatal error like network disconnect or when killed

  |------------------------------------+---------------------------------------------------------------------|
  | 'auto-save-file-name-transform'    | helps control auto save file name                                   |
  | auto-save-visited-mode             | auto saves in the visited file itself                               |
  | 'auto-save-default'                | disable auto save                                                   |
  | M-x do-auto-save                   | auto save manually                                                  |
  | M-x recover-file RET FILE RET      | visit file FILE and restores its contents from auto save file       |
  |                                    | the auto save file must be latest than actual file                  |
  |                                    | file must be explicitly saved with C-x C-s                          |
  | M-x recover-session                | If Emacs or computer crashes, all files can be recovered from their |
  |                                    | autosave files using this command                                   |
  |                                    | show list of sessions. select right session on C-c C-c              |
  |                                    | each file edited during the session is shown and asked for recovery |
  |                                    | the file should be saved manually after recovery                    |
  |                                    | interrupted session are saved in .saves* files under auto-save-list |
  |                                    | directory                                                           |
  | 'auto-save-list-file-prefix        | directory to save auto save sessions                                |
  | delete-auto-save-files             | delete auto-save files when buffer is saved                         |
  | kill-buffer-delete-auto-save-files | killing a buffer prompts to delete auto-save file                   |
  | M-x auto-save-mode                 | toggle auto-saving in current buffer                                |
  |------------------------------------+---------------------------------------------------------------------|

  #+begin_src emacs-lisp
    (make-directory (expand-file-name "autosave/" user-emacs-directory) t)
    (setq auto-save-list-file-prefix (expand-file-name "autosave/sessions/" user-emacs-directory)
	  auto-save-file-name-transforms `((".*" ,(expand-file-name "autosave/" user-emacs-directory) t)))
    (setq delete-auto-save-files t
	  kill-buffer-delete-auto-save-files t)
  #+end_src

** File name alias
|-----------------------------------------+-------------------------------------------------------------------|
| 'find-file-suppress-same-file-warnings' | suppress warning if file being visited is link to a file already  |
|                                         | open in emacs                                                     |
| 'find-file-existing-other-name'         | visiting same file under a different name creates separate buffer |
|-----------------------------------------+-------------------------------------------------------------------|

** Directories
|-----------------------------------+----------+------------------------------------------------------|
| *C-x d*                           | *:e DIR* | dired                                                |
| C-x C-d DIR-OR-PATTERN RET        |          | list-directory (list brief directory listing)        |
| C-u C-x C-d DIR-OR-PATTERN RET    |          | verbose directory listing                            |
| M-x make-directory RET NAME RET   |          | create new directory                                 |
| M-x delete-directory RET NAME RET |          | delete directory. prompt if needs recursive deletion |
| 'list-directory-brief-switches'   |          | string giving switches to use in brief listing       |
| 'list-directory-verbose-switches' |          | string giving switches to use in verbose listing     |
| 'delete-by-moving-to-trash'       |          | move to trash if system supports it                  |
|-----------------------------------+----------+------------------------------------------------------|

#+begin_src emacs-lisp
  (setq delete-by-moving-to-trash t)
#+end_src

** Compare files
|-----------------------------+-----------------------------------------------------|
| *M-x diff*                  | prompt two file names and display diff in Diff mode |
| 'diff-switches'             | switches passed to diff program (-u by default)     |
| M-x ediff                   | more sophisticated alternative                      |
| *M-x diff-backup*           | compare file with its recent backup                 |
| *M-x diff-buffer-with-file* | compare buffer with its file                        |
| *M-x diff-buffers*          | compare two buffers                                 |
| M-x compare-windows         | compare current window with one previously selected |
|-----------------------------+-----------------------------------------------------|

** Diff mode
- Major mode for output of M-x diff and similar command
- Can be started manually with M-x diff-mode
- Editing patch in diff mode tries to maintain line number so the patch is still valid
  |-------------------------------------+------------------------------------------------------------|
  | 'diff-update-on-the-fly'            | disable automatic line number correction                   |
  | *M-n*                               | diff-hunk-next                                             |
  | *M-p*                               | diff-hunk-prev                                             |
  | M-k                                 | diff-hunk-kill                                             |
  | *C-c C-a*                           | diff-apply-hunk (apply hunk to target file)                |
  |                                     | with prefix, revert hunk                                   |
  | *C-c C-c*                           | diff-goto-source (goes to new version)                     |
  |                                     | use prefix to go to old version                            |
  | C-c C-e                             | start ediff session                                        |
  | C-c C-n                             | diff-restrict-view (narrow to current hunk)                |
  | *C-c C-r*                           | diff-reverse-direction (create patch to change new to old) |
  | C-c C-w                             | diff-ignore-whitespace-hunk                                |
  | C-c C-s                             | diff-split-hunk (split hunk at point)                      |
  | C-c C-u                             | diff-context->unified (convert to unified)                 |
  | C-c C-d                             | diff-unified->context (convert to context)                 |
  | C-c C-l                             | diff-refresh-hunk (regenerate current hunk)                |
  | M-x diff-delete-trailing-whitespace | delete trailing whitespace from patch and patched source   |
  |-------------------------------------+------------------------------------------------------------|

** Copy and Move
- if NEW file already exists, all below commands ask for confirmation
  |----------------------------+------------------------------------------------------------------|
  | M-x copy-file              | copies file                                                      |
  | M-x copy-directory         | like cp -r (if NEW is directory copy OLD into NEW                |
  |                            | else copy contents of OLD to NEW)                                |
  | M-x rename-file            | rename OLD as NEW. If NEW exists, get confirmation               |
  | M-x vc-rename-file         | If file is under version control, should be renamed using this   |
  | M-x add-name-to-file       | create a hard link                                               |
  | M-x make-symbolic-link     | create a symbolic link                                           |
  | M-x delete-file            | delete file                                                      |
  | M-x move-file-to-trash     | moves to trash instead of deleting                               |
  | M-x vc-delete-file         | If file is under version control, should be deleted using this   |
  | *M-x insert-file OR C-x i* | insert a contents of specified file into current buffer at point |
  | M-x insert-file-literally  | like insert-file but encoding or conversion                      |
  | *M-x write-region*         | copy contents of region to specified file                        |
  | *M-x append-to-file*       | append contents of region to specified file                      |
  | M-x set-file-modes         | set permission                                                   |
  |----------------------------+------------------------------------------------------------------|

** Compressed files
- Emacs automatically decompresses archives when you visit them and
  re-compresses if you alter and save
- supports .tar, .tgz, .tar.gz, .tar.Z using Tar mode
- tar is read natively in emacs
- Archive mode is used for other types of archives like zip, rar, 7z etc
- Archive mode requires separate decompression program

  |-------------------------+------------------------------------------------------------------|
  | 'auto-compression-mode' | disable auto compress and decompress                             |
  | e                       | extract component file to its own buffer                         |
  |                         | if you edit and save, edited version will replace version in tar |
  | v                       | extract in view mode                                             |
  | I                       | add a new empty file to archive (can be edited using e)          |
  | d                       | mark file for deletion when x is pressed                         |
  | u                       | unmark a file                                                    |
  | c                       | copy file from archive to disk                                   |
  | R                       | rename a file in archive                                         |
  | g                       | revert buffer from archive                                       |
  | m                       | mark file (archive mode only)                                    |
  | M-DEL                   | unmark all makred files (archive mode only)                      |
  | a                       | toggle detailed file info (archive mode only)                    |
  |-------------------------+------------------------------------------------------------------|

** Remote files
- Remote files can be accessed using one of the 3 syntax
  - /METHOD:HOST:FILENAME
  - /METHOD:USER@HOST:FILENAME
  - /METHOD:USER@HOST#PORT:FILENAME
  - /METHOD:HOST|sudo::FILENAME
- Tramp handles all methods except FTP which is handled by Ange-FTP
- auto save files will be created in temp directory in local
- for anonymous ftp, use the user name anonymous
  #+begin_src emacs-lisp
    (require 'tramp)
    (add-to-list 'tramp-remote-path 'tramp-own-remote-path)
  #+end_src

** File Name Cache
- Type C-Tab in mini-buffer to complete file name from cache
- The cache is not persistent and maintained only for current session
  |----------------------------------------------------+-----------------------------------------------|
  | M-x file-cache-add-directory RET DIRECTORY RET     | Add each file in directory to file name cache |
  | M-x file-cache-add-directory-using-fin RET DIR RET | Add each file in directory and all its nested |
  |                                                    | sub-directories to file name cache            |
  | M-x file-cache-clear-cache RET                     | Clear the cache                               |
  | M-x file-cache-display                             | view contents of file cache                   |
  |----------------------------------------------------+-----------------------------------------------|
** Recentf
- Emacs maintains a list of recently opened files if recentf-mode is enabled
  |------------------+-----------------------------|
  | M-x recentf-open | Open file from recentf-list |
  |------------------+-----------------------------|
  #+begin_src emacs-lisp
  (require 'recentf)
  (recentf-mode 1)			; keybinding in keybindings section toward the end
  #+end_src

** Image files
- Opening image selects Image Mode
  |-----------+-----------------------------------------------------------------|
  | *C-c C-c* | image-toggle-display (toggle between showing image and rawbytes |
  | C-c C-x   | image-toggle-hex-display (toggle between image and hex display) |
  | *s h*     | image-transform-fit-to-height                                   |
  | *s i*     | image-transform-fit-to-width                                    |
  | *s b*     | image-transform-fit-both (fit to both window height and width)  |
  | s s       | image-transform-set-scale (scale image with a factor)           |
  | *s o*     | image-transform-reset-to-original (reset all scaling)           |
  | *s r*     | image-transform-set-rotation                                    |
  | *s p*     | image-transform-set-percent                                     |
  | *n*       | image-next-file                                                 |
  | *p*       | image-previous-file                                             |
  | *m*       | image-mode-mark-file                                            |
  | *u*       | image-mode-unmark-file                                          |
  | *w*       | image-mode-copy-file-name-as-kill                               |
  | RET       | image-toggle-animation                                          |
  | f         | image-next-frame                                                |
  | b         | image-previous-frame                                            |
  | i + +...  | image-increase-size                                             |
  | i - -...  | image-decrease-size                                             |
  | i v       | image-flip-vertically                                           |
  | i h       | image-flip-horizontally                                         |
  | i r r...  | image-rotate                                                    |
  |-----------+-----------------------------------------------------------------|

* Buffers
- Buffer is an object used to hold visited file's text, Dired buffer
  listings or email message etc
- Buffers are deleted when they are killed or when emacs exits
- Buffer name is displayed in mode line and case matters
- At any time only one buffer is selected which is called current
  buffer

** Create and Select buffers
|----------------------+-------------+--------------------------------------------|
| *C-x b BUFFER RET*   | *:b BUFFER* | switch-to-buffer (create or select buffer) |
| *C-x 4 b BUFFER RET* |             | switch-to-buffer-other-window              |
| C-x 5 b BUFFER RET   |             | switch-to-buffer-other-frame               |
|----------------------+-------------+--------------------------------------------|
- Buffer names that start with space are used by Emacs internally
** List buffers
|-----------+------------+----------------------------------------------------------|
| *C-x C-b* | *:buffers* | list-buffers                                             |
|           |            | show list of existing buffers in a new buffer call       |
|           |            | Buffer List                                              |
|           |            | most recent buffer is shown at top                       |
|           |            | With prefix, only show file visiting buffers             |
| .         |            | current buffer                                           |
| %         |            | read only buffer                                         |
| '*'       |            | modified                                                 |
| d         |            | Buffer-menu-delete (flag buffer for deletion and go to   |
|           |            | next buffer)                                             |
| C-d       |            | Buffer-menu-delete-backwards                             |
| s         |            | Buffer-menu-save (set save flag)                         |
| x         |            | Buffer-menu-execute (perform flagged deletion and saves) |
| u         |            | Buffer-menu-unmark                                       |
| U         |            | Buffer-menu-unmark-all                                   |
| g         |            | revert-buffer                                            |
| q         |            | quit-window                                              |
| o         |            | Buffer-menu-other-window (open buffer at point in other  |
|           |            | window) and make it visible                              |
| C-o       |            | Buffer-menu-switch-other-window (same as o but don't     |
|           |            | select it)                                               |
| f or RET  |            | Buffer-menu-this-window                                  |
| 1         |            | Buffer-menu-1-window (open in full frame window)         |
| 2         |            | Buffer-menu-2-window (open in other window)              |
| m         |            | Buffer-menu-mark (mark for viewing)                      |
| v         |            | Buffer-menu-select (like 1. If there are marked buffers  |
|           |            | then open them in other window)                          |
| T         |            | Buffer-menu-toggle-files-only                            |
| S         |            | tabulated-list-sort                                      |
|           |            | Sort entries by column at point                          |
|-----------+------------+----------------------------------------------------------|

** Other options
|----------------------------------+---------------------------------------------|
| *C-x C-q*                        | read-only-mode (toggle)                     |
| *C-x x r*                        | rename-buffer                               |
| *C-x x i*                        | insert-buffer (insert contents of buffer    |
|                                  | after point)                                |
| *C-x x g*                        | revert-buffer-quick                         |
| *C-x x n*                        | clone-buffer                                |
| *C-x x u*                        | rename-uniquely                             |
| M-x rename-buffer RET BUFFER RET | change buffer's name                        |
| M-x rename-uniquely              | rename current buffer by adding a number at |
|                                  | the end                                     |
| M-x view-buffer RET BUFFER RET   | scroll through buffer using view mode       |
| M-x append-to-buffer             |                                             |
|----------------------------------+---------------------------------------------|
** Killing buffers
|---------------------------+-------+----------------------------------------------------|
| *C-x k BUFFER RET*        | *:bd* | kill-buffer                                        |
| M-x kill-some-buffers     |       | offer to kill each buffers one by one              |
| M-x kill-matching-buffers |       | offer to kill all buffers matching regexp          |
| *M-x clean-buffer-list*   |       | kill all unmodified buffers not used for some time |
|---------------------------+-------+----------------------------------------------------|

** Operating on Several Buffers
|------------------------------+-------------------------------------------------|
| M-x buffer-menu              | edit buffer listing all Emacs buffers           |
| M-x buffer-menu-other-window | same as buffer-menu but opens in another window |
|------------------------------+-------------------------------------------------|
- Buffer Menu is opened by C-x C-b
  
** Unique names
|---------------------------------------+---------------------------------------------|
| 'uniquify-buffer-name-style'          | tells how buffer should be named when files |
|                                       | with same name in differ path are opened    |
| forward                               | bar/mumble/name    quux/mumble/name         |
| reverse                               | name\mumble\bar    name\mumble\quux         |
| post-forward                          | name\vertbar/mumble name\vertquux/mumble    |
| post-forward-angle-brackets (default) | name<bar/mumble>   name<quux/mumble>        |
| nil                                   | name               name<2>                  |
|---------------------------------------+---------------------------------------------|

** Icomplete and Fido
- Icomplete global minor mode provides completions in mini buffer
- An alternative is Fido mode which uses icomplete but has IDO like interface
- completion looks for initials like cs to mean 'completion-styles'.
- Flex will give the fuzzy match
- display completion list buffer for invalid completion
- don't hide the common prefix
- icomplete-vertical will show completion candidates vertically
  instead of horizontally
  |--------------+-----------------------------------------|
  | *C-s OR C-.* | rotate completion list                  |
  | *C-r OR C-,* | rotate completion list in reverse order |
  | *C-k*        | kill buffer first in the list           |
  |--------------+-----------------------------------------|

  #+begin_src emacs-lisp
    (setq completion-styles '(initials partial-completion flex basic))
    (if (>= emacs-major-version 29)
	(progn
	  (icomplete-vertical-mode 1)
	  (fido-vertical-mode 1)))
    (if (>= emacs-major-version 30)
	(progn
	  (setq icomplete-in-buffer t)))
  #+end_src

* Windows
** Concepts
- A buffer can be displayed in multiple windows, any changes in one
  will reflect in other
- When multiple windows show the same buffer, they can have different
  regions, because they can have different values of point.  However,
  they all have the same value for the mark, because each buffer has
  only one mark position.
- Each window has its own mode-line

** Splitting
|---------+---------+-----------------------------------------------------------------|
| *C-x 2* | *C-w s* | split-window-below                                              |
|         |         | split selected window into 2, one below and one above           |
|         |         | top window will be selected windows                             |
|         |         | positive prefix to set height(number of lines)  of top window   |
|         |         | negative prefix to set height(number of lines) of bottom window |
| *C-x 3* | *C-w v* | split-window-right                                              |
|         |         | left window is selected window                                  |
|         |         | prefix specifies number of columns                              |
|---------+---------+-----------------------------------------------------------------|

** Other window
|-----------+-----------+---------------------------------------------|
| *C-x o*   | *C-w C-w* | other-window (select another window)        |
|           |           | cycling is top-to-bottom and left-to-right  |
|           |           | minibuffer will be the last window in cycle |
| *C-M-v*   |           | scroll-other-window (scroll next window up) |
| *C-M-S-v* |           | scroll-other-window-down                    |
|-----------+-----------+---------------------------------------------|

** Display in another window
|-------------------------+-----------------------------------------------------|
| *C-x 4 b BUFFER RET*    | switch-to-buffer-other-window                       |
|                         | select buffer in other window                       |
| *C-x 4 C-o BUFFER RET*  | display-buffer                                      |
|                         | open buffer in other window without switching to it |
| *C-x 4 f FILE RET*      | find-file-other-window                              |
| *C-x 4 d DIRECTORY RET* | dired-other-window                                  |
| C-x 4 m                 | compose-mail-other-window                           |
| *C-x 4 .*               | xref-find-definitions-other-window                  |
|                         | Similar to M-.                                      |
| *C-x 4 r FILENAME RET*  | find-file-read-only-other-window                    |
| *C-x 4 4*               | other-window-prefix                                 |
|                         | prefix command which affects buffer displayed by    |
|                         | next command                                        |
| *C-x 4 1*               | same-window-prefix                                  |
|                         | prefix command which affects buffer displayed by    |
|                         | next command                                        |
|-------------------------+-----------------------------------------------------|

** Delete and resize
|-----------+-----------+-------------------------------------------------------------------------------|
| *C-x 0*   | *C-w C-c* | delete-window (delete selected window)                                        |
| *C-x 1*   | *C-w C-o* | delete-other-windows (delete all but selected window)                         |
| *C-x 4 0* |           | kill-buffer-and-window (delete selected window and the buffer it was showing) |
| *C-x ^*   | *C-w +*   | enlarge-window (make selected window taller)                                  |
| *C-x }*   | *C-w >*   | enlarge-window-horizontally                                                   |
| *C-x {*   | *C-w <*   | shrink-window-horizontally                                                    |
| *C-x -*   |           | shrink-window-if-larger-than-buffer                                           |
| *C-x +*   | *C-w =*   | balance-windows                                                               |
|-----------+-----------+-------------------------------------------------------------------------------|

** Displaying buffer
[[https://www.masteringemacs.org/article/demystifying-emacs-window-manager][Demystifying Emacs’s Window Manager]]
[[https://emacs.stackexchange.com/questions/3356/select-help-window-buffer-after-c-h-f][Select *Help* window buffer after C-h f]]
- Based on the buffer names, decide where it should be displayed and
  if it needs to be selected
  |----------------+----------------------------------------------------|
  | display-buffer | diplay buffer in some window without selecting it  |
  | pop-to-buffer  | same as display-buffer but also selects the window |
  |----------------+----------------------------------------------------|
  #+begin_src emacs-lisp
    (setq help-window-select t ;; select help window
	  ;; in strongly dedicate windows behave like pop-to-buffer
	  switch-to-buffer-in-dedicated-window 'pop
	  ;; C-x C-b respects display buffer rules
	  switch-to-buffer-obey-display-actions t)
    ;; switch to occur buffer immediately
    (add-hook 'occur-hook
	      '(lambda ()
		 (switch-to-buffer-other-window "*Occur*")))
    ;; switch to compilation buffer immediately
    (add-hook 'compilation-finish-functions 'switch-to-buffer-other-window 'compilation)
    (setq display-buffer-alist
	  '(("\\*\\(Metahelp\\|info\\|Help\\|Apropos\\).*"
	     (display-buffer-reuse-window display-buffer-in-side-window)
	     (side . right)
	     (window-width . 0.5)
	     (slot . 0))
	    ("\\*\\(.*shell\\|ansi-term\\|\.*eshell\\|.*terminal\\|Async Shell\\).*"
	     (display-buffer-in-side-window)
	     (side . bottom)
	     (window-height . 0.4)
	     (slot . 0))
	    ("\\*\\(Messages\\|Output\\).*"
	     (display-buffer-in-side-window)
	     (side . bottom)
	     (window-height . 0.4)
	     (slot . 0))
	    ("\\*\\(vc-\\|Annotate\\).*"
	     (display-buffer-in-side-window)
	     (side . bottom)
	     (window-height . 0.4)
	     (slot . 0))
	    ("\\*\\(log-edit-\\).*"
	     (display-buffer-in-atom-window)
	     (side . right)
	     (window-width . 0.3)
	     (slot . 0))
	    ("\\*\\(Diff\\).*"
	     (display-buffer-in-side-window)
	     (side . bottom)
	     (window-height . 0.4)
	     (slot . 0))
	    ("\\*\\(Open Recent\\).*"
	     (display-buffer-in-side-window)
	     (side . bottom)
	     (window-height . 0.4)
	     (slot . 0))
	    ("\\*\\(Ibuffer\\).*"
	     (display-buffer-in-side-window)
	     (side . right)
	     (window-width . 0.5)
	     (slot . 0))
	    ("\\*\\(Embark\\).*"
	     (display-buffer-in-side-window)
	     (side . bottom)
	     (window-height . 0.4)
	     (slot . 0))
	    ("\\*\\(eldoc\\|xref\\|Flymake\\).*"
	     (display-buffer-in-side-window)
	     (side . bottom)
	     (window-height . 0.4)
	     (slot . 0))
	    ("\\*\\(Python\\|ielm\\).*"
	     (display-buffer-in-side-window)
	     (side . bottom)
	     (window-height . 0.4)
	     (slot . 0))
	    ("\\*\\(compilation\\|Occur\\|grep\\).*"
	     (display-buffer-in-side-window)
	     (side . bottom)
	     (window-height . 0.4)
	     (slot . 0))))
    (global-set-key (kbd "<f12>") 'window-toggle-side-windows)
  #+end_src

** Tab Line
- Command global-tab-line-mode toggles tab line on top of screen of
  each window. This shows tabs for each buffer that was displayed in a
  window. Mouse click will switch to the buffer
- Tab Bar is displayed at the top of frame and different from tab bar
  in that each tab holds window configurations
  [[*Tab bar][Tab bar]]
  |--------------------------+-----------------|
  | C-x C-Left or C-x Left   | previous-buffer |
  | C-x C-Right or C-x Right | next-buffer     |
  |--------------------------+-----------------|
* Frames
** Concepts
- A frame is window in the desktop terms. A frame is subdivided in to windows by emacs
- C-x C-x closes all emacs frames in current display
- a file can be drag and dropped to emacs frame to open it

** Frame commands
|-----------------------+----------------------------------------------------------------|
| C-x 5 2               | make-frame-command (create new frame using default params)     |
| C-x 5 c               | clone-fram (create new frame using params of current frame)    |
| C-x 5 b BUFNAME RET   | switch-to-buffer-other-frame                                   |
| C-x 5 f FILENAME RET  | find-file-other-frame                                          |
| C-x 5 d DIRECTORY RET | dired-other-frame                                              |
| C-x 5 m               | compose-mail-other-frame                                       |
| C-x 5 0               | delete-frame                                                   |
| C-z                   | suspend-frame (iconify in desktop and suspend in command line) |
| C-x 5 o               | other-frame                                                    |
| C-x 5 1               | delete-other-frames                                            |
| C-x 5 .               | xref-find-definitions-other-frame                              |
| C-x 5 r FILENAME RET  | find-fine-read-only-other-frame                                |
| C-x 5 5               | other-frame-prefix (request buffer of next command to          |
|                       | display in another frame)                                      |
|-----------------------+----------------------------------------------------------------|

** Scroll Bars
- disable scroll bar
  #+begin_src emacs-lisp
    (require 'scroll-bar)
    (scroll-bar-mode -1)
    (setq horizontal-scroll-bar-mode -1)
  #+end_src

** Window dividers
- divides window visually
- can be dragged with mouse to re-size windows
- M-x window-divider-mode

** Menu Bars
- disable menu bar
- it can still be opened using C-RightClick or F10
- setting tty-menu-open-use-tmm to non-nil opens menu bar in echo
  area on terminals
  #+begin_src emacs-lisp
    (menu-bar-mode -1)
    (setq tty-menu-open-use-tmm t)
  #+end_src

** Tool Bar
- disable tool bar
  #+begin_src emacs-lisp
    (require 'tool-bar)
    (tool-bar-mode -1)
  #+end_src

** Tab bar
|--------------------------+-----------+-------------------------------------------------|
| M-x tab-bar-mode         |           | eanble tab bars                                 |
| 'tab-bar-show'           |           | t    - enable tab when any commands create tabs |
|                          |           | 1    - hide tab when only one tab               |
|                          |           | nil  - hide tab bar                             |
| C-x t 2                  | *:tabnew* | tab-new                                         |
| 'tab-bar-new-tab-choice' |           | t    - new tab with current buffer              |
|                          |           | nil  - duplicate current tab                    |
| C-x t b BUFNAME RET      |           | switch-to-buffer-other-tab                      |
| C-x t f FILENAME RET     |           | find-find-other-tab                             |
| C-x t d DIRECTORY RET    |           | dired-other-tab                                 |
| C-x t 0                  |           | tab-close                                       |
| C-x t 1                  |           | tab-close-other                                 |
| C-x t o                  | *:tabn*   | tab-next                                        |
| C-x t r TABNAME RET      |           | tab-rename                                      |
| c-x t m                  |           | tab-move                                        |
|--------------------------+-----------+-------------------------------------------------|


#+begin_src emacs-lisp
  (setq tab-bar-show 1)
#+end_src

** Dialog box
- disable dialog box and always prompt in echo area
  #+begin_src emacs-lisp
    (setq use-dialog-box nil)
  #+end_src
** Tooltips
- Tool tips are small special frames that display info at current
  point position
- To use echo area exclusively:
  #+begin_src emacs-lisp
    (tooltip-mode -1)
  #+end_src

** Maximize emacs on starup
#+begin_src
  (defun maximize-frame ()
    "Maximizes the active frame in Windows"
    (interactive)
    ;; Send a `WM_SYSCOMMAND' message to the active frame with the
    ;; `SC_MAXIMIZE' parameter.
    (when (eq system-type 'windows-nt)
      (w32-send-sys-command 61488)))
  (add-hook 'window-setup-hook 'maximize-frame t)
#+end_src
** Frame Title
#+begin_src emacs-lisp
  (setq frame-title-format '(multiple-frames "%b"
		 ("" "%b")))

#+end_src
* Modes
A mode is a set of definitions that customize Emacs behavior in
useful ways. There are two varieties of modes: minor modes, which
provide features that users can turn on and off while editing; and
major modes, which are used for editing or interacting with a
particular kind of text. Each buffer has exactly one major mode at a
time.

FUNDAMENTL MODE is the least specialized major mode. In Fundamental
mode , every Emacs command behaves in its most general manner
PROG MODE is for working with programming language source code.
TEXT MODE is used for working with human languages (as opposed to programming
languages) and mark up languages
SPECIAL MODE is the parent of major modes that are used for buffers
displaying text that Emacs itself generates.


|------------------+------------------------------------|
| M-x modename     | Enable or disble mode              |
| C-h v major-mode | Display info on current major mode |
| C-h m            | describe-mode                      |
| C-h a mode       | display summary of all modes       |
|------------------+------------------------------------|

Major Mode to open when a file is visited by specifying the first line something like:
; -*-Lisp-*-

This opens the file in Lisp mode. In scripts where first line usually
begins with #!, the mode line should be specified in the second line

|-----------------+----------------------------------------------|
| M-x normal-mode | If major mode is changed, restore to default |
|-----------------+----------------------------------------------|

* Indentation
The exact behavior of <TAB> depends on the major mode.  In Text mode
and related major modes, <TAB> normally inserts some combination of
space and tab characters to advance point to the next tab stop For
this purpose, the position of the first non-whitespace character on
the preceding line is treated as an additional tab stop, so you can
use <TAB> to align point with the preceding line.  If the region is
active, <TAB> acts specially: it indents each line in the region so
that its first non-whitespace character is aligned with the
preceding line.
|-----------+-----------+-----------------------------------------------------------|
| *TAB*     |           | indent-for-tab-command                                    |
|           |           | insert whitespace or indent current line                  |
|           |           | if region is active, index all lines in it                |
| *C-q TAB* | *C-v TAB* | insert tab character in buffer                            |
| C-M-o     |           | split-line (split at point and text after point aligns    |
|           |           | with where point was before)                              |
| *M-m*     | *^*       | back-to-indentation (move to first non whitespace char    |
|           |           | on line)                                                  |
| *M-i*     |           | tab-to-tab-stop (indent at point up to next tabstop)      |
| *M-^*     | *kJ*      | delete-indentation (merge current and previous line)      |
|           |           | with prefix, join current line to next line               |
|           |           | if region is active, join all lines in region             |
| *C-M-\*   | *>*       | indent-region                                             |
|           |           | join all lines in region as if you typed tab at each line |
|           |           | with prefix, indent to prefix column                      |
| *C-x TAB* |           | indent-rigidly                                            |
|           |           | (indent all line in region, activating transient mode     |
|           |           | where arrow keys move region)                             |
|           |           | with prefix N, indent by forward/backward N space         |
|           |           | C-u -999 C-x TAB - removes all indentation                |
|-----------+-----------+-----------------------------------------------------------|

** Tab stops
- certain columns are used as stopping points when using indentations
- default is every 8 columns
  |--------------------+------------------------------|
  | 'tab-stop-alist'   | set tab stops                |
  | M-x edit-tab-stops | edit tab stops interactively |
  |--------------------+------------------------------|

- tab characters are displayed as spaces extending to next tab stop

** Tabs vs spaces
- Indentation inserts shortest possible series of tab and space to align to desired column
  |--------------------------+---------------------------------------------------------|
  | 'indent-tabs-mode'       | setting to nil makes all indentation using space        |
  |                          | C-q TAB still inserts tab                               |
  | *M-x tabify*             | scan region and convert spaces to tabs without changing |
  |                          | indent                                                  |
  | *M-x untabify*           | convert tabs to spaces                                  |
  | 'tab-always-indent'      | if 'complete', first try to indent and if already       |
  |                          | indented then complete                                  |
  |                          | if nil, indent line only if point is at left margin     |
  |                          | else insert tab                                         |
  | M-x electric-indext-mode | automatically indent line after every RET               |
  |--------------------------+---------------------------------------------------------|

  #+begin_src emacs-lisp
    (setq tab-always-indent 'complete)
    ;; distance between tab stops in columns. control width of tab characters to display
    ;; it should be positive integer and default is 8
    (setq tab-width 8)
  #+end_src
** Code Alignment
|--------------------------------+-------------------------------------------|
| M-x align                      | align lines in region                     |
|                                | with prefix produce alternate alignment   |
| 'align-rules-list              | specifies alignment rules to use          |
| 'align-mode-rules-list'        | mode specific alignment rules list        |
| 'align-to-tab-stop'            | nil - use enough whitespace for alignment |
|                                | t - align to tab stops                    |
| 'align-indent-before-aligning' | indent region before aligning             |
|--------------------------------+-------------------------------------------|
* Text
** Words
|---------+------+-------------------------------------------|
| *M-f*   | *w*  | forward-word                              |
| *M-b*   | *b*  | backward-word                             |
| *M-d*   | *dw* | kill-word (kill word after point)         |
| *M-DEL* | *db* | backward-kill-word                        |
| *M-@*   |      | mark-word                                 |
|         |      | change direction of region extension with |
|         |      | C-x C-x                                   |
| *M-t*   |      | transpose-words (before and after point)  |
|---------+------+-------------------------------------------|

** Sentences
|-----------+------+------------------------------------------------------|
| *M-a*     | *(*  | backward-sentence (move to beginning of sentence)    |
| *M-e*     | *)*  | forward-sentence (move to end of sentence)           |
| *M-k*     | *d)* | kill-sentence (kill from point till end of sentence) |
| *C-x DEL* |      | backward-kill-sentence                               |
|           |      | same as M-- M-k                                      |
|-----------+------+------------------------------------------------------|
- Sentence end with period followed by 2 spaces or end of line. A
  sentence also begins or ends when a para begins or ends
- If you want to use just one space, set sentence-end-double-space
  
** Paragraphs
|-------+-------+-----------------------------------------------------|
| M-{   | *[[*  | backward-paragraph                                  |
| M-}   | *]]*  | forward-paragraph                                   |
| *M-h* | *v]]* | mark-paragraph                                      |
|       |       | put point and mark around current or next paragraph |
|       |       | point at beginning and mark at end                  |
|       |       | also select blank line preceding para               |
|       |       | each M-h advances mark by another para              |
|-------+-------+-----------------------------------------------------|
- paragraphs are separated by one or more blank lines
  
** Pages
- page breaks are inserted with C-q C-l
  |---------------+----------------------------------------------|
  | M-x what-page | display page number and line number of point |
  | C-x [         | backward-page                                |
  | C-x ]         | forward-page                                 |
  | C-x C-p       | mark-page                                    |
  | C-x l         | count-lines-page                             |
  |---------------+----------------------------------------------|
** Quotation Mark
- typewriter convention - '' or '' and ''
- curved quotation -  ‘’ or “”
- electric quote mode -
  converts ` to  ‘ and ' to ’
  converts `` to “ and '' to ”
- alternate ways using C-x 8
   C-x 8 [ - ‘
   C-x 8 ] - ’
   C-x 8 { - “
   C-x 8 } - ”
** Filling
- “Filling” text means breaking it up into lines that fit a
  specified width.
- fill prefix allows para to be filled such that each line starts
  with special string
  |--------------------------------+--------+------------------------------------------|
  | M-x auto-fill-mode             |        | toggle autofill mode                     |
  | SPC or RET                     |        | in auto fill mode break lines where      |
  |                                |        | appropriate                              |
  | *M-q*                          | *gqap* | fill-paragraph                           |
  |                                |        | distribute line breaks within para and   |
  |                                |        | delete any extra space and tab           |
  |                                |        | such that all lines fit within max       |
  |                                |        | width ('fill-column')                    |
  |                                |        | if region is active, act on region       |
  |                                |        | with prefix, add spaces to right justify |
  | C-x f                          |        | set-fill-column                          |
  | *M-x fill-region-as-paragraph* |        | Fill everything between point and mark   |
  |                                |        | as one paragraph                         |
  | 'fill-column'                  |        | max line width for filling. default 70   |
  | M-o M-s                        |        | center-line (center line within current  |
  |                                |        | fill column)                             |
  | *C-x .*                        |        | set-fill-prefix                          |
  |                                |        | (from start of line till point is        |
  |                                |        | treated as new prefix)                   |
  |--------------------------------+--------+------------------------------------------|
  - When a fill prefix is in effect, the fill commands remove the
    fill prefix from each line of the paragraph before filling, and
    insert it on each line after filling.  The beginning of the
    line of the paragraph is left unchanged, since often that is
    intentionally different.
  - Auto Fill mode also inserts the fill prefix automatically when
    it makes a new line
  - The C-o command inserts the fill prefix on new lines it creates,
    when you use it at the beginning of a line
  - Conversely, the command M-^ deletes the prefix (if it occurs)
    after the newline that it deletes

#+begin_src emacs-lisp
  (add-hook 'text-mode-hook 'turn-on-auto-fill)
#+end_src

** Case
|---------+-------+-------------------------------------------------|
| *M-l*   | *guw* | downcase-word (lower case word after point)     |
| *M-u*   | *gUw* | upcase-word                                     |
|         |       | with prefix, apply to part of word before point |
| *M-c*   |       | capitalize-word                                 |
| C-x C-l |       | downcase-region                                 |
| C-x C-u |       | upcase-region                                   |
|---------+-------+-------------------------------------------------|

- enable disabled commands
  #+begin_src emacs-lisp
    (put 'downcase-region 'disabled nil)
    (put 'upcase-region 'disabled nil)
  #+end_src

** Text mode
- tab inserts whitespace instead of indenting
- apostrophe is considered part of word
- if first line of para should be indented, then use
  paragraph-indent-text-mode instead of text-mode
- C-M-i to complete partial word
  
** Outline mode
- derived from text mode
- uses C-c prefix

*** Outline Format
- there are two types of lines: heading line and body line
- heading line represents topic in outline and starts with one or
  more asterisks (*). One asterisk is heading 1, two is heading 2 etc
- any line which is not a heading line, is a body line
- A heading line with all following body forms an *entry*; heading
  with all subheadings and their body is a *subtree*

*** Outline Motion
|-----------+----------------------------------|
| *C-c C-n* | outline-next-visible-heading     |
| *C-c C-p* | outline-previous-visible-heading |
| *C-c C-f* | ouline-forward-same-level        |
| *C-c C-b* | outline-backward-same-level      |
| *C-c C-u* | outline-up-heading               |
|-----------+----------------------------------|

** Org mode
- Used as organizer and/or authoring system. File name ends with
  '.org'
- Heading starts with one or more '*'
- Comment starts with #
|---------+------------------------------------------------------------------|
| TAB     | org-cycle                                                        |
|         | on heading line cycle through different visibility levels        |
|         | on body line, use global binding                                 |
| S-TAB   | org-shifttab                                                     |
|         | anywhere in buffer, cycle visibility of entire outline structure |
| M-UP    | org-metaup                                                       |
|         | move entire entry(including body and sutree) up                  |
| M-DOWN  | org-metadown                                                     |
| M-LEFT  | org-metaleft                                                     |
|         | promote a heading                                                |
| M-RIGHT | org-metaright                                                    |
|---------+------------------------------------------------------------------|
*** Organizer
|---------------------+-----------------------------------------------------------|
| C-c C-t             | org-todo                                                  |
|                     | tag an entry as TODO item. Adds keyword TODO in the entry |
|                     | If already TODO, switch it to DONE                        |
|                     | If already DONE, remove the keyword                       |
| 'org-todo-keywords' | keywords used by org-todo                                 |
| C-c C-s             | org-schedule                                              |
|                     | attach date to TODO adding tag SCHEDULED same as          |
| C-c C-d             | org-deadline                                              |
|                     | same as org-schedule but tag is DEADLINE                  |
| C-c [               | org-agenda-file-to-front                                  |
|                     | add file to agenda files stored in 'org-agenda-files'     |
| M-x org-agenda      | show list of things to do                                 |
|---------------------+-----------------------------------------------------------|
*** Authoring
|-----------------------------+---------------------------------------|
| C-c C-e                     | org-export-dispatch                   |
|                             | export buffer to HTML, LaTex, PDF etc |
| /emphasized/                |                                       |
| *bold*                      |                                       |
| _underlined_                |                                       |
| =teletype font=             |                                       |
| #+begin_quote               |                                       |
| #+end_quote                 |                                       |
| #+begin_example             |                                       |
| #+end_example               |                                       |
| C-c C-c                     | org-ctrl-c-ctrl-c                     |
|                             | evaluate if cursor is on code block   |
| 'org-confirm-babel-evaluate | prompt before evaluating              |
|-----------------------------+---------------------------------------|
#+begin_src emacs-lisp
  (require 'org-tempo)

  (org-babel-do-load-languages 'org-babel-load-languages
			       '((C . t)
				 (java . t)
				 (latex . t)
				 (lua . t)
				 (python . t)
				 (shell . t)
				 (emacs-lisp . t)))
  (setq org-confirm-babel-evaluate nil)
#+end_src

** Text Based Tables
|----------------------------+---------------------------------|
| M-x table-fixed-width-mode | toggle automatic table resizing |
|----------------------------+---------------------------------|
*** Definition
- Table consists of rectangular area made of cells
- Cell must be atleast one char high and one char wide
|------------------------------+------------------------------------------|
| table-cell-vertical-char     | char used for vertical lines             |
| table-cell-horizontal-chars  | char used for horizontal lines           |
| table-cell-intersection-char | char used intersection of horizontal and |
|                              | vertical lines                           |
|------------------------------+------------------------------------------|
- cells cannot overlap one another
- border must be rectangular
*** Creation
|------------------+----------------------------------------------------------------|
| M-x table-insert | create table                                                   |
|                  | prompts number of rows, columns, cell width and height         |
|                  | width and height can be sequence of numbers separated by comma |
|                  | they specify cell size from top to bottom and left to right    |
|------------------+----------------------------------------------------------------|
*** Recognition
- When reading text file, table appears as normal text
|------------------------------+---------------------------------------------|
| M-x table-recognize          | scan current buffer and recognize all valid |
|                              | tale cells                                  |
| M-x table-unrecognize        | convert table to plain text                 |
| M-x table-recognize-region   |                                             |
| M-x table-unrecognize-region |                                             |
| M-x table-recognize-table    | recognize table at point                    |
| M-x table-unrecognize-table  |                                             |
| M-x table-recognize-cell     |                                             |
| M-x table-unrecognize-cell   |                                             |
|------------------------------+---------------------------------------------|
*** Cell Commands
|-----------------------------------+--------------------------------------------------|
| M-x table-forward-cell            | move to next cell                                |
| M-x table-backward-cell           | move to prev cell                                |
| M-x table-span-cell               | prompt direction and merge current cell with     |
|                                   | adjacent  in given direction                      |
| M-x table-split-cell              | when splitting vertically, old cell contents     |
| M-x table-split-cell-horizontally | are automatically split between two cells        |
| M-x table-split-cell-vertically   | prompts when splitting horizontally if non-empty |
|                                   | split - divide contents at point                 |
|                                   | left - put all contents on left cell             |
|                                   | right - put all contents on right cell           |
| M-x table-heighten-cell           | pass prefix to specify number rows/columns       |
| M-x table-shorten-cell            | to resize by                                     |
| M-x table-widen-cell              |                                                  |
| M-x table-narrow-cell             |                                                  |
|-----------------------------------+--------------------------------------------------|

*** Cell Justification
|-------------------------------+---------------------------------------------------------------|
| M-x table-justify             | prompt what to justify(cell, column, row)                     |
|                               | prompt style (center, left, right, top, middle, bottom, none) |
|                               | call twice to justify both horizontally and vertically        |
| 'table-detect-cell-alignment' | nil - don't attempt determine cell justification style        |
|-------------------------------+---------------------------------------------------------------|
*** Rows and Columns
|-------------------------+--------------------------------------|
| M-x table-insert-row    | insert row before current row        |
|                         | with prefix N - insert N rows        |
| M-x table-insert-column | insert column left of current column |
|                         | with prefix N - insert N columns     |
| M-x table-delete-column | delete column of cells               |
| M-x table-delete-row    | delete row of cells                  |
|-------------------------+--------------------------------------|
*** Conversion
|-------------------+-------------------------------------------------------------|
| M-x table-capture | converts plaintext in region into table                     |
|                   | text need not have table appearance but only some structure |
| M-x table-release | convert table back to plain text                            |
|-------------------+-------------------------------------------------------------|
*** Misc
|---------------------------+-----------------------------------------------------|
| M-x table-query-dimension | report table size                                   |
| M-x table-insert-sequence | insert sequence of text into each cell              |
|                           | asks base string and then increments numerically    |
|                           | or ASCII order                                      |
| M-x table-generate-source | generate markup text for table like html, latex etc |
|---------------------------+-----------------------------------------------------|

* Programs
- Program mode has special rules for indentation, syntax
  highlighting, function definitions and compile/debug as well
- Entering any programming mode runs 'prog-mode-hook' and language
  specific hooks
** Defuns
- A major definition at the top level such as function is called
  defun
- 'open-paren-in-colum-0-is-defun-start' can be set to nil if
  opening parens or brace found at left margin is not start of a
  function
|---------+------------------------------------------------|
| *C-M-a* | beginning-of-defun                             |
|         | move to beginning of current or previous defun |
| *C-M-e* | end-of-defun                                   |
| *C-M-h* | mark-defun (current or following defun)        |
|---------+------------------------------------------------|

** Imenu
- Offers a way to find major definitions in file by name. It also
  works in text mode like org mode where it treats heading,
  sections as definitions
- Special item *Rescan* scans and updates definition list if
  anything is added or deleted. Alternatively, we can set to run
  automatically
  #+begin_src emacs-lisp
    (setq imenu-auto-rescan t)
  #+end_src

** Which Function
- It is a global minor mode that displays current function name in
  mode line
  #+begin_src emacs-lisp
    (which-function-mode 1)
  #+end_src

** Indentation
|-------------------+------------------------------------------------------------------------|
| *TAB*             | indent-for-tab-command (indent current line or region)                 |
| *RET*             | newline (insert new line and then adjust indentation of                |
|                   | following line)                                                        |
| *C-M-q*           | prog-indent-sexp (indent all lines in parenthetical grouping)          |
|                   | indentation of opening parenthesis won't change                         |
| *C-M-\*           | indent-region                                                          |
| *C-u TAB*         | shift entire sexp side without changing indentation within             |
|                   | parenthetical group)                                                   |
| *C-c C-q*         | c-indent-defun                                                         |
|                   | re-indent current top level function def or type declaration           |
| *C-x h C-M-\*     | re-indent whole buffer                                                 |
| *C-c . STYLE RET* | c-set-style                                                            |
|                   | c mode and related modes have an option to customize indentation style |
|                   | Some predefined styles - 'gnu', 'k&r', 'bsd', 'java, 'python' etc      |
| *M-x c-guess*     | Guess indentation style using current buffer                           |
|-------------------+------------------------------------------------------------------------|

** Parenthesis
- Balanced expression includes string or code enclosed in matching
  pair of delimiters
  |--------------------------------------------+----------------------------------------------------------------|
  | *M-x check-parens*                         | find any unbalanced parentheses and string quotes              |
  | *C-M-f*                                    | forward-sexp (move forward over balanced expression)           |
  | *C-M-b*                                    | backward-sexp                                                  |
  | *C-M-k*                                    | kill-sexp                                                      |
  | C-M-t                                      | transpose-sexps                                                |
  | *C-M-SPC*                                  | mark-sexp (mark following sexp)                                |
  | *C-M-n*                                    | forward-list                                                   |
  |                                            | move to the end of current or next parenthetical group         |
  |                                            | moves at the same level                                        |
  | *C-M-p*                                    | backward-list                                                  |
  | *C-M-u*                                    | backward-up-list (move up one level)                           |
  | *C-M-d*                                    | down-list                                                      |
  | 'blink-matching-paren'                     | t - enable the feature                                         |
  |                                            | jump - momentarily jump cursor to matching paren               |
  |                                            | jump-offscreen - jump even if opening delimiter is off screen  |
  | 'blink-matching-delay'                     | how many seconds to keep indicating the matching delimiter     |
  | 'blink-matching-paren-distance'            | how many chars back to search to find opening delimiter        |
  | M-x show-paren-mode                        | when point is before opening or after closing delimiter,       |
  |                                            | the delimiter and optionally text in between are highlighted   |
  | 'show-paren-style'                         | parenthesis - show matching parens                             |
  |                                            | expression - highlight entire expression between parens        |
  |                                            | mixed - if both parens are visible, highlight it otherwise     |
  |                                            | highlight expression                                           |
  | 'show-paren-when-point-inside-paren'       | highlight even when point is inside parens                     |
  | 'show-paren-when-point-in-periphery'       | highlight when point is in white space before or after parens  |
  | 'show-paren-context-when-offscreen'        | show context in echo area when opening delimiter is offscreen  |
  | M-x electric-pair-mode                     | insert closing delimiter when opening delimiter is inserted    |
  |                                            | leaving point in between                                       |
  |                                            | if region is active, insert delimiter around region            |
  | 'electric-pair-preserve-balance'           | help balance parentheses                                       |
  | 'electric-pair-delete-adjacent-pairs'      | backspacing between two adjacent delimiters also automatically |
  |                                            | delete closing delimiter                                       |
  | 'electric-pair-open-newline-between-pairs' |                                                                |
  | 'electric-pair-skip-whitespace'            |                                                                |
  |--------------------------------------------+----------------------------------------------------------------|

  #+begin_src emacs-lisp
    (setq blink-matching-paren 'jump
	  blink-matching-delay 1)		; not used in show paren mode

    (setq show-paren-highlight-openparen t
	  show-paren-style 'mixed
	  show-paren-when-point-inside-paren t
	  show-paren-context-when-offscreen t)
    (show-paren-mode 1)

    (setq electric-pair-preserve-balance t
	  electric-pair-delete-adjacent-pairs t
	  electric-pair-open-newline-between-pairs t)

    (add-hook 'prog-mode-hook 'electric-pair-local-mode) 
  #+end_src

** Comments
|-----------+-------------------------------------------------------------------------|
| *M-;*     | comment-dwim                                                            |
|           | insert or realign comment on current line                               |
|           | if region is active, comment or uncomment lines in region               |
|           | with prefix and no active region - kill comment on current line         |
|           | with prefix N and active region - specifies number of delimiters to add |
| *C-x C-;* | comment-line                                                            |
|           | with prefix N - comment N(positive) following or preceding(negative)    |
|           | lines                                                                   |
| *M-j*     | like RET followed by inserting and aligning a comment                   |
| *C-c C-c* | comment-region                                                          |
|-----------+-------------------------------------------------------------------------|

** Documentation
|-----------+----------------------------------------------|
| C-h S     | info-lookup-symbol                           |
| M-x man   | display manual using external program        |
|           | specify section in parentheses like chmod(2) |
| M-x woman | display manual using emacs formatter         |
|-----------+----------------------------------------------|
** Eldoc
- Echo area displays useful information when there is documented
  symbol at point
|-------------------------------------+--------------------------------------------------|
| M-x eldoc-mode                      | buffer local eldoc mode                          |
| M-x global-eldoc-mode               | global eldoc mode                                |
| 'eldoc-idle-delay'                  | idle time before documentation is displayed      |
|                                     | default 0.5s                                     |
| 'eldoc-print-after-edit'            | show doc for symbol that was inserted and not    |
|                                     | already present in document                      |
| 'eldoc-echo-area-use-multiline-p'   | positive - number of max screen-lines used to    |
|                                     | display documentation                            |
|                                     | float - fraction of frame height                 |
|                                     | t - never truncate documentation (uses           |
|                                     | max-mini-window-height(0.25 default)             |
|                                     | nil - truncate if more than one line             |
| 'eldoc-echo-area-prefer-doc-buffer' | t - use eldoc buffer if already open instead     |
|                                     | of echo area                                     |
|                                     | maybe - don't display in echo area if eldoc      |
|                                     | buffer is open and if it will truncate if        |
|                                     | displayed in echo area                           |
|                                     | nil - always show in echo area                   |
| 'eldoc-documentation-strategy'      | function to retrieve and display documentation   |
|                                     | for symbol at point                              |
| 'eldoc-documentation-functions'     | list of functions that can produce documentation |
|-------------------------------------+--------------------------------------------------|
#+begin_src emacs-lisp
  (setq eldoc-echo-area-display-truncation-message t
	eldoc-idle-delay 0.5
	eldoc-echo-area-use-multiline-p nil
	eldoc-echo-area-prefer-doc-buffer t)
  (global-eldoc-mode 1)
#+end_src

** Hideshow minor mode
- Hideshow mode is a buffer local mode that allows to selectively
  display portions of a program referred to as blocks 
- The block disappears from screen to be replaced by an
  ellipsis. What constitutes a block depends on major mode
  |------------------------------------+------+-------------------------------------------------|
  | M-x hs-minor-mode                  |      | toggle hideshow mode                            |
  | C-c @ C-h                          | *zc* | hs-hide-block                                   |
  | C-c @ C-s                          | *zo* | hs-show-block                                   |
  | *C-c @ C-c*                        | *za* | hs-toggle-hiding                                |
  | *C-c @ C-M-h*                      | *zm* | hs-hide-all                                     |
  | *C-c @ C-M-s*                      | *zr* | hs-show-all                                     |
  | C-u N C-c @ C-l                    |      | hs-hide-level                                   |
  | 'hs-hide-comments-when-hiding-all' |      | if non-nill, hs-hide-all hides comments         |
  | 'hs-isearch-open'                  |      | during isearch if match occurs in hidden block: |
  |                                    |      | code - unhide only code blocks                  |
  |                                    |      | comment - unhide only comment                   |
  |                                    |      | t - unhide both                                 |
  |                                    |      | nil - don't unhide                              |
  |------------------------------------+------+-------------------------------------------------|
  #+begin_src emacs-lisp
    (setq hs-isearch-open t
	  hs-hide-comments-when-hiding-all t)
    (add-hook 'prog-mode-hook 'hs-minor-mode)
  #+end_src
** Completion
- Completion order
  - Eglot LSP
  - Semantic Parser
  - Tags Table
  - Emacs Session for Lisp
  - Spell checker
  
|-----------------+----------------------------------------|
| *C-M-i*         | completion-at-point                    |
| M-UP and M-DOWN | next completion candidate              |
| M-RET           | Insert currently highlighted candidate |
|-----------------+----------------------------------------|
[[https://eshelyaron.com/posts/2023-11-17-completion-preview-in-emacs.html][Completion Preview in Emacs]]
#+begin_src emacs-lisp
  (if (>= emacs-major-version 30)
    (progn
      (require 'completion-preview)
      (add-hook 'prog-mode-hook #'completion-preview-mode)
      (add-hook 'text-mode-hook #'completion-preview-mode)
      (add-hook 'comint-mode-hook #'completion-preview-mode)
      ;; Show the preview already after two symbol characters
      (setq completion-preview-minimum-symbol-length 2)
      ;; Org mode has a custom `self-insert-command'
      (push 'org-self-insert-command completion-preview-commands)
      ;; Cycle the completion candidate that the preview shows
      (keymap-set completion-preview-active-mode-map "M-n" #'completion-preview-next-candidate)
      (keymap-set completion-preview-active-mode-map "M-p" #'completion-preview-prev-candidate)
      ;; Convenient alternative to C-i or TAB after typing one of the above
      (keymap-set completion-preview-active-mode-map "M-i" #'completion-preview-insert)))

#+end_src
** Mixed-Case
|--------------------+--------------------------------------------------------------|
| M-x glasses-mode   | display underscore between each lowercase                    |
|                    | and following upper case                                     |
|                    | this does not alter buffer text, only how they are displayed |
|                    | mode-line indicator o^o                                       |
| M-x subword-mode   | Treat upper case letters as word boundaries                  |
|                    | mode-line indicator - ','                                     |
| M-x superword-mode | treat multiple words separated by underscores as one word    |
|--------------------+--------------------------------------------------------------|
#+begin_src emacs-lisp
  (add-hook 'prog-mode-hook 'superword-mode)
#+end_src

** Semantic mode
|-------------------+-----------------------------------------------------------------|
| M-x semantic-mode | provide search, navigation and completion commands              |
|                   | relies on source code parser                                    |
| C-c , j           | semantic-complete-jump-local                                    |
|                   | prompt for name of function and move point to its               |
|                   | definition (in same file)                                       |
| C-c , J           | semantic-complete-jump                                          |
|                   | prompt for name of function and move point to its               |
|                   | definition (in any file)                                        |
| C-c , SPC         | semantic-complete-analyze-inline                                |
|                   | display list of possible completions for symbol at point        |
|                   | M-n/M-p cycle through possible, RET accept current completion   |
|                   | TAB - complete till max common string                           |
| C-c , l           | semantic-analyze-possible-completions                           |
|                   | display list of possible completions at point in another window |
|-------------------+-----------------------------------------------------------------|

** C Mode
|-------------------------+---------------------------------------------------------------------|
| *C-M-a*                 | beginning-of-defun                                                  |
| *C-M-e*                 | end-of-defun                                                        |
| *M-a*                   | c-beginning-of-statement                                            |
|                         | move point to beginning of innermost statement                      |
| *M-e*                   | c-end-of-statement                                                  |
| *C-M-h*                 | c-mark-function                                                     |
| *M-q*                   | c-fill-paragraph                                                    |
| *C-c C-e*               | c-macro-expand                                                      |
|                         | run c pre-processor on region and display result                    |
|                         | in new buffer                                                       |
| *C-c C-\*               | c-backslash-region (insert or align backslash at                    |
|                         | the end of lines)                                                   |
| *M-x cwarn-mode*        |                                                                     |
| *M-x global-cwarn-mode* | highlight suspicious code like assignment inside expression,        |
|                         | semicolon after if etc                                              |
| C-c C-k                 | toggle comment style to block or line                               |
|                         | mode line show * for block and / for line                           |
| C-c C-l                 | c-toggle-electric-state (positive or negative prefix                |
|                         | enables or disables)                                                |
|                         | In electric action mode, insert certain characters                  |
|                         | like '{', ';' etc. also re-indents current line                     |
|                         | and optionally inserts newline                                      |
|                         | Modeline shows l                                                    |
| C-c C-a                 | c-toggle-auto-newline                                               |
|                         | In electric action mode, newline are inserted only                  |
|                         | if auto-newline is also enabled. Modline shows a                    |
| C-c DEL                 | c-hungry-delete-backwards (delete all whitespace surrounding point) |
| C-c C-d                 | c-hungry-delete-forward                                             |
|                         |                                                                     |
|-------------------------+---------------------------------------------------------------------|

#+begin_src emacs-lisp
  (add-hook 'c-mode-hook 'cwarn-mode)
#+end_src

* Building
** Compilation
|--------------------------------------+-------------------------------------------------------|
| *M-x compile*                        | run compiler asynchronously sending errors            |
|                                      | to compilation buffer                                 |
| *g OR M-x recompile*                 | in compilation buffer, recompile                      |
| M-x kill-compilation                 | kill running compilation                              |
|                                      | Moving point to end of compilation buffer,            |
|                                      | acts like tail command                                |
| 'compilation-scroll-output'          | t - scroll compilation buffer automatically to        |
|                                      | follow output                                         |
|                                      | first-error - scrolling stops at first error          |
| 'compilation-always-kill'            | starting new compilation when previous one            |
|                                      | is already running, prompts to kill running           |
|                                      | compilation                                           |
|                                      | t - automatically kill previous compilation           |
|                                      | without prompting                                     |
|                                      | To run two compilations at once, start the first one, |
|                                      | rename the‘*compilation*’ buffer (perhaps using       |
|                                      | ‘rename-uniquely’;                                    |
|                                      | switch buffers and start the other compilation.       |
|                                      | will create a new ‘*compilation*’ buffer.             |
| 'compilation-environment'            | list of env variables passed to compilation           |
|                                      | each element should be string of form VARNAME=VALUE   |
| 'compilation-max-output-line-length' | nil - to not hide long lines                          |
|--------------------------------------+-------------------------------------------------------|

#+begin_src emacs-lisp
  (setq compilation-scroll-output 'first-error)
  (setq compilation-always-kill t)
#+end_src

** Compilation Mode
- Compilation buffer uses major mode Compilation Mode
- Each error in compilation buffer is a hyperlink to position of
  source file where error occurred(locus). Hitting RET or clicking will
  take to that position
  |----------------------------------------+------------------------------------------------------------------|
  | 'compilation-auto-jump-to-first-error' | automatically jump to locus of first error                       |
  | *M-g M-n OR M-g n*                     | next-error (visit locus of next error)                           |
  | *M-g M-p OR M-g p*                     | previous-error                                                   |
  | *M-n*                                  | compilation-next-error (go to next error                         |
  |                                        | in compilation buffer)                                           |
  | *M-p*                                  | compilation-previous-error                                       |
  | *C-c C-f*                              | next-error-follow-minor-mode                                     |
  |                                        | cursor motion in compilation buffer                              |
  |                                        | produce automatic display                                        |
  |                                        | of corresponding source                                          |
  | *g*                                    | recompile                                                        |
  | 'next-error-highlight'                 | how long to highlight source line                                |
  |                                        | with error                                                       |
  | 'next-error-highlight-no-select'       | how long to highlight source line                                |
  |                                        | with error for non-selected buffer                               |
  | M-x compilation-minor-mode             | enable minor mode to use compilation                             |
  |                                        | mode features                                                    |
  | 'compilation-save-buffers-predicate'   | argument is passed to save-some-buffers                          |
  |                                        | setting it to ignore, simply consumes all params and returns nil |
  |----------------------------------------+------------------------------------------------------------------|

  #+begin_src emacs-lisp
    (setq compilation-auto-jump-to-first-error t)
    (setq next-error-highlight 3)
    (setq next-error-highlight-no-select 3)
    (setq compilation-save-buffers-predicate 'ignore)
  #+end_src
** Grep
- Running grep treats matches reported like errors so that we can
  use similar keybindings
  |---------------------+------------------------------------------------------|
  | *M-x grep*          | run grep asynchronously                              |
  |                     | with prefix use word under cursor as the search term |
  |                     | escape shell special chars in single quotes          |
  |                     | you can chain multiple grep commands with pipes      |
  |                     | output goes to grep buffer                           |
  | 'grep-save-buffers' | nil - don't save buffer before running grep          |
  |                     | ask - ask to save buffer before running              |
  |                     | t   - save without asking                            |
  | M-x grep-find       | also called find-grep                                |
  |                     | uses find in the background to search every          |
  |                     | file in directory                                    |
  |                     | find . -exec grep                                    |
  | *M-x zgrep*         | grep on compressed files                             |
  | *M-x lgrep*         | like grep but interactive                            |
  | *M-x rgrep*         | like grep-find but interactive                       |
  | 'case-fold-search'  | controls case sensitivity of search                  |
  |---------------------+------------------------------------------------------|

  #+begin_src emacs-lisp
    (setq grep-save-buffers nil
	  grep-use-null-filename-separator nil)
  #+end_src
** Flymake
- on the fly syntax check for programming and markup languages
  similar to flyspell mode
- collects problems with current buffer called 'diagnostic' using
  back-ends and annotates problematic regions. It also highlights
  overall status in modeline
  |--------------------------------------+-------------------------------------------|
  | M-x flymake-mode                     | start flymake mode                        |
  | M-x flymake-start                    | start syntax check manually               |
  | *C-h .*                              | display-local-help                        |
  |                                      | on regions that are highlighted for error |
  | flymake-goto-next-error              | go to next error region                   |
  | flymake-goto-prev-error              | go to previous error region               |
  | 'flymake-wrap-around'                | wrap around during next and prev error    |
  |                                      | if on last or first error                 |
  | M-x flymake-show-buffer-diagnostics  | bring a separate buffer containing        |
  |                                      | detailed structured listing of            |
  | M-x flymake-show-project-diagnostics | diagnostics of current buffer or project  |
  |                                      | list is dynamically updated as the        |
  |                                      | source is edited                          |
  | 'flymake-no-changes-timeout'         | time to wait after last change before     |
  |                                      | checking buffer                           |
  |                                      | nil - never start                         |
  |                                      | integer - wait for that many seconds      |
  | 'help-at-pt-display-when-idle'       | Automatically show local help on          |
  |                                      | point-over (like display-local-help)      |
  | 'help-at-pt-timer-delay'             | seconds to wait before displaying         |
  |                                      | local help                                |
  |--------------------------------------+-------------------------------------------|

  #+begin_src emacs-lisp
    (require 'flymake)
    (define-key flymake-mode-map (kbd "M-n") 'flymake-goto-next-error)
    (define-key flymake-mode-map (kbd "M-p") 'flymake-goto-prev-error)
    (setq flymake-no-changes-timeout 3
	  flymake-start-on-flymake-mode t
	  flymake-wrap-around t
	  help-at-pt-display-when-idle t
	  help-at-pt-timer-delay 1)
    (add-hook 'prog-mode-hook 'flymake-mode)
  #+end_src
- following messages are displayed on modeline
  |-------------------+-----------------------------------------------------------------|
  | NERRORS NWARNINGS | Normal operation                                                |
  | Wait              | some delay from back-ends, will resume operation soon           |
  | '!'               | All configured back-ends have disabled. Needs user intervention |
  | ?                 | No back-ends for this buffer                                    |
  |-------------------+-----------------------------------------------------------------|
- Logs from flymake are logged to buffer Flymake log
** Debugging
- GUD (Grand Unified Debugger) library provides unified interface
  to multiple debuggers like GDB, PDB (Python), JDB (Java)
- TRAMP provides remote debugging where debugger and code are on
  remote host
- GUD interaction buffer sends text commands to debugger and
  records its output
- M-x gdb extends this with additional special buffers to control
  breakpoints, stack frames etc
- Completion and history are available
- Left fringe shows an arrow in source file with current execution line
  |----------------------------+-------------------------------------------------------------|
  | *M-x gdb*                  | run gdb as subprocess                                       |
  | *M-x gud-gdb*              | run gdb using GUD interaction buffer                        |
  | *M-x jdb*                  | java debugger                                               |
  | *M-x perldb*               | perl debugger                                               |
  | *M-x pdb*                  | python debugger                                             |
  | *M-x gud-tooltip-mode*     | allows to move mouse pointer over variable,                 |
  |                            | function or macro to their value in tooltip                 |
  | 'gud-tooltip-echo-area'    | if non-nil, values are shown in echo area                   |
  | *C-x C-a C-b* or *C-c C-b* | gud-break (set break-point on line with point)              |
  |                            | C-x C-a is available globally                               |
  |                            | C-c prefix available only in gud buffer                     |
  | *C-c C-s*                  | gud-step (execute next line)                                |
  |                            | if it is a function call, stop after entering function      |
  | *C-c C-n*                  | gud-next (execute next line)                                |
  |                            | if it is a function call, don't stop inside function        |
  | *C-c C-p*                  | gud-print (evaluate expression at point)                    |
  |                            | if region is active, evaluate region                        |
  | *C-c C-r*                  | execute till next break-point                               |
  | *C-c C-d*                  | gud-remove (delete break-point on current line if any)      |
  | *C-c C-t*                  | gud-tbreak (set temporary break point)                      |
  | *C-c <*                    | gud-up (select previous stack frame)                        |
  |                            | each function call creates a new stack frame                |
  | *C-c >*                    | gud-down (select next inner stack frame)                    |
  | *C-c C-u*                  | gud-until (execute till current line)                       |
  | *C-c C-f*                  | gud-finish (run till selected stack frame returns or stops) |
  | TAB                        | gud-gdb-complete-command (complete symbol name)             |
  |----------------------------+-------------------------------------------------------------|


  #+begin_src emacs-lisp
    (setq gud-tooltip-echo-area t)
  #+end_src

- GUD runs hooks for respective debuggers like gdb-mode-hook, pdb-mode-hook etc
  |-----------------------------------+----------------------------------------------------------------|
  | 'gdb-many-windows'                | show windows for GUD buffer, local/register buffer,            |
  |                                   | source buffer, i/o buffer, stack buffer and break-point buffer |
  | M-x gdb-many-windows              | toggle between simple layout and many window layout            |
  | M-x gdb-display-BUFFERTYPE-buffer | display specific buffer type where BUFFERTYPE can be           |
  |                                   | buffer types like breakpoints, stack, local etc                |
  | C-x k                             | kill GUD buffer                                                |
  |-----------------------------------+----------------------------------------------------------------|

  #+begin_src emacs-lisp
    (setq gdb-many-windows t)
  #+end_src

- left click on fringe area of source buffer to toggle break point
  at that line
- in break-point buffer, SPC toggles break-point, D deletes
  break-point, RET visits source file where break-point set
- stack buffer displays call stack with one line for each of the
  nested subroute call (stack frame). Select a stack frame with
  RET. Setting 'gdb-stack-buffer-addresses' shows each stack frame
  address
- local buffer displays value of local variables in current frame
  for simple data types. Click RET to edit value
- register buffer displays values held by registers. Click RET to
  edit values
- assembler buffer shows current frame as machine code. Break
  points can be set like in source buffer
- memory buffer lets you examine program memory

  |--------------------------------+------------------------------------------------------------------|
  | *C-x C-a C-w*                  | gud-watch (watch how variable changes each time)                 |
  |                                | arrays, structures etc are represented in tree format            |
  | *D*                            | gdb-var-delete (delete watch expression)                         |
  | 'gdb-show-changed-values'      | highlight values that have recently changed                      |
  | 'gdb-delete-out-out-scope'     | automatically delete watch expression which goes out of scope    |
  | 'gdb-use-colon-colon-notation' | display variable using FUNCTION::VARIABLE notation               |
  | 'gdb-speedbar-auto-raise'      | automatically raise speedbar every time watch expression updates |
  |--------------------------------+------------------------------------------------------------------|

** Lisp
- Emacs has major modes for several lisp variants
  - Emacs Lisp Mode: for Emacs Lisp source files. C-M-x to evaluate
    current top level lisp expression
  - List Interaction Mode: For interactive Emacs Lisp session. C-j
    to evaluate expression before point and insert its value at point
  - Lisp Mode: for source files in Lisp other than Emacs
    Lisp. C-M-x to evaluate current top level lisp expression
  - Inferior Lisp Mode: For interactive session using external Lisp
    run as sub-process
  - Scheme Mode: Like Lisp mode but for Scheme programs
  - Inferior Scheme Mode: List Inferior Lisp mode but for Scheme
- Files ending in '.el' are automatically visited in Emacs lisp
  mode. Compiled Emacs Lisp codes(byte code) ends in '.elc'. Native
  code ends in .eln
  |---------------------+--------------------------------------------------------------|
  | M-x load-file       | read a file name and execute its contents as                 |
  |                     | Emacs Lisp code                                              |
  | M-x load-library    | prompt a library name, search through each directory         |
  |                     | in load path trying to find a file library name.             |
  |                     | Prefers elc over el and eln over elc                         |
  | 'load-prefer-newer' | check all suffix and use the newest file                     |
  |                     | it also compiles new version in background                   |
  | 'load-path'         | list of directories to search for files to load              |
  |                     | directories are search in that order                         |
  |                     | nil stands for current default directory                     |
  | load or require     | make some libraries available on Emacs start up rather than  |
  |                     | manually loading it                                          |
  | autoload            | load the library when some command or function is invoked    |
  |                     | package-install takes care of placing lisp code in load-path |
  |---------------------+--------------------------------------------------------------|

- emacs-lisp-mode is the major mode for Emacs lisp. Following commands
  are globally available and can be used outside Emacs Lisp mode
  |-------------------+-----------------------------------------------|
  | *M-:*             | eval-expression                               |
  | *C-x C-e*         | eval-last-sexp                                |
  | *C-M-x*           | eval-defun                                    |
  | *M-x eval-region* | Evaluate all Emacs Lisp expressions in region |
  | *M-x eval-buffer* | Evaluate all Emacs lisp expressions in buffer |
  |-------------------+-----------------------------------------------|

- Emacs start with a buffer called *scratch* for evaluating Emacs
      Lisp expressions interactively. Its major mode is
      lisp-interaction-mode. C-j can be used to evaluate last
      expression and print result at point
      #+begin_src
	(setq initial-scratch-message nil)
      #+end_src
- M-x ielm can be used to start inferior lisp mode which acts like a
  REPL


[[https://github.com/daviwil/emacs-from-scratch/blob/master/show-notes/Emacs-Lisp-02.org][Emacs-Lisp-02]]
#+begin_src emacs-lisp
  (defun my/ielm-send-line-or-region ()
    (interactive)
    (unless (use-region-p)
      (forward-line 0)
      (set-mark-command nil)
      (forward-line 1))
    (backward-char 1)
    (let ((text (buffer-substring-no-properties (region-beginning)
						(region-end))))
      (with-current-buffer "*ielm*"
	(insert text)
	(ielm-send-input))

      (deactivate-mark)))

  (defun my/show-ielm ()
    (interactive)
    (select-window (split-window-vertically -10))
    (ielm)
    (text-scale-set 1))

  (define-key org-mode-map (kbd "C-M-x") 'my/ielm-send-line-or-region)
#+end_src
* Maintaining
** Version Control
- Emacs version control interface is called "VC". It works with
  multiple version control system like CVS, Subversion, Git etc
- Whenever a version controlled file is visited, VC is enabled.
- Emacs indicates back-end name and revision id in
  modeline. Character separating two can be:
  |-----+-------------------------------------------------------------|
  | '-' | work file is unmodified                                     |
  | ':' | work file is modified                                       |
  | '!' | file contains conflict or was removed from version control  |
  | '?' | file is under version control but missing from working tree |
  |-----+-------------------------------------------------------------|

  |-----------------------------+------------------------------------------------|
  | 'vc-handled-backends'       | set to nil to disable VC entirely              |
  | 'auto-revert-check-vc-info' | auto revert mode reliably update VC info every |
  |                             | 'auto-revert-interval'                         |
  |                             | seconds even if work file is unchanged         |
  |-----------------------------+------------------------------------------------|

- VC filesets is a collection of one or more files that a VC operation
  acts on. When a VC command is executed in a buffer visiting version
  controlled file, fileset is just one file. When it is executed from
  VC Directory buffer, it includes all the marked files. They don't
  persist across sessions
  |---------------+-------------------------------------------------------------------|
  | *C-x v v*     | vc-next-action                                                    |
  |               | performs next appropriate action on current vc fileset            |
  |               | it can be registering with version control or committing it       |
  |               | or unlocking or merging changes into it                           |
  |               | 1. If there is more than one file and if they have                |
  |               | inconsistent status, signal error                                 |
  |               | 2. If all files in set are registered and unchanged, do nothing   |
  |               | 3. If no files in set are registered, register it.                |
  |               | If no repo is active, Emacs prompts and creates one and registers |
  |               | files to it                                                       |
  |               | 4. If every file in set are new or changed, commit changes        |
  |               | Emacs pops up vc-log buffer                                       |
  |               | 5. If invoked from diff mode, applies the changes and pops up     |
  |               | vc-log buffer to commit                                           |
  | *C-u C-x v v* | Offer more control like name of version control system or         |
  |               | revision id etc                                                   |
  |---------------+-------------------------------------------------------------------|

- *vc-log* buffer is opened when committing change allowing to
  write commit message
- It can have one or more header lines like Author, Summary, Date or
  Fixes. Author can be used to credit author who is different from
  committer. Each header line must occupy a single line at top of
  buffer. First line that is not header is treated as addition
  commit message. Ex:
  Author: J. R. Hacker <jrh@example.com>
  |-----------+---------------------------------------------------|
  | *C-c C-c* | log-edit-done (commit changes and exit buffer)    |
  | *C-c C-f* | log-edit-show-files (list of files in fileset)    |
  | *C-c C-d* | log-edit-show-diff (show diff between fileset and |
  |           | last commited change)                             |
  | C-c C-w   | log-edit-generate-changelog-from-diff             |
  | M-n       | In vc-log buffer, browse through history          |
  | M-p       |                                                   |
  |-----------+---------------------------------------------------|

  |-----------------------+-----------------------------------------------------------|
  | *C-x v i*             | vc-register                                               |
  |                       | add/register each file in fileset but does not commit     |
  |                       | modeline shows @@                                         |
  | *C-x v =*             | vc-diff (diff between fileset and version started with    |
  |                       | before making change). Uses Diff mode                     |
  | *C-u C-x v =*         | prompt two revisions to compare                           |
  | M-x vc-ediff          | use ediff                                                 |
  | *C-x v D*             | vc-root-diff (compare entire working tree to              |
  |                       | version before making edits)                              |
  | *C-x v ~*             | vc-revision-other-window (retrieve file with given        |
  |                       | revision and open in another window)                      |
  |                       | This creates a file FILENAME.~REVISION~                   |
  | *C-x v g*             | vc-annotate (for each line show latest revision           |
  |                       | in which it was modified)                                 |
  |                       | vc-annotate-switches to customize options                 |
  |                       | red text is new, blue is old and intermediate colors      |
  |                       | indicate age                                              |
  |                       | Options in annotate buffer are listed in the next table   |
  | *C-x v l*             | vc-print-log (display log of changes for current fileset) |
  | *C-x v L*             | vc-print-root-log                                         |
  |                       | for entire version control directory                      |
  |                       | prefix N to specify maximum revision to display           |
  |                       | shows in compact form. RET to toggle long form            |
  | 'vc-log-show-limit'   | max revision to display in change log(default 2000)       |
  | *C-x v b l*           | vc-print-branch-log                                       |
  | *C-x v I*             | vc-log-incoming (display changes that pull will retrieve) |
  |                       | prefix prompts specific remote location                   |
  | *C-x v O*             | vc-log-outgoing (display changes that push will send)     |
  |                       | prefix prompts specific remote location                   |
  | *C-x v h*             | vc-region-history (display history of changes mad in      |
  |                       | the region of visited file)                               |
  | M-x vc-log-search RET | search change history for a pattern                       |
  | *C-x v u*             | vc-revert (revert work filesets to last revision.         |
  |                       | prompts before discarding all changes)                    |
  | 'vc-revert-show-diff' | t - show diff of work files and revision                  |
  | *C-x v G*             | vc-ignore (ignore some file like backups, object files)   |
  |                       | creates .gitignore                                        |
  | *C-x v x*             | vc-delete-file                                            |
  | *C-x v b c*           | vc-create-branch                                          |
  | *C-x v b l*           | vc-print-branch-log                                       |
  | *C-x v b s*           | vc-switch-branch                                          |
  |-----------------------+-----------------------------------------------------------|
  #+begin_src emacs-lisp
    (setq vc-revert-show-diff t)
  #+end_src
- Options in annotate buffer
  |---+---------------------------------------------------------------------|
  | p | annotate previous revision                                          |
  | n | annotate next revision                                              |
  | j | annotate revision indicated by current line                         |
  | a | annotate revision before the one indicated by current line          |
  |   | useful to see state of file before current line change was done     |
  | f | show in buffer the file revision indicated by current line          |
  | d | display diff between current line's revision and previous revision  |
  |   | useful to see what current line's revision actually changed in file |
  | D | display diff between current line revision and previous revision    |
  |   | for all files in change-set                                         |
  |   | useful to what current line's revision actually changed in tree     |
  | l | show log of current line's revision                                 |
  | w | annotate working revision                                           |
  |   | useful after n and p to return to revision you are editing          |
  | v | toggle annotation                                                   |
  |---+---------------------------------------------------------------------|
- Options in vc-change-log buffer
  |-----+--------------------------------------------------------------------------|
  | p   | move to previous revision entry                                          |
  | n   | move to next revision entry                                              |
  | a   | annotate revision on current line                                        |
  | f   | visit revision at current line                                           |
  | d   | display diff of revision at point and earlier revision for specific file |
  | D   | display diff of revision at point and earlier revision for fileset       |
  | RET | toggle compact style                                                     |
  |-----+--------------------------------------------------------------------------|
- VC Directory buffer allows viewing the version control status of
  files in directory tree and perform operations on them. It is mainly
  used to specify multi-file file-set
  |-------------------------------+------------------------------------------------------------|
  | *C-x v d*                     | vc-dir                                                     |
  |                               | shows only noteworthy status. up-to-date files are omitted |
  |                               | '*' indicates the file is part of fileset                  |
  |                               | edited - modified but not committed                        |
  |                               | added  - registered but not yet committed                  |
  |                               | unregistered - not under version control                   |
  | 'vc-directory-exclusion-list' | list of directories to exclude. .git is part of list       |
  | n                             | vc-dir-next-line                                           |
  | p                             | vc-dir-previous-line                                       |
  | TAB                           | vc-dir-next-directory                                      |
  | S-TAB                         | vc-dir-previous-directory                                  |
  | f OR RET                      | vc-dir-find-file                                           |
  | o                             | vc-dir-find-file-other-window                              |
  | m                             | vc-dir-mark (mark file or directory on current line)       |
  |                               | marked files or directories will be part of fileset        |
  |                               | if region is active, mark all files in region              |
  | M                             | vc-dir-mark-all-files                                      |
  | G                             | vc-dir-ignore (if VC is git, adds to .gitignore)           |
  | q                             | quit-window                                                |
  | u                             | vc-dir-unmark                                              |
  | U                             | vc-dir-unmark-all-files                                    |
  | x                             | vc-dir-hide-up-to-date                                     |
  | v                             | vc-next-action                                             |
  | S                             | vc-dir-search                                              |
  | Q                             | vc-dir-query-replace-regexp                                |
  | b c                           | vc-create-branch (create new branch)                       |
  | b l                           | vc-print-branch-log                                        |
  | b s                           | vc-switch-branch (switch to branch)                        |
  | d                             | vc-dir-clean-delete (delete current file or                |
  |                               | marked files)                                              |
  |                               | only useful for unregistered files                         |
  |-------------------------------+------------------------------------------------------------|

- Branches can be used to maintain separate stable and development
  versions of program
  |------------------------+---------------------------------------------------------|
  | *C-x v P*              | vc-push (update remote with current branch)             |
  | *C-x v O*              | vc-log-outgoing                                         |
  |                        | view what changes will be pushed                        |
  | *C-x v +*              | vc-pull (update current branch from remote)             |
  | *C-x v I*              | vc-log-incoming                                         |
  |                        | view what changes will be pulled                        |
  | *C-x v m*              | vc-merge (from another branch to current one)           |
  |                        | prompt for name of the branch to merge from             |
  |                        | conflict markers are put in file if there are conflicts |
  |                        | emacs places buffers with VC conflicts in smerge mode   |
  |------------------------+---------------------------------------------------------|

- We can delete and rename files
  |--------------------+--------------------------------------------------------|
  | M-x vc-delete-file | prompt for file name from working tree and stage       |
  |                    | for deletion when committing                           |
  | M-x vc-rename-file | rename from OLD to NEW and stage the renaming for      |
  |                    | committing. renamed file will have full change history |
  |                    | of original file                                       |
  |--------------------+--------------------------------------------------------|

- Revision tags are commonly used to identify releases that are
  distributed to user. TAGS can be used for diff or switching branches
- revision tag is simply a symbolic name for particular revision
  |--------------------+---------------------------------------------|
  | *C-x v s NAME RET* | vc-create-tag (snapshot)                    |
  | *C-x v r NAME RET* | vc-retrieve-tag (switch to the NAME branch) |
  |--------------------+---------------------------------------------|
- Edit the vc command before running
  |-----------+-------------------------------------------------------------------|
  | *C-x v !* | vc-edit-next-command                                              |
  |           | prefix command to edit underlying VC command that is about to run |
  |-----------+-------------------------------------------------------------------|
- VC Options
  |------------------------+---------------------------------------------------|
  | 'vc-make-backup-files' | make backup files                                 |
  | 'vc-follow-symlinks'   | ask - ask for confirmation                        |
  |                        | t - automatically follow link and visit real file |
  |                        | nil - just display warning message                |
  | 'vc-command-messages'  | display the shell command run for the VC action   |
  |------------------------+---------------------------------------------------|

  #+begin_src emacs-lisp
    (setq vc-follow-symlinks t)
    (setq vc-command-messages t)
  #+end_src
** Projects
- A project is a collection of files used for producing one or more
  programs. Files belonging to a project are stored in hierarchy of
  directories; the top-level directory is called project root
- Emacs supports VC and EDE directories as projects
- Current project is determined by default-directory of current
  buffer, if it is considered a project
  |----------------------------+-------------------------------------------------------------|
  | *C-x p !*                  | project-shell-command                                       |
  | *C-x p &*                  | project-async-shell-command                                 |
  | *C-x p b*                  | project-switch-to-buffer                                    |
  |                            | also includes compilation buffer etc                        |
  | *C-x p c*                  | project-compile (run compilation in project's               |
  |                            | root directory)                                             |
  | *C-x p d*                  | project-dired                                               |
  | *C-x p e*                  | project-eshell                                              |
  | *C-x p f*                  | project-find-file                                           |
  |                            | visit a file. only file's name can be provided              |
  |                            | without giving full path                                    |
  |                            | completion candidates only consider files                   |
  |                            | belonging to project                                        |
  |                            | if there is file name at point, that is offered             |
  |                            | as default                                                  |
  | *C-x p g*                  | project-find-regexp                                         |
  |                            | similar to rgrep but only searches files in                 |
  |                            | current project                                             |
  |                            | with prefix, prompt for sub-directory of                    |
  |                            | project to limit the search                                 |
  | *C-x p k*                  | project-kill-buffers (kill all buffers                      |
  |                            | belonging to current project)                               |
  | *C-x p p*                  | project-switch-project (run an emacs command                |
  |                            | for another project)                                        |
  |                            | prompts both project and command to run                     |
  | *C-x p r*                  | project-query-replace-regexp (like query-replace)           |
  | *C-x p s*                  | project-shell (run an inferior shell in project's root dir) |
  | *C-x p v*                  | project-vc-dir                                              |
  | 'project-list-file'        | file in which Emacs records list of known projects          |
  | M-x project-search         | interactive variant of project-find-regexp                  |
  | M-x project-forget-project | remove a known project from project-list-file               |
  |----------------------------+-------------------------------------------------------------|

- Ignore case when reading file name completion. Useful for C-x p f
- Remove --null option from grep as it is not supported in all
  variants. Needed for C-x p g
  #+begin_src emacs-lisp
      (setq read-file-name-completion-ignore-case t
	    xref-search-program-alist '((grep . "xargs -0 grep <C> -snHE -e <R>")))
  #+end_src

** Xref

:PROPERTIES:
:ID:       38e57c3f-454a-419f-993b-b008de5e42a9
:END:
- Emacs provides unified interface called xref to quickly find
  where each identifier is defined and referenced. This is also
  useful in non-prog modes for chapters, sections etc
- xref relies on back-end provided by major mode.
  - Emacs includes etags command which can be used by major modes to
    extract reference to tags-table. The tags-table needs to kept up
    to date and will be referred by the back-end
  - Major modes like Emacs Lisp provide symbol by consulting built in
    documentation, libraries etc
  - If Eglot is activated, it provides data LSP to back-end
  |---------------------+-------------------------------------------------------|
  | *M-.*               | xref-find-definitions (find definition of identifier) |
  |                     | prompt identifier if there is none at point or        |
  |                     | if prefix is given                                    |
  |                     | pops a new xref buffer if more than one match         |
  | *C-M-.*             | xref-find-apropos (find all identifiers whose name    |
  |                     | matches pattern)                                      |
  |                     | similar to M-. except it does regexp matching         |
  |                     | always pops a new xref buffer                         |
  | C-x 4 .             | xref-find-definitions-other-window                    |
  | *M-,*               | xref-go-back (go back to where you invoked M-.)       |
  | *C-M-,*             | xref-go-forward                                       |
  | M-x xref-etags-mode | switch to etags mode. make sure to run etags in       |
  |                     | source directory                                      |
  |---------------------+-------------------------------------------------------|

- xref buffer commands
  |---------+------------------------------------------------------------------------|
  | *RET*   | xref-goto-xref (goto buffer referenced by current line)                |
  |         | with prefix, also close xref window                                    |
  | *n*     | xref-next-line (move to next reference and display it in other window) |
  | *p*     | xref-prev-line                                                         |
  | *N*     | xref-next-group (there can be matches in a source file                 |
  |         | and there can many source file. each source file is                    |
  |         | a group in this case)                                                  |
  | *P*     | xref-prev-group                                                        |
  | r       | xref-query-replace-in-results                                          |
  |         | perform interactive query replace on references that match pattern     |
  | g       | xref-revert-buffer (refresh xref contents)                             |
  | *M-,*   | xref-go-back                                                           |
  | *C-M-,* | xref-go-forward                                                        |
  |         | quit xref window and jump to previous xref stack location              |
  | q       | xref-quit                                                              |
  |---------+------------------------------------------------------------------------|

- Identifier search
  |----------------------------------------+---------------------------------------|
  | *M-?*                                  | xref-find-reference                   |
  |                                        | find all references to identifier at  |
  |                                        | point                                 |
  |                                        | this searches not just definitions    |
  |                                        | but all the references                |
  | r OR M-x xref-query-replace-in-results | interactively replace regexp with in  |
  |                                        | the names of all identifiers shown in |
  |                                        | buffer                                |
  |----------------------------------------+---------------------------------------|

- Inquiries
  |---------+---------------------|
  | *C-M-i* | completion-at-point |
  |---------+---------------------|

* Abbrevs
- There are three abbreviation facilities: one defined by user where
  for ex: typing foo<SPC> might expand to "find outer otter". Other
  one is called dynamic abbrev expansion which looks at other words
  in buffer to complete current word. Third called hippie expansion
  generalizes expansion
- Abbrev expand only when Abbrev minor mode is active. It can have
  global and mode specific abbrev; mode specific takes precedence
- Abbrev can be defined even without active Abbrev mode. It can also
  be expanded manually using expand-abbrev
- In Abbrev mode, any character that is not a word char expands an
  abbrev
- Abbrev preserves case. Foo - Find outer otter vs foo - find outer otter
  |------------------------------+--------------------------------------------------------|
  | *C-x a g*                    | add-global-abbrev (define abbrev using                 |
  |                              | prefix number of words before point)                   |
  |                              | if region is active, use that as expansion             |
  |                              | negative prefix removes abbrev                         |
  | *C-x a l*                    | add-mode-abbrev                                        |
  | *C-x a i g*                  | inverse-add-global-abbrev (define expansion            |
  |                              | using abbrev word in buffer)                           |
  | *C-x a i l*                  | inverse-add-mode-abbrev                                |
  | M-x define-global-abbrev     | prompt abbrev and expansion                            |
  | M-x define-mode-abbrev       | prompt abbrev and expansion                            |
  | M-x kill-all-abbrevs         | discard all abbrev                                     |
  | *M-'*                        | abbrev-prefix-mark                                     |
  |                              | re M-' foo expands to refind outer otter               |
  | *C-x a e*                    | expand-abbrev                                          |
  | foo C-q                      | don't expand foo                                       |
  | M-x unexpand-abbrev          | undo expansion                                         |
  | M-x expand-region-abbrevs    | expand abbrevs in region                               |
  | M-x list-abbrevs             | with prefix list only local abbrevs                    |
  | M-x edit-abbrevs             | edit abbrevs                                           |
  | M-x write-abbrev-file        | write to file all abbrevs. prompts for file            |
  | M-x read-abbrev-file         | read the abbrev file and define abbrevs                |
  | M-x insert-abbrevs           | insert all abbrevs and expansions in current buffer    |
  | 'abbrev-file-name'           | file name where abbrevs are stored by default          |
  | M-x quietly-read-abbrev-file | read abbrev file without message (good for init files) |
  | 'save-abbrevs'               | if t, prompt to save abbrevs                           |
  |                              | if silently, save without asking                       |
  | 'abbrev-suggest'             | t - show hint in echo area if there is an abbrev       |
  |------------------------------+--------------------------------------------------------|

  #+begin_src emacs-lisp
    (setq abbrev-file-name (expand-file-name "abbrev_defs" user-emacs-directory))
    (setq save-abbrevs 'silently)
    (if
	(file-exists-p abbrev-file-name)
	(quietly-read-abbrev-file))
    (abbrev-mode -1)			; don't expand automatically on space or punctuation
    (setq abbrev-suggest t)
  #+end_src

- dynamic abbrevs determines meaning of abbrevs from contents of
  buffer
- A numeric argument to ‘M-/’ says to take the second, third,
  etc. distinct expansion found looking backward from point.
  Repeating ‘M-/’ searches for an alternative expansion by looking
  farther back.  After scanning all the text before point, it searches
  the text after point.  The variable ‘dabbrev-limit’, if non-‘nil’,
  specifies how far away in the buffer to search for an expansion.

    |---------------------------------+----------------------------------------------------------------|
    | *M-/*                           | dabbrev-expand                                                 |
    |                                 | Negative prefix searches buffer after point first              |
    | *C-M-/*                         | dabbrev-completion                                             |
    |                                 | instead of trying possible expansions one by one complete till |
    |                                 | common chars                                                   |
    | *SPC M-/*                       | after expansion of a word, copy next word that follows         |
    |                                 | if they have nothing in common, display a list of completions  |
    | 'dabbrev-limit'                 | number of chars in buffer to search for expansion              |
    | 'dabbrev-check-other-buffers'   | search for abbrevs in other buffers pointed by                 |
    |                                 | dabbrev-select-buffers-function                                |
    | dabbrev-select-buffers-function | function that selects buffers that should be searched          |
    | 'dabbrev-check-all-buffers'     | search all buffers for expansion except buffer named in        |
    |                                 | dabbrev-ignored-buffer-names or dabbrev-ignored-buffer-regexps |
    |                                 |                                                                |
    |---------------------------------+----------------------------------------------------------------|
    #+begin_src emacs-lisp
      (global-set-key (kbd "M-/") 'hippie-expand)
    #+end_src
* Shell
|--------------------------------------+---------------------------------------------------------------------|
| *M-!*                                | shell-command (run shell command and                                |
|                                      | display output in echo area                                         |
|                                      | or separate buffer based on size)                                   |
|                                      | with prefix, put result at point                                    |
| *M-\vert*                            | shell-command-on-region                                             |
|                                      | run shell command with region as input                              |
|                                      | and display result in echo area                                     |
|                                      | if prefixed, replace region with result                             |
| *M-&*                                | async-shell-command (run command as if                              |
|                                      | it is ended with &)                                                 |
|                                      | result will be sent to Async Shell Command                          |
| M-x shell                            | run sub-shell with input and output via                             |
|                                      | Emacs buffer                                                        |
| M-x term                             | run subshell with input and output via                              |
|                                      | Emacs buffer. Supports full emulation                                                           |
| M-x eshell                           | shell implemented entirely in Emacs                                 |
| 'async-shell-command-buffer'         | tells what to do when more than one async command are run           |
| 'async-shell-command-display-buffer' | nil - wait till there is output to display to display output buffer |
| 'shell-command-prompt-show-cwd'      | show current directory in prompt                                    |
| ~/.emacs_SHELLNAME                   | execute the files based on shell used after M-x shell               |
| ~/.emacs.d/init_SHELLNAME.sh         | if ~/.emacs_SHELLNAME is not found, use this one                    |
|--------------------------------------+---------------------------------------------------------------------|

- Shell mode Most shell commands will need to be prefixed by
  C-c. Ex: to run C-c to kill, C-c C-c. Similarly to kill word
  before point C-c C-w etc
  |-----+--------------------------------------------------------------------------|
  | RET | comint-send-input (send current line as input to subshell)               |
  |     | can also invoke RET anywhere in buffer                                   |
  | TAB | completion-at-point (complete file name, variables, command history etc) |
  | C-d | comint-delchar-or-maybe-eof                                              |
  |-----+--------------------------------------------------------------------------|

  - Shell history
  |---------+--------------------------------------------------------------|
  | M-p     | comint-previous-input                                        |
  | M-n     | comint-next-input                                            |
  | M-r     | comint-history-isearch-backward-regexp                       |
  | C-c C-l | comint-dynamic-list-input-ring                               |
  |         | display buffer's history of shell commands in another window |
  | C-c C-p | comint-previous-prompt                                       |
  | C-c C-n | comint-next-prompt                                           |
  |---------+--------------------------------------------------------------|

  - Terminal Emulator
  |-----------------+------------------------------------------------------------------------------------|
  | M-x term        | run subshell in terminal emulator                                                  |
  |                 | creates *terminal* buffer and uses Term mode which has line mode and char mode     |
  |                 | line mode acts like shell mode. In char mode, each char is sent to shell directly  |
  |                 | Term mode recognizes ansi standard VT100 style escape sequences like xterm         |
  |                 | we can run emacs inside of term                                                    |
  | C-c C-j         | term-line-mode                                                                     |
  | C-c C-k         | term-char-mode                                                                     |
  | C-c C-c         | term-interrupt-subjob (send C-c to subshell in - char mode only)                   |
  | C-c CHAR        | like C-x CHAR in normal emacs (C-c o is like C-x o - char mode only)               |
  | C-c C-q         | term-pager-toggle (both in line and char mode)                                     |
  |                 | each time term receive more output, display one screen at a time like more command |
  | M-x serial-term | prompt for serial port name and speed and open new Term mode buffer                |
  |-----------------+------------------------------------------------------------------------------------|

  #+begin_src emacs-lisp
    (setq async-shell-command-display-buffer nil
          async-shell-command-buffer 'new-buffer
	  shell-command-prompt-show-cwd t)
  #+end_src

* Saving Emacs Sessions
|-----------------------------+-----------------------------------------------|
| 'desktop-restore-frames'    | restore window and frame configs also along   |
|                             | with buffers                                  |
| 'desktop-files-not-to-save' | regexp telling what files to ignore.          |
|                             | set to nil to save all files                  |
| M-x desktop-save            | manually save desktop                         |
| desktop-save-mode           | setting t will save and restore automatically |
| 'desktop-path'              | directory where desktop is saved              |
| 'desktop-save'              | t - always save                               |
|                             | ask - always ask                              |
| 'desktop-restore-eager'     | number of buffers to load immediately. others |
|                             | are loaded lazily                             |
| M-x desktop-clear           |                                               |
| savehist-mode               | save minibuffer history                       |
| 'savehist-file'             | file where minibuffer history is saved        |
| 'desktop-auto-save-timeout' | how frequently to save desktops               |
|-----------------------------+-----------------------------------------------|

#+begin_src emacs-lisp
  (setq desktop-restore-eager 2
	desktop-lazy-idle-delay 2
	desktop-load-locked-desktop 'ask
	desktop-restore-frames 1
	desktop-save t
	desktop-path (list user-emacs-directory)
	desktop-auto-save-timeout 60
	desktop-base-file-name "emacs.desktop"
	desktop-globals-to-save
	'(desktop-missing-file-warning tags-file-name tags-table-list search-ring regexp-search-ring register-alist file-name-history)
	desktop-locals-to-save
	'(buffer-undo-list eww-history-position desktop-locals-to-save truncate-lines case-fold-search case-replace fill-column overwrite-mode change-log-default-name line-number-mode column-number-mode size-indication-mode buffer-file-coding-system buffer-display-time indent-tabs-mode tab-width indicate-buffer-boundaries indicate-empty-lines show-trailing-whitespace))
  (desktop-save-mode t)

  (setq savehist-file (expand-file-name "savehist" user-emacs-directory))
  (savehist-mode 1)

#+end_src

[[https://www.emacswiki.org/emacs/SavePlace][Emacs Wiki]]
- When you visit a file, point goes to the last place where it was
  when you previously visited the same file.
  #+begin_src emacs-lisp
    (save-place-mode 1)
    (setq save-place-file (expand-file-name "saveplace" user-emacs-directory))
    (setq save-place-forget-unreadable-files t) ; set to nil if emacs is slow to exit
  #+end_src
* Packages
- Packages are Emacs Lisp libraries. For a package to be available
  in future sessions, compile it and put it in path of lisp
  libraries
- Packages can also be provided by package-archives which are large
  collection of Emacs Lisp packages. Emacs includes a facility to
  easily download and install packages from such archives
  |----------------------------------+--------------------------------------------------------------------------|
  | M-x list-packages                | List all available packages in archive in                                |
  |                                  | Packages buffer                                                          |
  |                                  | install or uninstall of package can be done                              |
  |                                  | via this buffer                                                          |
  | C-h P                            | describe-package                                                         |
  | h                                | package-menu-quick-help                                                  |
  | RET                              | package-menu-describe-package                                            |
  | i                                | package-menu-mark-install                                                |
  |                                  | (adds I flag at the start)                                               |
  | d                                | package-menu-mark-delete (add D flag)                                    |
  | ~                                | package-menu-mark-obsolete-for-deletion                                  |
  | u                                | package-menu-mark-unmark (remove any                                     |
  |                                  | install or delete marks on current line)                                 |
  | U                                | package-menu-mark-upgrades (mark all packages                            |
  |                                  | with newer available version for upgrade)                                |
  | x                                | package-menu-execute (delete packages                                    |
  |                                  | marked for delete and install packages                                   |
  |                                  | marked for upgrade)                                                      |
  | g                                | revert-buffer (refresh package list)                                     |
  | / k                              | package-menu-filter-by-keyword                                           |
  | / n                              | package-menu-filter-by-name                                              |
  | / /                              | package-menu-clear-filter                                                |
  | M-x package-install              | prompt for package and install                                           |
  |                                  | automatically installs dependencies                                      |
  | 'package-archives'               | list of packages archives known to Emacs                                 |
  | 'package-pinned-packages'        | if a packages is in multiple archives with                               |
  |                                  | different version, then tell which one                                   |
  |                                  | to install. it is a list of package/archive                              |
  |                                  | pairs                                                                    |
  | 'package-archive-priorities'     | set priority of archives (higher number is                               |
  |                                  | high priority)                                                           |
  | 'package-menu-hide-low-priority' | hide package if high priority version of                                 |
  |                                  | it is available from other archives                                      |
  | 'load-path'                      | list of directories to search for files                                  |
  |                                  | to load                                                                  |
  |                                  | package-install updates it with path of                                  |
  |                                  | package location                                                         |
  | -q or --no-init-file             | if Emacs is started with this option, don't                              |
  |                                  | load any packages                                                        |
  | 'package-enable-at-startup'      | nil - don't load packages at start                                       |
  | M-x package-activate-all         | make installed packages available                                        |
  | 'package-load-list'              | decides which packages to load                                           |
  | M-x package-install-file         | each package downloaded from archive is a single file or a tar file with |
  |                                  | multiple Lisp sources and other files. This command installs package     |
  |                                  | directly from a package file                                             |
  | 'package-user-dir'               | location where package files are placed                                  |
  | 'package-directory-list'         | used for system-wide packages                                            |
  |----------------------------------+--------------------------------------------------------------------------|

* Use Package
- declarative way to setup package
- allow gathering all config of package in one place
- reduce code duplication
- make startup time short
- errors during startup only disable specific package causing error
- allow byte compilation of init file
** Basics
- load package unconditionally like require. Package should be already
  installed
  #+begin_quote
    (use-package foo)
  #+end_quote
- evaluate before package is loaded with :init
  #+begin_quote
    (use-package foo
      :init
      (setq foo-variable t))
  #+end_quote
- execute code after package is loaded. for lazy loading defer this
  execution until load actually occurs
  #+begin_quote
    (use-package foo
      :init
      (setq foo-variable t)
      :config
      (foo-mode 1))
  #+end_quote
- load package only when needed to speed up Emacs startup
  #+begin_quote
    (use-package foo
    :defer t)
  #+end_quote
- provide your own autoload with :commands and bind keys
  #+begin_quote
    (use-package color-moccur
      :commands (isearch-moccur isearch-all)
      :bind (("M-s O" . moccur)
             :map isearch-mode-map
	     ("M-o" . isearch-moccur)
	     ("M-O" . isearch-moccur-all))
      :init
      (setq isearch-lazy-highlight t)
      :config
      (use-package moccur-edit))
  #+end_quote
** Loading
- use package loads a library. if package has more than one library,
  it should be loaded with another use-package declaration
- A non nil value to :defer stops immediate loading of package
  A numeric value N indicates package should be loaded after Emacs is
  idle for N seconds
- Package can be force loaded with :demand t. If both :demand and
  :defer are used, :defer takes precedence
- conditional loading can be done with :if, :when and :unless by
  passing emacs lisp form. Common use cases are shown below
  #+begin_quote
    :if (eq system-type 'gnu/linux)
    :if (memq window-system '(ns x))
    :if (package-installed-p 'foo)
  #+end_quote
- load packages in sequence with dependency using :after. This
  guarantees package is not loaded until it's dependents are also
  loaded
  #+begin_quote
    :after (foo bar) ; load the package after foo and bar are loaded
    :after (:all foo bar) ; same as above
    :after (:any foo bar) ; load package when either foo or bar are loaded
  #+end_quote
- never load a package if dependencies are not met with :require
  #+begin_quote
    (use-package abbrev
      :requires foo)
  #+end_quote
** Configuring
- Evaluates :preface first(only after :disabled and :ensure). Avoid
  side effects in :preface since it is evaluated twice: during load
  and byte compilation
- :init is evaluated before package load. It is run unconditionally
  even if package does not exist.
- :config is evaluated after package load
- Avoid :preface, :config and :init. Instead prefer auto-loading
  keywords like :bind, :hook, :mode
** Key Binding
*** Global
- bind keys globally with :bind and passing a cons of the form (KEY
  . COMMAND). This creates an autoload and defers loading the
  package. It bind the key globally
  #+begin_quote
    (use-package ace-jump-mode
      :bind ("C-." . ace-jump-mode))
  #+end_quote
- Multiple key-binds can be done
  #+begin_quote
    (use-package hi-lock
      :bind (("M-o l" . highlight-lines-matching-regeexp)
             ("M-o w" . highlight-phrase))
  #+end_quote
- special keys should be written in angle brackets. standalone special
  keys can be written in square brackets
  #+begin_quote
    (use-package helm
      :bind (("M-<f5>" . helm-M-x)
             ([f10] . helm-recentf))
  #+end_quote
- remapping works. following will rebind fill-paragraph to
  unfill-toggle
  #+begin_quote
    (use-package unfill
      :bind ([remap fill-paragraph] . unfill-toggle))
  #+end_quote
*** Local
- Key can be mapped to local keymap using :map. Any bind before first
  map are applied to global map
  #+begin_quote
     (use-package term
       :bind (("C-c t" . term)
              :map term-mode-map
              ("M-p" . term-send-up)
              ("M-n" . term-send-down)
              :map term-raw-map
              ("M-o" . other-window)
              ("M-p" . term-send-up)
              ("M-n" . term-send-down)))
  #+end_quote

*** Keymaps
- keys can be mapped to keymaps instead of commands using :bind-keymap
  #+begin_quote
     (use-package foo
       :bind-keymap ("C-c p" . foo-command-map))
  #+end_quote
*** Repeat Maps
- Using :repeat-map and passing a map name, will bind all following
  keys inside that map and set repeat-map property for each bound
  command. Specifying :exit will allow keys defined after it to be
  used in repeat-map but after using it, repeat-map won't be
  available. Specifying :continue forces setting repeat-map
  property. Both snippets below are equivalent
  #+begin_quote
     (use-package git-gutter+
       :bind
       (:repeat-map my/git-gutter+-repeat-map
        ("n" . git-gutter+-next-hunk)
        ("p" . git-gutter+-previous-hunk)
        ("s" . git-gutter+-stage-hunks)
        ("r" . git-gutter+-revert-hunk)
        :exit
        ("c" . magit-commit-create)
        ("C" . magit-commit)
        ("b" . magit-blame)))
     (use-package git-gutter+
       :bind
       (:repeat-map my/git-gutter+-repeat-map
        :exit
        ("c" . magit-commit-create)
        ("C" . magit-commit)
        ("b" . magit-blame)
        :continue
        ("n" . git-gutter+-next-hunk)
        ("p" . git-gutter+-previous-hunk)
        ("s" . git-gutter+-stage-hunks)
        ("r" . git-gutter+-revert-hunk)))
  #+end_quote
*** Display personal keybindings
- M-x describe-personal-keybindings
** Hooks
- Add functions to hook using :hook. Exclude -hook suffix
  #+begin_quote
    (use-package company
      :hook (prog-mode . company-mode))
  #+end_quote
- If package name is same as hook, it can be further simplified
  #+begin_quote
    (use-package company
      :hook (prog-mode text-mode))
  #+end_quote
** User Options
- Similar to M-x customize, variables can be set using :custom. This
  is better than setq in :config
  #+begin_quote
     (use-package comint
       :defer t
       :custom
       (comint-buffer-maximum-size 20000 "Increase comint buffer size.")
       (comint-prompt-read-only t "Make the prompt read only."))
  #+end_quote
** Installing
- The :ensure makes use-package to install a package using Emacs
  package manager
- Package can be pinned to specific archive - gnu and nongnu
  #+begin_quote
     (use-package company
       :ensure t
       :pin gnu)   ; GNU ELPA
  #+end_quote
- Disabling a package can be done with :disabled
  #+begin_quote
     (use-package foo
       :disabled)
  #+end_quote
* Theme
** Solarized
#+begin_src
    (unless (package-installed-p 'solarized-theme)
      (package-refresh-contents)
      (package-install 'solarized-theme))

    (setq solarized-distinct-fringe-background t ; make the fringe stand out from the background
	  solarized-use-variable-pitch nil       ; Don't change the font for some headings and titles
	  solarized-high-contrast-mode-line nil  ; make the modeline high contrast
	  solarized-use-less-bold t              ; Use less bolding
	  solarized-use-more-italic t            ; Use more italics
	  solarized-emphasize-indicators nil     ; Use less colors for indicators like flycheck
	  solarized-scale-org-headlines t        ; Change size of org-mode headlines
	  solarized-scale-markdown-headlines t   ; Change the size of markdown-mode headlines (off by default)
	  x-underline-at-descent-line t
	  solarized-height-minus-1 1.0
	  solarized-height-plus-1 1.1
	  solarized-height-plus-2 1.2
	  solarized-height-plus-3 1.3
	  solarized-height-plus-4 1.4)
    (load-theme 'solarized-dark t)
#+end_src

** DOOM
#+begin_src
     (unless (package-installed-p 'doom-themes)
       (package-refresh-contents)
       (package-install 'doom-themes))
     (require 'doom-themes)
     (setq doom-themes-enable-bold t
	   doom-themes-enable-italic t)
     (load-theme 'doom-dracula t)
     (doom-themes-visual-bell-config)
     (doom-themes-org-config)
#+end_src
** Mods
#+begin_src emacs-lisp
  (use-package modus-themes
    :defer nil
    :custom
    (modus-themes-inhibit-reload nil "reload active theme when an option is changed through the Customize UI")
    (modus-themes-bold-constructs t  "Use bold for code syntax highlighting and related")
    (modus-themes-italic-constructs t "Use bold for code syntax highlighting and related ")
    (modus-themes-mode-line '(accented borderless (padding 4) (height 0.9)) "Model")
    (modus-themes-hl-line '(intense) "amplify color in use for hl-line-mode heading sizes and colors")
    :config
    (setq modus-themes-headings '((1 . (bold rainbow 1.5))
			    (2 . (bold rainbow 1.4))
			    (3 . (bold rainbow 1.2))
			    (t . (monochrome ))))
    (load-theme 'modus-vivendi t))
#+end_src

* Eglot
- eglot is Emacs LSP client
- Refer [[*Xref][Xref]]
  #+begin_src emacs-lisp
    (use-package eglot
      :custom
      (eglot-autoreconnect t "Automatically reconnect to LSP server")
      (eglot-connect-timeout 30 "Time out connection attempt after specified seconds")
      (eglot-sync-connect nil "Don't block Emacs user interface when connecting")
      (eglot-events-buffer-size 200000000 "Max number of chars on event buffer")
      (eglot-autoshutdown t "Shutdown language server when last buffer managed by it is killed")
      (eglot-confirm-server-initiated-edits nil "don't confirm server initiated edits with user")
      (eglot-ignored-server-capabilities nil "LSP capabilities that should not be used")
      (eglot-extend-to-xref t "activate eglot in non-project cross-referenced files")
      (eglot-send-changes-idle-time 1 "Send changes to LSP server after so many idle seconds")
      :bind
      ("C-c l a" . eglot-code-actions)
      ("C-c l c" . eglot-reconnect)
      ("C-c l b e" . eglot-events-buffer)
      ("C-c l b s" . eglot-stderr-buffer)
      ("C-c l f b" . eglot-format-buffer)
      ("C-c l f f" . eglot-format)
      ("C-c l l" . eglot)
      ("C-c l r" . eglot-rename)
      ("C-c l s" . eglot-shutdown-all)
      :config
      (setq exec-path (append exec-path '("~/.cache/emacs/lsp/pylsp/bin"))))
    ;;   :config
    ;;
    ;; (add-to-list 'eglot-server-programs '(python-base-mode . ("~/.cache/emacs/lsp/pylsp/bin/pylsp" "--verbose"))))

    ;; (add-to-list 'eglot-server-programs '(python-base-mode . ("~/.cache/emacs/lsp/basedpyright/bin/basedpyright-langserver" "--stdio"))))
  #+end_src

** Python
[[https://robbmann.io/posts/emacs-eglot-pyrightconfig][Virtual Environments with Eglot, Tramp, and Pyright]]
#+begin_src
(defun my/pyrightconfig-write (virtualenv)
  (interactive "DEnv: ")

  (let* (;; file-truename and tramp-file-local-name ensure that neither `~' nor
         ;; the Tramp prefix (e.g. "/ssh:my-host:") wind up in the final
         ;; absolute directory path.
         (venv-dir (tramp-file-local-name (file-truename virtualenv)))

         ;; Given something like /path/to/.venv/, this strips off the trailing `/'.
         (venv-file-name (directory-file-name venv-dir))

         ;; Naming convention for venvPath matches the field for
         ;; pyrightconfig.json.  `file-name-directory' gets us the parent path
         ;; (one above .venv).
         (venvPath (file-name-directory venv-file-name))

         ;; Grabs just the `.venv' off the end of the venv-file-name.
         (venv (file-name-base venv-file-name))

         ;; Eglot demands that `pyrightconfig.json' is in the project root
         ;; folder.
         (base-dir (vc-git-root default-directory))
         (out-file (expand-file-name "pyrightconfig.json" base-dir))

         ;; Finally, get a string with the JSON payload.
         (out-contents (json-encode (list :venvPath venvPath :venv venv))))

    ;; Emacs uses buffers for everything.  This creates a temp buffer, inserts
    ;; the JSON payload, then flushes that content to final `pyrightconfig.json'
    ;; location
    (with-temp-file out-file (insert out-contents))))
#+end_src

Create a .dir-locals.el file in root of folder with contents like 
((python-base-mode . ((pyvenv-workon . "pyspark"))))
#+begin_src emacs-lisp
  (use-package pyvenv
    :ensure t
    ;; :vc (:url "https://github.com/jorgenschaefer/pyvenv") 
    :hook
    (python-base-mode)
    :config
    (setenv "WORKON_HOME" "~/.cache/venvs")
    (pyvenv-tracking-mode 1))

#+end_src
#+begin_src emacs-lisp
  (use-package python
    :init
    (let ((pylspdir (expand-file-name "lsp/pylsp" user-emacs-directory)))
      (unless (file-directory-p pylspdir)
	(make-directory pylspdir t)
	(shell-command (concat "python3 -m venv " pylspdir))
	(shell-command (concat ". " pylspdir "/bin/activate && pip install -U pip python-lsp-server[all]"))))
    :config
    (add-hook 'python-base-mode-hook 'eglot-ensure)
    :bind
    ("C-c C-c" . python-shell-send-buffer)
    ("C-c C-e" . python-shell-send-statement)
    ("C-c C-r" . python-shell-send-region)
    ("C-c C-p" . run-python)
    ("C-c C-z" . python-shell-switch-to-shell)
    ("C-c C-t c" . python-skeleton-class)
    ("C-c C-t d" . python-skeleton-def)
    ("C-c C-t f" . python-skeleton-for)
    ("C-c C-t i" . python-skeleton-if)
    ("C-c C-t t" . python-skeleton-import)
    ("C-c C-t w" . python-skeleton-while))
#+end_src
** Common Lisp
#+begin_src
  (use-package slime
    :ensure t
    :config
    (setq inferior-lisp-program "/bin/sbcl"))
#+end_src
** C
#+begin_src
  (add-hook 'c-mode-hook 'eglot-ensure)
#+end_src
** Go
#+begin_src
  (let ((goplsdir (expand-file-name "lsp/gopls" user-emacs-directory)))
    (unless (file-directory-p goplsdir)
      (make-directory goplsdir t)
      (setenv "GOPATH" goplsdir)
      (shell-command "go install golang.org/x/tools/gopls@latest")))

  (add-hook 'go-mode-hook
	    (progn
	      (setenv "PATH" (concat (getenv "PATH") ":" (expand-file-name "lsp/gopls" user-emacs-directory)))
	      (setq exec-path (split-string (getenv "PATH") path-separator))
	      (with-eval-after-load 'eglot
		(add-to-list 'eglot-server-programs '(go-mode "~/.cache/emacs/lsp/gopls/bin/gopls" "-verbose")))
	      'eglot-ensure))

  (unless (package-installed-p 'go-mode)
    (package-refresh-contents)
    (package-install 'go-mode))

  ;;  The project package does not natively know about GOPATH or Go
  ;;  modules. Fortunately, you can give it a custom hook to tell it to
  ;;  look for the nearest parent go.mod file (that is, the root of the
  ;;  Go module) as the project root
  (require 'project)
  (defun project-find-go-module (dir)
    (when-let ((root (locate-dominating-file dir "go.mod")))
      (cons 'go-module root)))
  (cl-defmethod project-root ((project (head go-module)))
    (cdr project))
  (add-hook 'project-find-functions #'project-find-go-module)


  ;; Optional: install eglot-format-buffer as a save hook.
  ;; The depth of -10 places this before eglot's willSave notification,
  ;; so that that notification reports the actual contents that will be saved.
  (defun eglot-format-buffer-on-save ()
    (add-hook 'before-save-hook #'eglot-format-buffer -10 t))
  (add-hook 'go-mode-hook #'eglot-format-buffer-on-save)

#+end_src

** Java
#+begin_src
  (let ((jdtlsdir (expand-file-name "lsp/jdtls" user-emacs-directory))
	(mvndir (expand-file-name "lsp/mvn" user-emacs-directory)))
    (unless (file-directory-p jdtlsdir)
      (make-directory jdtlsdir t)
      (url-copy-file "https://download.eclipse.org/jdtls/milestones/1.16.0/jdt-language-server-1.16.0-202209291445.tar.gz" "/tmp/jdtls.tar.gz" t t)
      (shell-command (concat "tar -xzf /tmp/jdtls.tar.gz -C"  jdtlsdir)))
    (unless (file-directory-p mvndir)
      (make-directory mvndir t)
      (url-copy-file "https://dlcdn.apache.org/maven/maven-3/3.8.7/binaries/apache-maven-3.8.7-bin.tar.gz" "/tmp/mvn.tar.gz" t t)
      (shell-command (concat "tar -xzf /tmp/mvn.tar.gz -C"  mvndir))))

  (let ((jdtlsdir (expand-file-name "lsp/jdtls/bin" user-emacs-directory))
	(mvndir (expand-file-name "lsp/mvn/apache-maven-3.8.7/bin" user-emacs-directory)))
    (add-to-list 'tramp-remote-path jdtlsdir)
    (add-to-list 'tramp-remote-path mvndir)
    (setenv "PATH" (concat (getenv "PATH") ":" jdtlsdir))
    (setenv "PATH" (concat (getenv "PATH") ":" mvndir))
    (setq exec-path (split-string (getenv "PATH") path-separator)))

  (add-hook 'java-mode-hook
	    (with-eval-after-load 'eglot
	      (add-to-list 'eglot-server-programs '(java-mode "jdtls" "-verbose"))
	      'eglot-ensure))

  (defun my-mvn-create ()
    "Create a new Maven project."
    (interactive)
    (let ((mvn-project-parent-dir    (read-directory-name "Enter parent directory: "))
	  (mvn-group-id              (read-string         "Enter group id: "))
	  (mvn-artifact-id           (read-string         "Enter artifact id: "))
	  (mvn-archetype-artifact-id (read-string         "Enter archetype artifact id: " "maven-archetype-quickstart"))
	  (mvn-archetype-version     (read-string         "Enter archetype verion: " "1.4"))
	  (mvn-version               (read-string         "Enter version: " "1.0")))
      (make-directory mvn-project-parent-dir t)
      (cd mvn-project-parent-dir)
      (message (concat "mvn archetype:generate" " -DgroupId=" mvn-group-id " -DartifactId=" mvn-artifact-id " -DarchetypeArtifactId=" mvn-archetype-artifact-id " -DarchetypeVersion=" mvn-archetype-version " -Dversion=" mvn-version " -DinteractiveMode=false"))
      (compile (concat "mvn archetype:generate" " -DgroupId=" mvn-group-id " -DartifactId=" mvn-artifact-id " -DarchetypeArtifactId=" mvn-archetype-artifact-id " -DarchetypeVersion=" mvn-archetype-version " -Dversion=" mvn-version " -DinteractiveMode=false"))))

  (defun my-mvn-compile ()
    "Compile Maven project"
    (interactive)
    (let ((pom-dir (locate-dominating-file (file-name-directory (buffer-file-name)) "pom.xml")))
      (cd pom-dir)
      (compile "mvn compile")))

  (defun my-java-get-symbol (symbols symbol-type)
    "Extract the symbol value for a given SYMBOL-TYPE from a symbol table SYMBOLS."
    (let ((symbol-details (cl-find-if
			   (lambda (elem)
			     (let* ((elem-kind (plist-get elem :kind))
				    (elem-type (cdr (assoc elem-kind eglot--symbol-kind-names))))
			       (string= elem-type symbol-type)))
			   symbols)))
      (if symbol-details
	  (plist-get symbol-details :name)
	"")))

  (defun my-mvn-execute ()
    "Run the main program"
    (interactive)
    (let* ((document-symbols  (jsonrpc-request
			       (eglot--current-server-or-lose)
			       :textDocument/documentSymbol
			       (list :textDocument (list :uri (eglot--path-to-uri (buffer-file-name))))))
	   (package-name       (my-java-get-symbol document-symbols "Package"))
	   (class-name         (my-java-get-symbol document-symbols "Class"))
	   (package-suffix   (if (string= "" package-name)
				 package-name
			       "."))
	   (fqcn               (format "%s%s%s" package-name package-suffix class-name))
	   (args               (read-string     "Enter arguments: " ""))
	   (pom-dir (locate-dominating-file (file-name-directory (buffer-file-name)) "pom.xml")))
      (message pom-dir)
      (cd pom-dir)
      (message (concat "mvn compile exec:java -Dexec.mainClass=" fqcn " -Dexec.args=" args))
      (compile (concat "mvn compile exec:java -Dexec.mainClass=" fqcn " -Dexec.args=" args))))

#+end_src

#+begin_src
  (unless (package-installed-p 'eglot-java)
    (package-refresh-contents)
    (package-install 'eglot-java))
  (add-hook 'java-mode-hook 'eglot-java-mode)
#+end_src

* Keybindings
[[http://xahlee.info/emacs/emacs/emacs_keybinding_power_of_keys_sequence.html][Define Key Sequence]]
[[https://github.com/jwiegley/use-package/issues/964][use-package repeat mode maps]]
#+begin_src emacs-lisp
  (use-package window
    :config
    (repeat-mode 1)
    :bind
    ("M-o" . other-window)
    ("C-c t t" . term)
    ("C-c t s" . shell)
    ("C-c t e" . eshell)
    (:repeat-map my/window-repeat-map
		 ;; Defaults:
		 ("o" . other-window)	; enters the map here
		 ;; Resizing:
		 ("L" . enlarge-window-horizontally)
		 ("H" . shrink-window-horizontally)
		 ("=" . balance-windows)
		 ;; Adding/Deleting:
		 ("0" . delete-window)
		 ("1" . delete-other-windows)))
#+end_src

* Expand Region
[[https://emacsrocks.com/e09.html][Emacs Rocks - Expand Region]]
- Expand region increases the selected region by semantic
  units. Just keep pressing the key until it selects what you want.
- Passing a negative prefix runs er/contract-region
  #+begin_src emacs-lisp
    (use-package expand-region
      :ensure t
      :defer nil
      :bind
      ("C-+" . er/expand-region)
      ("C-_" . er/contract-region))
  #+end_src
* Custom File
#+begin_src emacs-lisp
  (setq custom-file (concat user-emacs-directory "custom.el"))
  (when (file-exists-p custom-file)
    (load custom-file))
#+end_src

* Ibuffer
[[https://www.youtube.com/watch?v=6KN_oSLFf-k][Youtube]]
|---------+------------------------------------------------------------------------|
| *RET*   | open buffer at point                                                   |
| *o*     | open buffer at point in other window                                   |
| *C-o*   | open buffer at point in other window but don't select it               |
|---------+------------------------------------------------------------------------|
| */n*    | filter buffer list by buffer name                                      |
| */m*    | filter buffer by major mode                                            |
| */f*    | filter by file path                                                    |
| */c*    | filter by buffer content                                               |
| */<*    | filter by buffer size                                                  |
| */>*    | filter by buffer size                                                  |
| */!*    | invert the last filter                                                 |
| *//*    | clear filter                                                           |
|---------+------------------------------------------------------------------------|
| */g*    | create a filter group from active filters                              |
| */\*    | remove all active filters                                              |
| *TAB*   | move to next filter group                                              |
| *S-TAB* | move to previous filter group                                          |
| */S*    | save current group with name (goes to custom.el)                       |
| */R*    | restore previously saved group                                         |
| */X*    | delete previous saved group                                            |
|---------+------------------------------------------------------------------------|
| *s f*   | sort by filename                                                       |
| *s v*   | sort by last viewed time                                               |
| *s m*   | sort by major mode                                                     |
| *s s*   | sort by size                                                           |
| *s i*   | sort in inverse                                                        |
| *,*     | rotate between different sorting                                       |
|---------+------------------------------------------------------------------------|
| *g*     | refresh buffer                                                         |
| *m*     | mark buffer                                                            |
| *k*     | remove marked items from list (don't actually kill buffers)            |
| *t*     | toggle mark (marked items become unmarked and unmarked becomes marked) |
| **n*    | mark by name using regexp                                              |
| **m*    | mark by mode using regexp                                              |
| **f*    | mark by file path using regexp                                         |
| *u*     | unmark buffer at point                                                 |
| *U*     | unmark all marks                                                       |
| *O*     | search regexp in all marked buffer in occur mode                       |
| *s*     | sort buffer                                                            |
|---------+------------------------------------------------------------------------|
| *A*     | view marked buffers                                                    |
| *S*     | save marked buffers                                                    |
| *D*     | kill marked buffers                                                    |
| *V*     | revert marked buffers                                                  |
|---------+------------------------------------------------------------------------|

#+begin_src emacs-lisp
  (require 'ibuffer)
  (setq ibuffer-expert t
	ibuffer-display-summary nil
	ibuffer-use-other-window nil
	ibuffer-show-empty-filter-groups nil
	ibuffer-movement-cycle nil
	ibuffer-default-sorting-mode 'filename/process
	ibuffer-use-header-line t
	ibuffer-default-shrink-to-minimum-size nil
	ibuffer-formats
	'((mark modified read-only locked " "
		(name 40 40 :left :elide)
		" "
		(size 9 -1 :right)
		" "
		(mode 16 16 :left :elide)
		" " filename-and-process)
	  (mark " "
		(name 16 -1)
		" " filename))
	ibuffer-saved-filter-groups nil
	ibuffer-old-time 48)
  (define-key ibuffer-mode-map (kbd "* f") #'ibuffer-mark-by-file-name-regexp)
  (define-key ibuffer-mode-map (kbd "* g") #'ibuffer-mark-by-content-regexp) ; "g" is for "grep"
  (define-key ibuffer-mode-map (kbd "* n") #'ibuffer-mark-by-name-regexp)
  (define-key ibuffer-mode-map (kbd "s n") #'ibuffer-do-sort-by-alphabetic)  ; "sort name" mnemonic
  (define-key ibuffer-mode-map (kbd "/ g") #'ibuffer-filter-by-content)
  (define-key ctl-x-map (kbd "C-b") 'ibuffer-jump)
#+end_src
*** Grouping
[[https://www.emacswiki.org/emacs/IbufferMode][emacswiki]]
#+begin_src
  (setq ibuffer-saved-filter-groups
	'(("default"
	   ("dired" (mode . dired-mode))
	   ("perl" (mode . cperl-mode))
	   ("c" (mode . c-mode))
	   ("python" (mode . python-base-mode))
	   ("org" (mode . org-mode))
	   ("vc" (or
		  (name . "vc-.*")
		  (name . "^\\*log-edit-files\\*$")))
	   ("emacs" (or
		     (name . "^\\*scratch\\*$")
		     (name . "^\\*Messages\\*$")))
	   ("svg" (name . "\\.svg")) ; group by file extension
	   ("gnus" (or
		    (mode . message-mode)
		    (mode . bbdb-mode)
		    (mode . mail-mode)
		    (mode . gnus-group-mode)
		    (mode . gnus-summary-mode)
		    (mode . gnus-article-mode)
		    (name . "^\\.bbdb$")
		    (name . "^\\.newsrc-dribble"))))))
  (add-hook 'ibuffer-mode-hook
	    (lambda ()
	      (ibuffer-switch-to-saved-filter-groups "default")))
#+end_src

* Unused
** LSP Mode
#+begin_src
  (unless (package-installed-p 'lsp-mode)
    (package-refresh-contents)
    (package-install 'lsp-mode))

  (setq lsp-keymap-prefix "<M-SPC> l"
	lsp-idle-delay 0.2
	lsp-log-io nil
	lsp-modeline-diagnostics-mode t
	lsp-modeline-code-actions-segments '(count icon name))
  (require 'lsp-mode)
  (add-hook 'lsp-mode-hook 'lsp-enable-which-key-integration)

  ;; (unless (package-installed-p 'lsp-ui)
  ;;   (package-refresh-contents)
  ;;   (package-install 'lsp-ui))
  ;; (require 'lsp-ui)

  ;; (setq lsp-ui-sideline-show-diagnostics t
  ;;       lsp-ui-sideline-show-hover t
  ;;       lsp-ui-sideline-update-mode 'line
  ;;       lsp-ui-sideline-delay 0.5
  ;;       lsp-ui-doc-enable t
  ;;       lsp-ui-doc-delay 0.5
  ;;       lsp-ui-doc-show-with-cursor t
  ;;       lsp-ui-doc-show-with-mouse t)
  ;; (lsp-ui-mode 1)
#+end_src

*** Python
#+begin_src
    (unless (package-installed-p 'pyvenv)
      (package-refresh-contents)
      (package-install 'pyvenv))
    (add-hook 'python-base-mode-hook #'lsp-deferred)
#+end_src

*** Java
#+begin_src
    (unless (package-installed-p 'lsp-java)
      (package-refresh-contents)
      (package-install 'lsp-java))
    (add-hook 'java-mode-hook #'lsp-deferred)
#+end_src
** Yasnippet
- Use tab key for snippet completion
  |-----------+--------------------------------------------------|
  | TAB       | yas-next-field-or-maybe-expand                   |
  | C-c & C-n | yas-new-snippet (allows to write new snippet)    |
  | C-c & C-s | yas-insert-snippet (chose a snippet to expand)   |
  | C-c & C-v | yas-visit-snippet-file (chose a snippet to edit) |
  |           |                                                  |

  #+begin_src
    (unless (package-installed-p 'yasnippet)
      (package-refresh-contents)
      (package-install 'yasnippet)
      (package-install 'yasnippet-snippets))
    (require 'yasnippet)
    (yas-reload-all)
    (add-hook 'prog-mode-hook #'yas-minor-mode)
  #+end_src

** YAML Mode
#+begin_src
  (unless (package-installed-p 'yaml-mode)
    (package-refresh-contents)
    (package-install 'yaml-mode))
  (require 'yaml-mode)
  (add-to-list 'auto-mode-alist '("\\.ya?ml\\'" . yaml-mode))
#+end_src

** Neotree
#+begin_src
  (unless (package-installed-p 'neotree)
    (package-refresh-contents)
    (package-install 'neotree))
  (setq neo-autorefresh t
	neo-create-file-auto-open t
	neo-show-hidden-files t
	neo-toggle-window-keep-p t
	neo-window-fixed-size nil
	neo-smart-open t
	neo-theme 'nerd
	neo-vc-integration '(char))

  (add-hook 'neo-enter-hook (lambda(&rest _) (setq-local display-line-numbers nil)))
#+end_src

** Treemacs
#+begin_src
  (unless (package-installed-p 'treemacs)
    (package-refresh-contents)
    (package-install 'treemacs))
  (require 'treemacs)
  (setq treemacs-collapse-dirs                   (if treemacs-python-executable 3 0)
	treemacs-deferred-git-apply-delay        0.5
	treemacs-directory-name-transformer      #'identity
	treemacs-display-in-side-window          t
	treemacs-eldoc-display                   'simple
	treemacs-expand-after-init               t
	treemacs-file-event-delay                2000
	treemacs-file-extension-regex            treemacs-last-period-regex-value
	treemacs-file-follow-delay               0.2
	treemacs-file-name-transformer           #'identity
	treemacs-find-workspace-method           'find-for-file-or-pick-first
	treemacs-follow-after-init               t
	treemacs-git-command-pipe                ""
	treemacs-goto-tag-strategy               'refetch-index
	treemacs-header-scroll-indicators        '(nil . "^^^^^^")
	treemacs-hide-dot-git-directory          t
	treemacs-indentation                     2
	treemacs-indentation-string              " "
	treemacs-is-never-other-window           nil
	treemacs-litter-directories              '("/node_modules" "/.venv" "/.cask")
	treemacs-max-git-entries                 5000
	treemacs-missing-project-action          'ask
	treemacs-move-forward-on-expand          nil
	treemacs-no-delete-other-windows         t
	treemacs-no-png-images                   nil
	treemacs-persist-file                    (expand-file-name ".cache/treemacs-persist" user-emacs-directory)
	treemacs-position                        'left
	treemacs-project-follow-cleanup          nil
	treemacs-project-follow-into-home        nil
	treemacs-read-string-input               'from-child-frame
	treemacs-recenter-after-file-follow      nil
	treemacs-recenter-after-project-expand   'on-distance
	treemacs-recenter-after-project-jump     'always
	treemacs-recenter-after-tag-follow       nil
	treemacs-recenter-distance               0.1
	treemacs-select-when-already-in-treemacs 'move-back
	treemacs-show-cursor                     nil
	treemacs-show-hidden-files               t
	treemacs-silent-filewatch                nil
	treemacs-silent-refresh                  nil
	treemacs-sorting                         'alphabetic-asc
	treemacs-space-between-root-nodes        t
	treemacs-tag-follow-cleanup              t
	treemacs-tag-follow-delay                1.5
	treemacs-text-scale                      nil
	treemacs-user-header-line-format         nil
	treemacs-user-mode-line-format           nil
	treemacs-wide-toggle-width               70
	treemacs-width                           35
	treemacs-width-increment                 1
	treemacs-width-is-initially-locked       t
	treemacs-workspace-switch-cleanup        nil)

  ;; The default width and height of the icons is 22 pixels. If you are
  ;; using a Hi-DPI display, uncomment this to double the icon size.
  ;;(treemacs-resize-icons 44)

  (treemacs-follow-mode t)
  (treemacs-filewatch-mode t)
  (treemacs-fringe-indicator-mode 'always)
  (when treemacs-python-executable
    (treemacs-git-commit-diff-mode t))

  (pcase (cons (not (null (executable-find "git")))
	       (not (null treemacs-python-executable)))
    (`(t . t)
     (treemacs-git-mode 'deferred))
    (`(t . _)
     (treemacs-git-mode 'simple)))

  (treemacs-hide-gitignored-files-mode nil)
  (add-hook 'treemacs-mode-hook (lambda(&rest _) (setq-local display-line-numbers nil)))
#+end_src

** Youtube-dl
#+begin_src
  (unless (package-installed-p 'ytdl)
    (package-refresh-contents)
    (package-install 'ytdl))
  (require 'ytdl)
  (setq ytdl-always-query-default-filename 'yes-confirm
	ytdl-music-folder "~/Downloads/Music"
	ytdl-video-folder "~/Downloads/Videos")
#+end_src

** Useful functions
[[http://whattheemacsd.com/][Move Lines]]
#+begin_src
  (defun my-move-line-down ()
    (interactive)
    (let ((col (current-column)))
      (save-excursion
	(forward-line)
	(transpose-lines 1))
      (forward-line)
      (move-to-column col)))
  (defun my-move-line-up ()
    (interactive)
    (let ((col (current-column)))
      (save-excursion
	(forward-line)
	(transpose-lines -1))
      (move-to-column col)))
  ;; both shortcuts can be emulated with C-x C-t C-x z z z... and C-1 C-x C-t z z z..
  ;; (global-set-key (kbd "<C-M-down>") 'my-move-line-down)
  ;; (global-set-key (kbd "<C-M-up>") 'my-move-line-up)
#+end_src
[[http://whattheemacsd.com/][Rename file and buffer]]
#+begin_src
  (defun my-rename-current-buffer-file ()
    "Renames current buffer and file it is visiting."
    (interactive)
    (let ((name (buffer-name))
	  (filename (buffer-file-name)))
      (if (not (and filename (file-exists-p filename)))
	  (error "Buffer '%s' is not visiting a file!" name)
	(let ((new-name (read-file-name "New name: " filename)))
	  (if (get-buffer new-name)
	      (error "A buffer named '%s' already exists!" new-name)
	    (rename-file filename new-name 1)
	    (rename-buffer new-name)
	    (set-visited-file-name new-name)
	    (set-buffer-modified-p nil)
	    (message "File '%s' successfully renamed to '%s'"
		     name (file-name-nondirectory new-name)))))))
#+end_src
[[http://whattheemacsd.com/][Window Layout]]
#+begin_src

  (defun my-split-below (arg)
    "Split window below from the parent or from root with ARG."
    (interactive "P")
    (split-window (if arg (frame-root-window)
		    (window-parent (selected-window)))
		  nil 'below nil))
  (defun my-toggle-window-dedication ()
    "Toggles window dedication in the selected window."
    (interactive)
    (set-window-dedicated-p (selected-window)
			    (not (window-dedicated-p (selected-window)))))

  (defun my-rotate-windows ()
    "Rotate your windows"
    (interactive)
    (cond ((not (> (count-windows)1))
	   (message "You can't rotate a single window!"))
	  (t
	   (setq i 1)
	   (setq numWindows (count-windows))
	   (while  (< i numWindows)
	     (let* (
		    (w1 (elt (window-list) i))
		    (w2 (elt (window-list) (+ (% i numWindows) 1)))

		    (b1 (window-buffer w1))
		    (b2 (window-buffer w2))

		    (s1 (window-start w1))
		    (s2 (window-start w2))
		    )
	       (set-window-buffer w1  b2)
	       (set-window-buffer w2 b1)
	       (set-window-start w1 s2)
	       (set-window-start w2 s1)
	       (setq i (1+ i)))))))
  (defun my-toggle-window-split ()
    (interactive)
    (if (= (count-windows) 2)
	(let* ((this-win-buffer (window-buffer))
	       (next-win-buffer (window-buffer (next-window)))
	       (this-win-edges (window-edges (selected-window)))
	       (next-win-edges (window-edges (next-window)))
	       (this-win-2nd (not (and (<= (car this-win-edges)
					   (car next-win-edges))
				       (<= (cadr this-win-edges)
					   (cadr next-win-edges)))))
	       (splitter
		(if (= (car this-win-edges)
		       (car (window-edges (next-window))))
		    'split-window-horizontally
		  'split-window-vertically)))
	  (delete-other-windows)
	  (let ((first-win (selected-window)))
	    (funcall splitter)
	    (if this-win-2nd (other-window 1))
	    (set-window-buffer (selected-window) this-win-buffer)
	    (set-window-buffer (next-window) next-win-buffer)
	    (select-window first-win)
	    (if this-win-2nd (other-window 1))))))
#+end_src

** International
** Ediff
[[https://www.youtube.com/watch?v=9S2pMZ6U5Tc][Youtube]]
- When ediff is launched it starts a control window where ediff
  commands are entered.
  |----------------------------+---------------------------------------------------------------------------|
  | M-x ediff                  | compare two files                                                         |
  | M-x ediff-backup           | compare a file with its backup                                            |
  | M-x ediff-current-file     | compare buffer with its file on disk                                      |
  | M-x ediff-buffers          | compare two buffers                                                       |
  | M-x ediff3                 | compare 3 files                                                           |
  | M-x ediff-buffers3         | compare 3 buffers                                                         |
  | M-x edirs                  | compare files in two directories                                          |
  | M-x edirs3                 | compare files in 3 directories                                            |
  | M-x ediff-windows-wordwise | compare word by word                                                      |
  | M-x ediff-windows-linewise | compare line by line                                                      |
  | M-x ediff-regions-wordwise | compare regions word by word.                                             |
  |                            | prompted for buffer and regions to compare. regions can be in same buffer |
  | M-x ediff-regions-linewise | compare regions linewise                                                  |
  | M-x ediff-revision         | compare versions of current buffer. buffer must be visiting               |
  |                            | version controlled file                                                   |
  | M-x epatch                 | patch a file or multiple files and then compare                           |
  |                            | interactively patch if multiple files                                     |
  | M-x epatch-buffer          | patch a buffer and compare                                                |
  |                            | the buffer and file visited are not modified                              |
  |                            | a separate buffer ending with patched is created                          |
  |                            | only allows single file patch                                             |
  | M-x ediff-merge            | merge two files                                                           |
  | M-x ediff-merge-buffers    | merge two buffers                                                         |
  | M-x edirs-merge            | merge files common to both directories                                    |
  | M-x ediff-merge-revisions  | merge two versions of the file visited by buffer                          |
  | M-x eregistry              | open ediff session registry to quickly find and restart active ediff      |
  |                            | sessions                                                                  |
  |----------------------------+---------------------------------------------------------------------------|

  - All Ediff commands are displayed in Quick Help Window. Use ? to
    show or hide help. Ediff commands take prefix that mostly refer
    to hunks
    |-----+-----------------------------------------------------------------------------|
    | ?   | toggle Ediff Quick Window                                                   |
    | G   | prepares a mail buffer                                                      |
    | v   | scroll up both buffers in a coordinated manner                              |
    | V   | scroll buffer down                                                          |
    | <   | scroll buffer left                                                          |
    | >   | scroll buffer right                                                         |
    | wd  | writes diff output                                                          |
    | wa  | save buffer a if modified                                                   |
    | wb  | save buffer b if modified                                                   |
    | wc  | save buffer c if modified                                                   |
    | a   | during comparison: copy current difference region from buffer A to buffer B |
    |     | old contents of B's region are saved and can be restored with rb            |
    |     | during merge: copy current difference region from A to merge buffer         |
    |     | old contents for region in C can be restored with r                         |
    | b   | same as a but other way                                                     |
    | p   | make previous difference region current                                     |
    | n   | make next difference region current                                         |
    | j   | make first difference region current                                        |
    | -j  | make last difference region current                                         |
    | Nj  | make Nth difference region current                                          |
    | '!' | recompute difference. useful if files are edited in ediff session           |
    | ¦   | toggle horizontal/vertical split                                            |
    | @   | toggle auto refinement (highlight exact words that differ)                  |
    | r   | restore old contents of region in merge buffer                              |
    | ra  | restore old contents of current difference region in A                      |
    | rb  | restore old contents of current difference region in B                      |
    | ##  | skip regions that only differ in whitespace                                 |
    | #c  | toggle case sensitivity                                                     |
    | A   | toggle read only property of buffer A                                       |
    | B   | toggle read only property of buffer B                                       |
    | i   | display useful info about current ediff session                             |
    | R   | display ediff registry                                                      |
    | z   | suspend current ediff session hiding all ediff related buffers              |
    | q   | terminate ediff session                                                     |
    |     | with prefix asks if buffers should be deleted                               |
    | %   | toggle narrowing                                                            |
    | C-l | ediff-recenter (restore usual ediff window setup)                           |
    | M   | go back to session group buffer                                             |
    |-----+-----------------------------------------------------------------------------|

    - session commands
    |-----------------------------------------------+---------------------------------------------------------------------------|
    | M-x eregistry                                 | bring up registry of active ediff sessions                                |
    |                                               | can be used to resume previous ediff session or switch to another session |
    | M-x ediff-toggle-multiframe                   | toggle quick help window being in same of separate frame                  |
    | M-x ediff-revert-buffers-then-recompute-diffs | recomputes difference                                                     |
    | RET or v                                      | resume session                                                            |
    |-----------------------------------------------+---------------------------------------------------------------------------|

    - ediff commands that operate on directories open a dired like
      buffer called session group that lists files common to
      directories as a separate session
    |-----+----------------------------------------------------------------------|
    | RET | open ediff session on these files.                                   |
    | D   | display directory difference buffer                                  |
    | C   | in directory difference buffer, copy missing file to other directory |
    | h   | mark session for hiding (with prefix unmark)                         |
    | x   | hide marked session (with prefix unhide)                             |
    | m   | mark session                                                         |
    |-----+----------------------------------------------------------------------|

    - customization
    |-----------------------------------------+---------------------------------------------------------------|
    | 'ediff-use-long-help-message'           | if non nil use long help message in quick help window         |
    | 'ediff-control-frame-position-function' | specify position of control frame                             |
    | 'ediff-window-setup-function'           | how window is setup                                           |
    |                                         | nediff-setup-windows-multiframe - in a separate frame         |
    |                                         | ediff-setup-windows-plain - in the same frame                 |
    | 'ediff-ignore-similar-regions'          | if t, skip white space differences                            |
    | 'ediff-split-window-function'           | controls horizontal or vertical split                         |
    | 'ediff-use-last-dir'                    | if nil, present default directory of current buffer in prompt |
    |                                         | if t, use directory used in previously                        |
    | 'ediff-keep-variants'                   | if t, preserve buffers after quitting ediff                   |
    |                                         | if nil, offer to delete the buffers if they are not modified  |
    |                                         |                                                               |
    |-----------------------------------------+---------------------------------------------------------------|

    #+begin_src
      (setq ediff-window-setup-function 'ediff-setup-windows-plain)
      (setq split-window-function 'split-window-horizontally)
      (setq ediff-keep-variants nil)
    #+end_src
** Dired
- Dired creates an Emacs buffer containing directory listing which
  can be used for file and directory operations
- You flag files for deletion. You mark files for everything else
  (i.e. copy, move, link files…). There are many marking commands
  for specialized file types. Except for m, % m and % g, all marking
  commands have prefix *
- Command that use regexp have % as prefix

  |----------------------------------------+-----+---------------------------------------------------------------------------|
  | *C-x d*                                |     | dired                                                                     |
  |                                        |     | prompt directory and lists its contents in Dired buffer                   |
  |                                        |     | shell wild-card may be passed in the prompt                               |
  |                                        |     | with prefix, prompt switches for ls command                               |
  | *M-n*                                  |     | show next history dired prompt                                            |
  | *M-p*                                  |     | show previous history in dired prompt                                     |
  | *C-x C-f*                              |     | find-file (opens dired if directory name is passed)                       |
  | 'dired-listing-switches'               |     | options passed to ls command when Dired is invoked                        |
  | 'dired-use-ls-dired'                   |     | whether to pass --dired option to ls command                              |
  | *C-x 4 d*                              |     | dired-other-window                                                        |
  | C-x 5 d                                |     | dired-other-frame                                                         |
  | *q*                                    | *q* | quit-window                                                               |
  | *j*                                    | *J* | dired-goto-file (prompt file-name and move point to it)                   |
  | *d*                                    |     | dired-flag-file-deletion (mark file or empty folder for deletion)         |
  |                                        |     | files marked for deletion show D in buffer                                |
  |                                        |     | with prefix, mark that many files for deletion                            |
  | *u*                                    |     | dired-unmark                                                              |
  | *x*                                    |     | dired-do-flagged-delete                                                   |
  | 'dired-recursive-deletes'              |     | allow Dired to delete nonempty directories                                |
  | *#*                                    |     | dired-flag-auto-save-files (mark all auto save files for deletion)        |
  |                                        |     | files start and end with #                                                |
  | *~*                                    |     | dired-flag-backup-files (files end with ~)                                |
  | *f or RET*                             |     | dired-find-file (visit file on current line)                              |
  | *o*                                    |     | dired-find-file-other-window                                              |
  | *C-o*                                  |     | dired-display-file (open file in other window but stay in current window) |
  | *v*                                    |     | dired-view-file (open file in view mode)                                  |
  | *^*                                    |     | dired-up-directory (go up one directory)                                  |
  | *m*                                    |     | dired-mark (mark current file or files in active region)                  |
  |                                        |     | if prefix, mark that many files                                           |
  |                                        |     | if sub-directory, mark all files in sub-directory                         |
  | **N*                                   |     | dired-number-of-marked-files (number and size of marked files)            |
  | **@*                                   |     | dired-mark-symlinks                                                       |
  | **/*                                   |     | dired-mark-directories                                                    |
  | *u*                                    |     | dired-unmark                                                              |
  | *U*                                    |     | dired-unmark-all-marks                                                    |
  | *t*                                    |     | dired-toggle-marks (mark unmarked files and vice-verse                    |
  | *C-/*                                  |     | dired-undo (does not revert file operations)                              |
  | 'dired-dwim-target'                    |     | non-nil - try to guess default target directory for copy, link etc        |
  |                                        |     | nil - use dired default directory                                         |
  | *C*                                    |     | dired-do-copy (copy file with new name if single file or to different     |
  |                                        |     | directory if multiple files)                                              |
  | 'dired-create-destination-dirs'        |     | create non existent directories when copying/renaming                     |
  | 'dired-copy-preserve-time'             |     | preserve modification time                                                |
  | 'dired-recursive-copies'               |     | like cp -r                                                                |
  | *D*                                    |     | dired-do-delete                                                           |
  | *R*                                    |     | dired-do-rename (like mv)                                                 |
  | 'dired-vc-rename-file'                 |     | rename using vc-rename-file if file is under version control              |
  | *H*                                    |     | dired-do-hardlink (if multiple files, then directory to create link in)   |
  | *S*                                    |     | dired-do-symlink (like ln -s)                                             |
  | *M*                                    |     | dired-do-chmod (can be octal or symbolic permission)                      |
  | *G*                                    |     | dired-do-chgrp (change group)                                             |
  | *O*                                    |     | dired-do-chown (change owner)                                             |
  | *T*                                    |     | dired-do-touch                                                            |
  | *P*                                    |     | dired-do-print (print file using 'lpr-comand')                            |
  | *Z*                                    |     | dired-do-compress (each file is compressed separately)                    |
  |                                        |     | decompress if already compressed                                          |
  |                                        |     | if directory, create .tar.gz                                              |
  | *c*                                    |     | dired-do-compress-to (compress marked files into single archive)          |
  |                                        |     | 'dired-compress-files-alist' to decide algorithm based on extension       |
  | *:d*                                   |     | epa-dired-do-decrypt                                                      |
  | *:v*                                   |     | epa-dired-do-verify                                                       |
  | *:s*                                   |     | epa-dired-do-sign                                                         |
  | *:e*                                   |     | epa-dired-do-encrypt                                                      |
  | *L*                                    |     | dired-do-load (load Elisp files)                                          |
  | *A*                                    |     | dired-do-find-regexp (search files for regexp)                            |
  |                                        |     | like xref-find-references, displays in xref buffer                        |
  |                                        |     | recursively searches in directories                                       |
  |                                        |     | ignores grep-find-ignored-files and grep-find-ignored-directories         |
  | *Q*                                    |     | dired-do-find-regexp-and-replace                                          |
  |                                        |     | like xref-query-replace-in-results                                        |
  | *!*                                    |     | dired-do-shell-command (run shell command on marked files)                |
  | *&*                                    |     | dired-to-async-shell-command (like appending & to end of command)         |
  |                                        |     | if multiple files, run the command for each in separate process)          |
  |                                        |     | if command ends in ;, then run in sequence for each file                  |
  |                                        |     | if * is used with surrounding space, it is replaced by marked files       |
  |                                        |     | to use * as wild-card, use *""                                            |
  | *%u*                                   |     | dired-upcase (rename each file to upper case)                             |
  | *%l*                                   |     | dired-downcase                                                            |
  | *%m*                                   |     | dired-mark-files-regexp                                                   |
  | *%d*                                   |     | dired-flag-files-regexp (for deletion)                                    |
  | *%R*                                   |     | rename, copy, hardlink and symlink each file using regexp substitution    |
  | *%C*                                   |     | \& - refer to entire match                                                |
  | *%H*                                   |     | \DIGIT - part of pattern                                                  |
  | *%S*                                   |     | \0 - refers entire path                                                   |
  | *%g*                                   |     | dired-mark-files-containing-regexp                                        |
  | *=*                                    |     | dired-diff (compare current file with another file given in minibuffer)   |
  |                                        |     | file at point is file B, and file given in minibuffer is file A           |
  | *i*                                    |     | dired-may-be-insert-subdir                                                |
  |                                        |     | if point is on sub-directory, list it in the same dired buffer            |
  |                                        |     | if sub-directory is already listed, move point to it                      |
  |                                        |     | it also sets mark so we can go back using C-u C-SPC                       |
  | *C-u k*                                |     | remote sub-directory listing                                              |
  | *C-M-n*                                |     | dired-next-subdir                                                         |
  | *C-M-p*                                |     | dired-prev-subdir                                                         |
  | *C-M-u*                                |     | dired-tree-up (go-to parent directory listing)                            |
  | *C-M-d*                                |     | dired-tree-down                                                           |
  | *$*                                    |     | dired-hide-subdir                                                         |
  |                                        |     | hide sub-directory listing showing only header line                       |
  | *M-$*                                  |     | dired-hide-all                                                            |
  |                                        |     | even if the files in hidden directories are marked, they are ignored      |
  |                                        |     | when running dired commands                                               |
  | *g*                                    |     | revert-buffer (refresh dired contents)                                    |
  | *s*                                    |     | dired-sort-toggle-or-edit (toggle alphabetical or date/time sort)         |
  | *C-u s*                                |     | update listing with new switches for ls                                   |
  | M-x find-name-dired                    |     | like find command                                                         |
  | M-x find-grep-dired                    |     | like grep -R                                                              |
  | *C-x C-q*                              |     | dired-toggle-read-only                                                    |
  |                                        |     | allows to rename files including rectangle operations                     |
  |                                        |     | can also change link target, delete files etc                             |
  | *C-c C-c*                              |     | wdired-finish-edit (switches back to dired mode)                          |
  | *C-t d*                                |     | image-dired-display-thumbs                                                |
  |                                        |     | mark image files and type C-t d to enter image-dired                      |
  | RET                                    |     | image-dired-display-thumbnail-original-image                              |
  |                                        |     | open image at point to full size window                                   |
  | SPC                                    |     | image-dired-display-next-thumbnail-original                               |
  | DEL                                    |     | image-dired-display-previous-thumbnail-original                           |
  | C-RET                                  |     | image-dired-thumbnail-display-external                                    |
  |                                        |     | display in image-dired-external-viewer                                    |
  | d                                      |     | image-dired-flag-thumb-original-file                                      |
  | *+*                                    |     | dired-create-directory                                                    |
  | *w*                                    |     | dired-copy-filename-as-kill                                               |
  | *W*                                    |     | browse-url-of-dired-file                                                  |
  | M-x dired-compare-directories          |     | compare current dired buffer with another directory (only file names)     |
  | 'ls-lisp-use-insert-directory-program' |     | if nil, use ls-lisp instead of ls program                                 |
  |----------------------------------------+-----+---------------------------------------------------------------------------|

  #+begin_src
    (require 'dired)
    (require 'ls-lisp)
    (setq dired-create-destination-dirs 'ask
	  dired-dwim-target t
	  dired-create-destination-dirs t
	  dired-copy-preserve-time t
	  dired-recursive-copies t
	  dired-vc-rename-file t
	  ls-lisp-use-insert-directory-program nil) ; use ls-lisp instead of ls
    (define-key dired-mode-map (kbd "M-+") 'dired-create-empty-file)
  #+end_src
  
** Document Viewing
- major mode for viewing DVI, PS PDF formats
- opening a document that can be viewed in DocView mode, Emacs
  automatically uses the mode
  |-----------------------+-------------------------------------------------------------------|
  | *C-c C-c*             | doc-view-toggle-display                                           |
  |                       | toggle between DocView mode and displaying file contents as text) |
  | *C-c C-t*             | doc-view-open-text (show file contents as text)                   |
  | M-x doc-view-mode     | explicitly enable DocView mode                                    |
  | *k*                   | dov-view-kill-proc-and-buffer (kill DocView buffer)               |
  | *q*                   | quit-window                                                       |
  | *C-p*                 | scroll previous in page                                           |
  | *C-n*                 | scroll next in page                                               |
  | 'doc-view-continuous' | allow C-p and C-n cross page boundary                             |
  | *n*                   | doc-view-next-page                                                |
  | *p*                   | doc-view-previous-page                                            |
  | *SPC*                 | doc-view-scroll-up-or-next-page                                   |
  | *DEL*                 | doc-view-scroll-down-or-previous-page                             |
  | *M-<*                 | doc-view-first-page                                               |
  | *M->*                 | doc-view-last-page                                                |
  | *M-g g or M-g M-g*    | doc-view-goto-page                                                |
  | *+*                   | doc-view-enlarge                                                  |
  | *-*                   | doc-view-shrink                                                   |
  | *C-s*                 | doc-view-search                                                   |
  | *C-r*                 | doc-view-search-backward                                          |
  | *C-t*                 | doc-view-show-tooltip (display search results in tooltip)         |
  |-----------------------+-------------------------------------------------------------------|

  - Slicing allows to hide document margins and zooms in on the
    portion requested
  |-------+-----------------------------------------------------------------------------------|
  | *c s* | doc-view-set-slice                                                                |
  |       | enter top left pixel position and width/height of slice                           |
  | *c m* | doc-view-set-slice-using-mouse                                                    |
  |       | press and hold left mouse and drag from top left to bottom right to form a region |
  | *c b* | doc-view-set-slice-from-bounding-box                                              |
  |       | automatically do slice                                                            |
  | *c r* | doc-view-reset-slice                                                              |
  |-------+-----------------------------------------------------------------------------------|
#+begin_src emacs-lisp
  (setq doc-view-resolution 300)
#+end_src

** Printing
|------------------+----------------------------------------------------------------|
| M-x print-buffer | print hardcopy of current buffer with page heaading containing |
|                  | file name and page number                                      |
| M-x lpr-buffer   | print hardcopy of current buffer with page headings            |
| M-x print-region | like print-buffer but only region                              |
| M-x lpr-region   | like lpr-buffer but only region                                |
| 'lpr-command'    | command used for printing                                      |
| 'lpr-switches'   | switches passed to lpr-command                                 |
| 'printer-name'   | printer to use (nil means default printer)                     |
|------------------+----------------------------------------------------------------|

** Sorting
|-------------------------+----------------------------------------------------------------------------|
| 'sort-fold-case'        | ignore case difference                                                     |
| M-x sort-lines          | sort lines in region                                                       |
|                         | divide region into lines and sort by comparing entire text of a line       |
|                         | with prefix, sort in descending order                                      |
| M-x sort-paragraphs     | divide region into paragraphs and sort by comparing entire paragraph       |
| M-x sort-pages          | divide region into pages and sort by comparing entire page                 |
| M-x sort-fields         | divide region into lines and sort by comparing specific field              |
|                         | fields are separated by whitespace                                         |
|                         | prefix indicates which of the fields to use as sort key (default 1)        |
|                         | negative prefix starts count from right (last field is -1 etc)             |
|                         | if multiple lines have same values for the field, they are sort order      |
|                         | is preserved, such that they appear in the same relative order as in       |
|                         | original buffer                                                            |
| M-x sort-numeric-fields | like sort-fields but specified field is converted to integer for           |
|                         | numeric comparison                                                         |
| 'sort-numeric-base'     | default base for numeric sort. numbers that begins with 0x and 0 are       |
|                         | treated as hex and octal respectively                                      |
| M-x sort-columns        | For example, to sort a table by information found in columns 10 to         |
|                         | 15, you could put the mark on column 10 in the first line of the table,    |
|                         | and point on column 15 in the last line of the table, and then run         |
|                         | ‘sort-columns’.  Equivalently, you could run it with the mark on column 15 |
|                         | in the first line and point on column 10 in the last line.                 |
|                         | This can be thought of as sorting the rectangle specified by point         |
|                         | and the mark, except that the text on each line to the left or             |
|                         | right of the rectangle moves along with the text inside the rectangle      |
| M-x reverse-region      | reverse the order of lines in region                                       |
|-------------------------+----------------------------------------------------------------------------|

** Hyperlinking
*** FFAP
- FFAP package remaps certain commands with ffap variants such
  that it provides better defaults
- We can still run non ffap version by passing a prefix
- If point is on filename or url, default filename or url is set
  to it
  #+begin_src
    (ffap-bindings)
  #+end_src
  |---------------+-----------------------------------------------------------|
  | C-x C-f       | find-file-at-point (guess default from text around point) |
  | C-x C-r       | ffap-read-only                                            |
  | C-x C-v       | ffap-alternate-file                                       |
  | C-x d         | dired-at-point                                            |
  | C-x C-d       | ffap-list-directory                                       |
  | M-x ffap-next | search buffer for next file name or url                   |
  | M-x ffap-menu | display a menu of files and URLs in current buffer        |
  |---------------+-----------------------------------------------------------|

** Gnus
- Gnus is Emacs package for reading and posting Usenet news and
  mails
- Gnus has group buffer, summary buffer and article buffer
- The “group buffer” contains a list of article sources (e.g.,
  newsgroups and email inboxes), which are collectively referred to
  as “groups”.  This is the first buffer Gnus displays when it
  starts up. It normally displays only the groups to which you
  subscribe and that contain unread articles.  From this buffer, you
  can select a group to read.
- The “summary buffer” lists the articles in a single group, showing
  one article per line.  By default, it displays each article’s
  author, subject, and line number, but this is customizable The
  summary buffer is created when you select a group in the group
  buffer, and is killed when you exit the group.
- From the summary buffer, you can choose an article to view.  The
  article is displayed in the “article buffer”.  In normal Gnus
  usage, you view this buffer but do not select it—all useful Gnus
  commands can be invoked from the summary buffer.  But you can
  select the article buffer, and execute Gnus commands from it, if
  you wish.

  |---------------------------------+-------------------------------------------------------|
  | *M-x gnus*                      | start Gnus                                            |
  |                                 | reads .newsrc file in home directory.                 |
  |                                 | this is a common file used by many newsreaders        |
  |                                 | this file lists all the news groups and subscriptions |
  | 'gnus-select-method'            | primary method of selecting newsgroups                |
  | 'gnus-secondary-select-methods' | additional methods for reading news                   |
  | *q*                             | quit group buffer updating .newsrc and .newsrc.eld    |
  |---------------------------------+-------------------------------------------------------|

*** Basic Settings
[[https://www.bounga.org/tips/2020/05/03/multiple-smtp-accounts-in-gnus-without-external-tools/][Source]]
#+begin_src
  ;; don't create newsrc file that other clients may use
  (setq gnus-save-newsrc-file t)
  (setq gnus-read-newsrc-file t)

  ;; save emacs specific newsrc file in cache
  (setq gnus-startup-file (expand-file-name "newsrc" user-emacs-directory))

  ;;save dribble file in cache and read on start up without prompt if exists
  (setq gnus-dribble-directory user-emacs-directory)
  (setq gnus-always-read-dribble-file t)

  ;; about you
  (setq user-mail-address "name@domain.com"
	user-full-name "Divakar V Prabhu")

  (setq gnus-ignored-newsgroups "^to\\.\\|^[0-9. ]+\\( \\|$\\)\\|^[\”]\”[#’()]")
#+end_src

*** Accounts
#+begin_src
  ;; define everything via secondary method
  ;; read credentials from authinfo.gpg
  (setq gnus-select-method '(nnnil nil))
  (setq gnus-secondary-select-methods
	'((nntp   "gwene"
		  (nntp-address "news.gwene.org"))))
  (if (file-exists-p "~/etc/gnupg/authinfo.gpg")
      (load-file "~/etc/gnus_mail.el"))
#+end_src

*** Group buffer
Buffer where all the mail folders like inbox from all servers will be shown
|-----------+-----------------------------------------------------------------------------|
| *SPC*     | gnus-group-read-group                                                       |
|           | switch to summary buffer for group on current line                          |
| *l (ell)* | gnus-group-list-groups                                                      |
|           | show only groups with unread articles                                       |
| *L*       | gnus-group-list-all-groups                                                  |
|           | show all subscribed and unsubscribed groups but not killed or zombie groups |
| *A A*     | gnus-group-list-active                                                      |
|           | list all groups available from server including killed and zombie           |
| *u*       | gnus-group-unsubscribe-current-group                                        |
|           | toggle subscription status of group on current line                         |
| *C-k*     | gnus-group-kill-group (kill group which won't show in l or L listing)       |
| *p*       | gnus-group-prev-unread-group                                                |
| *n*       | gnus-group-next-unread-group                                                |
| *q*       | gnus-group-exit                                                             |
| *g*       | refresh to check new news and mail                                          |
| *c*       | mark all unread article in group as read                                    |
| *m*       | create new email                                                            |
| *^*       | enter server buffer (list all configured servers                            |
| #         | mark a group                                                                |
|-----------+-----------------------------------------------------------------------------|

*** Topic mode
Categorize multiple groups based on topic

|---------+---------------------|
| t       | Enter topic mode    |
| T n     | Create new topic    |
| T <DEL> | delete topic        |
| T m     | move group to topic |
|---------+---------------------|
#+begin_src
  (add-hook 'gnus-group-mode-hook 'gnus-topic-mode)
#+end_src

*** Summary and article buffer
When a group is entered, a summary buffer showing all article is entered
|---------+-------------------------------------------------------------------------------|
| *SPC*   | gnus-summary-next-page                                                        |
|         | if no article is selected, select article on current line and                 |
|         | display in article buffer.                                                    |
|         | Else scroll down article and on reaching end of article buffer                |
|         | select next unread article                                                    |
| *DEL*   | gnus-summary-prev-page (opposite of SPC)                                      |
| *n*     | gnus-summary-next-unread-article                                              |
| *p*     | gnus-summary-prev-unread-article                                              |
| *s*     | gnus-summary-isearch-article                                                  |
|         | incremental search on article buffer (like running C-s in article buffer)     |
| M-s     | gnus-summary-search-article-forward                                           |
|         | search articles containing match for regexp                                   |
| M-r     | gnus-summary-search-article-backward                                          |
| *q*     | gnus-summary-exit                                                             |
| *R*     | gnus-summary-reply-with-original (Reply by email and cite article)            |
| *r*     | gnus-summary-reply (Reply by email and don't cite article)                    |
| *m*     | gnus-summary-mail-other-window *new email)                                    |
| *c*     | gnus-summary-catchup-and-exit (mark all article in the current group as read) |
| C-u / t | show only articles younger than given days                                    |
| / t     | show only articles older than given days                                      |
| T T     | toggle threading                                                              |
| t       | show all headers                                                              |
| W w     | wordwrap current article                                                      |
| ^       | fetch parent article                                                          |
|---------+-------------------------------------------------------------------------------|
*** Message buffer
Write body after the line "--text follows this line--"
Linebreaks
#+begin_src
  (defun my-message-mode-setup ()
    (setq fill-column 72)
    (turn-on-auto-fill))
  (add-hook 'message-mode-hook 'my-message-mode-setup)
#+end_src
|-----------+--------------------|
| C-c C-c   | send message       |
| C-c C-d   | save as draft      |
| C-c C-k   | kill message       |
| C-c C-m f | attach file        |
| M-q       | reformat paragraph |
|-----------+--------------------|

*** Terminology
- select method - another term for server
- primary server is specified using gnus-select-method
- secondary servers are specified using gnus-secondary-select-methods
- groups from news server are called news groups and folders from mail server are called mail groups
- A character indicates the mark
  |-------+------------+--------------------------------------------------------|
  | space | M-u        | there is no mark or the message is unmarked.           |
  |       |            | Marking message with space actually removes all marks  |
  | !     | ! or u     | Ticked message or mark important.                      |
  |       |            | Ticked messages are always shown when group is entered |
  | ?     | ?          | Dormant mark                                           |
  |       |            | They are not shown by default                          |
  | R     | <SPC> or g | Message has been read                                  |
  | r     | d or M-r   | Mark message as read without actually reading it       |
  | 0     |            | Message was read in previous session                   |
  |-------+------------+--------------------------------------------------------|

*** Mail
- Mail is fetched from mail sources whereas mail backend tells how to store them
- For imap - mail is not fetched

*** Expiry
- On news servers, as messages grow disk usage increases.
- News servers are configured per group to tell after how many days the message should be deleted
- In case of mail server, the expiry should be in your control
  |-----------+---------------------------------------------------|
  | E         | Expire a message                                  |
  | C-u M-g   | Show read messages                                |
  | C-u <RET> | From group buffer, show read message when entered |
  | / D       | Show dormant messages                             |
  |-----------+---------------------------------------------------|

  - When a new followup comes in a thread, also show previous message from that thread
    #+begin_src
      (setq gnus-fetch-old-headers t)
    #+end_src
    |-------+--------------------------------+---------------------|
    | n     | next group with unread article | next unread article |
    | p     | prev group with unread article | prev unread article |
    | N     | next group                     | next article        |
    | P     | prev group                     | prev article        |
    | C-n   | next line                      | next line           |
    | C-p   | prev line                      | prev line           |
    | <SPC> |                                | scroll article down |
    | <DEL> |                                | scroll article up   |
    |-------+--------------------------------+---------------------|

    - Article and summary buffer have similar keybindings

*** Format
#+begin_src
  (setq-default
   gnus-summary-line-format "%U%R%z%I%(%&user-date; [%4L: %-23,23f%]%) %s\n"
   gnus-user-date-format-alist '((t . "%Y-%m-%d %H:%M"))
   gnus-summary-thread-gathering-function 'gnus-gather-threads-by-references
   gnus-thread-sort-functions '(gnus-thread-sort-by-date)
   gnus-sum-thread-tree-false-root ""
   gnus-sum-thread-tree-indent " "
   gnus-sum-thread-tree-leaf-with-other "├► "
   gnus-sum-thread-tree-root ""
   gnus-sum-thread-tree-single-leaf "╰► "
   gnus-sum-thread-tree-vertical "│")
#+end_src

*** Custom keybinding
- Press e to mark expired and then go to next article
  #+begin_src
    (add-hook 'gnus-summary-mode-hook 'my-summary-mode-map)
    (add-hook 'gnus-article-prepare-hook 'my-summary-mode-map)
    (defun my-summary-mode-map ()
      (local-set-key "e" "MMen")
      (local-set-key "E" 'gnus-summary-edit-article))
  #+end_src
  |-----+-----------------------------------------|
  | Key | Description                             |
  |-----+-----------------------------------------|
  | e   | expire article and move to next article |
  | E   | edit article                            |
  |-----+-----------------------------------------|

  - Expire immediately
  #+begin_src
    (setq nnmail-expiry-wait 'immediate)
  #+end_src

*** Windows
[[https://www.emacswiki.org/emacs/GnusWindowLayout][GnusWindowLayout]]
#+begin_src
  (gnus-add-configuration
   '(article
     (horizontal 1.0
		 (vertical 0.25
			   (group 1.0))
		 (vertical 1.0
			   (summary 0.25 point)
			   (article 1.0)))))

  (gnus-add-configuration
   '(summary
     (horizontal 1.0
		 (vertical 0.25
			   (group 1.0))
		 (vertical 1.0
			   (summary 1.0 point)))))


#+end_src

** EPG
#+begin_src
  (setq epg-pinentry-mode 'loopback)
#+end_src

** Keepass mode
#+begin_src
    (unless (package-installed-p 'keepass-mode)
      (package-refresh-contents)
      (package-install 'keepass-mode))
    (require 'keepass-mode)
#+end_src

** EWW
#+begin_src
  (setq url-configuration-directory user-emacs-directory)
  (setq browse-url-browser-function 'eww-browse-url)
  (add-hook 'eww-mode-hook 'visual-line-mode)
#+end_src
** Evil
:PROPERTIES:
:ORDERED:  t
:END:
- VIM emulation in Emacs
  |-------+-------------------------------------------------------------------|
  | *C-z* | toggle evil state. Modeline shows <E> for emacs                   |
  |       | <N> - normal state                                                |
  |       | <I> - insert state                                                |
  |       | <V> - visual state                                                |
  |       | <R> - replace state                                               |
  |       | <0> - operator pending state (ex: between d and w)                |
  |       | <M> - motion state (useful for read only buffers only for motion) |
  |-------+-------------------------------------------------------------------|

  - Settings
  #+begin_src
    (unless (package-installed-p 'evil)
      (package-refresh-contents)
      (package-install 'evil))

    ;; (unless (package-installed-p 'goto-chg)
    ;;   (package-refresh-contents)
    ;;   (package-install 'goto-chg))

    (unless (package-installed-p 'evil-collection)
      (package-refresh-contents)
      (package-install 'evil-collection))

    (unless (package-installed-p 'evil-surround)
      (package-refresh-contents)
      (package-install 'evil-surround))

    (setq evil-want-C-i-jump t                 ; use C-i for jump list navigation as complement to C-o
	  evil-want-C-u-scroll t               ; C-u scroll up in normal mode
	  evil-move-beyond-eol t               ; move one char beyond end of line
	  evil-cross-lines t                   ; motions like h, l, f can go to next/prev line
	  evil-respect-visual-line-mode t      ; respect visual-line-mode so that j, k move by visual lines
	  evil-show-paren-range 1              ; distance from parenthesis to highlight it
	  evil-want-fine-undo t                ; use Emacs heuristics for undo
	  evil-disable-insert-state-bindings t ; use emacs bindings in insert mode
	  evil-want-keybinding nil             ; required for evil-collection
	  evil-want-integration t              ; required for evil-collection
	  )
					       ; load evil
    (require 'evil)
    (evil-set-undo-system 'undo-redo)          ; native to Emacs 28

    (add-hook 'prog-mode-hook 'turn-on-evil-mode)
    (add-hook 'text-mode-hook 'turn-on-evil-mode)
    (evil-collection-init '(corfu dired ediff eglot eldoc flymake go-mode neotree org python restclient unimpaired vc-annotate vc-dir vc-git xref youtube-dl))
    ;; (evil-mode 1)
    ;; (evil-collection-init)

  #+end_src

** Marginalia
- Marginalia adds annotations like type of completion, short
  documentation etc to the completion candidates
  #+begin_src
    (unless (package-installed-p 'marginalia)
      (package-refresh-contents)
      (package-install 'marginalia))
    
    (require 'marginalia)
    (setq marginalia-max-relative-age 0)
    (marginalia-mode 1)
  #+end_src

** Orderless
- divides patterns into space separated components where each
  component can be of different type like literal, string, initials
  etc. The components can appear in any order
- Below setting behave as follows:
  - If component ends with ., it is treated as initials
  - if it ends with =, it is treated literal
  - if it ends with ~, it is treated as flex
  - otherwise treat as regexp


#+begin_src
  (unless (package-installed-p 'orderless)
    (package-refresh-contents)
    (package-install 'orderless))
  (require 'orderless)

  (defun orderless-flex-dispatcher (pattern _index _total)
    (when (string-suffix-p "~" pattern)
      `(orderless-flex . ,(substring pattern 0 -1))))

  (defun orderless-initials-dispatcher (pattern index _total)
    (when (string-suffix-p "." pattern)
      `(orderless-initialism . ,(substring pattern 0 -1))))

  (defun orderless-literal-dispatcher (pattern _index _total)
    (when (string-suffix-p "=" pattern)
      `(orderless-literal . ,(substring pattern 0 -1))))

  ;; The orderless completion style does not support completion of a
  ;; common prefix substring, as you may be familiar with from shells or
  ;; the basic default completion system. The reason is that the
  ;; Orderless input string is usually not a prefix. In order to support
  ;; completing prefixes you may want to combine orderless with
  ;; substring in your completion-styles configuration.

  (setq completion-styles '(substring orderless basic))
  (setq orderless-matching-styles
	'(orderless-prefixes orderless-initialism orderless-flex orderless-regexp)
	orderless-style-dispatchers
	'(orderless-initials-dispatcher orderless-flex-dispatcher orderless-literal-dispatcher))
  (setq completion-category-overrides
	'((file (styles basic partial-completion orderless))
	  (buffer (styles basic partial-completion orderless))
	  (eglot (styles basic partial-completion orderless))
	  (project-file (styles basic substring partial-completion orderless))
	  (imenu (styles basic partial-completion orderless))
	  (info-menu (styles basic partial-completion orderless))
	  ))

#+end_src

** Vertico
- Vertico provides a performant and minimalistic vertical completion
  UI based on the default completion system. The main focus of
  Vertico is to provide a UI which behaves correctly under all
  circumstances. By reusing the built-in facilities system, Vertico
  achieves full compatibility with built-in Emacs completion
  commands and completion tables. Vertico only provides the
  completion UI but aims to be highly flexible, extensible and
  modular.

  #+begin_src
    (if (< emacs-major-version 29)
	(progn
	  (unless (package-installed-p 'vertico)
	    (package-refresh-contents)
	    (package-install 'vertico))
	  (require 'vertico)

	  (vertico-mode 1)
	  (setq vertico-resize t
		vertico-cycle t)))

    ;; If you prefer to have the default completion commands a key press
    ;; away you can add new bindings or even replace the Vertico
    ;; bindings. Then the default completion commands behave as usual. For
    ;; example you can use TAB to cycle between candidates if you have
    ;; set completion-cycle-threshold.
    ;;(define-key vertico-map "?" #'minibuffer-completion-help)
    ;;(define-key vertico-map (kbd "RET") #'minibuffer-force-complete-and-exit)
    ;;(define-key vertico-map (kbd "TAB") #'minibuffer-complete)
  #+end_src

  #+RESULTS:
  : t

** Which Key
- which-key is a minor mode for Emacs that displays the key bindings
  following your currently entered incomplete command (a prefix) in
  a pop-up 
  #+begin_src
    (unless (package-installed-p 'which-key)
      (package-refresh-contents)
      (package-install 'which-key))
    (which-key-mode 1)
  #+end_src

** Embark
- provides a contextual actions on a given target
  - In the minibuffer, the target is the current top completion candidate.
  - In the *Completions* buffer the target is the completion at point.
  - In a regular buffer, the target is the region if active, or else
    the file, symbol, URL, s-expression or defun at point.
- (Multiple targets can be present at the same location and you can
  cycle between them by repeating the embark-act key binding
  #+begin_src
    (unless (package-installed-p 'embark)
      (package-refresh-contents)
      (package-install 'embark))
    (require 'embark)
    (setq prefix-help-command #'embark-prefix-help-command)
  #+end_src

** Corfu
#+begin_src
  (unless (package-installed-p 'corfu)
    (package-refresh-contents)
    (package-install 'corfu))
  (require 'corfu)

  (global-corfu-mode 1)
  (setq corfu-preselct-first nil	; disable candidate preselection
	corfu-auto t			; enable auto completion
	corfu-auto-delay 0.2		; delay for auto completion
	corfu-quit-no-match 'separator	; stay alive when starting advanced match with corfu separator even if no match
	corfu-quit-at-boundary nil	; don't quit at completion boundary
	corfu-preview-current t		; enable candidate preview
	corfu-echo-documentation t	; documentation in echo area
	corfu-cycle t)			; enable cycling for corfu-next and corfu-previous

  (define-key corfu-map "?" #'minibuffer-completion-help)
  (define-key corfu-map (kbd "TAB") 'corfu-next)
  (define-key corfu-map (kbd "<tab>") 'corfu-next)
  (define-key corfu-map (kbd "<backtab>") 'corfu-previous)
  (define-key corfu-map (kbd "S-TAB") 'corfu-previous)

#+end_src
** Recursive Editing
- A “recursive edit” is a situation in which you are using Emacs
  commands to perform arbitrary editing while in the middle of
  another Emacs command.  For example, when you type ‘C-r’ inside of
  a ‘query-replace’, you enter a recursive edit in which you can
  change the current buffer. On exiting from the recursive edit, you
  go back to the ‘query-replace’.
  |---------------+-------------------------------------------------------------------------------|
  | *C-M-c*       | exit-recursive-edit                                                           |
  |               | exit recursive edit returning to unfinished command which continues execution |
  | *C-]*         | abort-recursive-edit                                                          |
  |               | like exiting but also quits the unfinished command                            |
  |               | mode line displays square brackets around parenthesis that surround modes     |
  |               | each nested level of recursive edit displays a pair of square brackets        |
  | M-x top-level | abort all recursive edits returning to top level command                      |
  |---------------+-------------------------------------------------------------------------------|



 
